{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"15337383555420120493","abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"private"},{"name":"public_inputs","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"dZDRCoMwDEX/Jc99sIpz+CtjSNUohdKW2A6G9N8XRZ0++NI0uT235M7QYxvHRtvBTVC/ZmhJG6PHxrhOBe0sT+ckYG+bQIg8gpPOlFeENkBtozECPsrE9dHklV1rUMRqJgBtz5UNB21wuSXxp7N7NC/KDS4qeeDllZf3vHwcBrKSz8Mhz1N6c6c6TZedIWNRgOQzLbakVWtwS2OItjuFE75+V/b4PLkO+0i4mK4af/MD","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"global HONK_VK_SIZE: u32 = 128;\nglobal HONK_PROOF_SIZE: u32 = 456;\nglobal HONK_IDENTIFIER: u32 = 1;\n\nfn main(\n    verification_key: [Field; HONK_VK_SIZE],\n    proof: [Field; HONK_PROOF_SIZE],\n    public_inputs: pub [Field; 1],\n) {\n    std::verify_proof_with_type(\n        verification_key,\n        proof,\n        public_inputs,\n        0x0,\n        HONK_IDENTIFIER,\n    );\n}","path":"/Users/gabrielantonyxaviour/Developer/projects/gods-hand/circuits/src/main.nr"}},"names":["main"],"brillig_names":[]}