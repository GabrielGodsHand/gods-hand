import{aA as o,aM as l,r as d,D as A,q as i,aB as c,f as n,at as u}from"./wait_for_proven-lOMtifCd.js";import"./index-oV6Kx-_Y.js";const g=!0,f="1.0.0-beta.5+0000000000000000000000000000000000000000",_="GodsHand",p=[{name:"add_agent",is_unconstrained:!0,custom_attributes:["public"],abi:{parameters:[{name:"agent",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"7895633555767585835":{error_kind:"string",string:"Only admin can add agents"},"12648806478238410232":{error_kind:"string",string:"Invalid agent address"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBJJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAARSUAAABpKAIAAQSASScCAgQAOw4AAgABKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAlgeAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAjSUAAAKBJwICAAEvCgACAAMeAgAEAQoqAwQFJAIABQAAAK8lAAACkycCAwAACioBAwQLIgAEgEQABSQCAAUAAADOJQAAAqUtCAEEJwIFBAQACAEFAScDBAQBACIEAgUtCgUGLQ4DBgAiBgIGLQ4DBgAiBgIGLQ4DBisCAAUAAAAAAAAAAAIAAAAAAAAAAC0IAQYnAgcEBQAIAQcBJwMGBAEAIgYCBy0KBwgtDgMIACIIAggtDgMIACIIAggtDgMIACIIAggtDgUILQgBBQAAAQIBLQ4EBS0IAQQAAAECAS0OBgQtCAEGAAABAgEuDIBFAAYtCAEHAAABAgEuDIBEAAcnAggAAicCCQQKLQgACi0KBQstCgQMLQoGDS0KBw4tCggPAAgACQAlAAACty0CAAAnAggECS0IAAktCgUKLQoECy0KBgwtCgcNLQoBDgAIAAgAJQAAArctAgAALQsHAQsiAAGARAAIJAIACAAAAgAnAgkEADwGCQEnAgEECC0IAAgtCgUJLQoECi0KBgstCgcMAAgAAQAlAAAD4C0CAAAtCwQBASIAAYBHAAUtCwUECioEAwELIgABgEQAAyQCAAMAAAJRJQAABPMwCgACAAQmKACABAR4AA0AAACABIADJACAAwAAAoAqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBW2S7OLYLmwrPAQCASYqAQABBa+JlnnID2X4PAQCASYlAAACWC0LBAYLIgAGgEQAByQCAAcAAALZJwIIBAA8BggBLQsDBgsiAAaAQwAHJAIABwAAA2wjAAAC8i0LAwYtCwEHLQsCCC0LBAkNIgAGgEMACiQCAAoAAAMXJQAABQUuAgAHgAMoAIAEBAAEJQAABRcuCIAFAAoAIgoCCwAqCwYMLQ4FDAEiAAaARwAFDioGBQckAgAHAAADVyUAAAWlLQ4KAS0OCAItDgUDLQ4JBCMAAAPfJwIGBActCAAHLQoBCC0KAgktCgMKLQoECwAIAAYAJQAAA+AtAgAALQsBBi0LAgctCwQILgIABoADKACABAQABCUAAAUXLgiABQAJACIJAgoBIgAKgEUACy0OBQstDgkBLQ4HAi4MgEcAAy0OCAQjAAAD3yYlAAACWC4IgEUABSMAAAPwDSIABYBDAAYkAgAGAAAEYCMAAAQFLQsCBS0LBQYAIgYCBi0OBgUnAgYEBC0IAQcnAggEBQAIAQgBJwMHBAEAIgUCCCcCCQQEACIHAgo/DwAIAAotCwEFLQsDBi0LBAgtDgUBLQ4HAi0OBgMtDggEJi0LAwYMKgUGByQCAAcAAAR2IwAABOItCwIGACIGAggAKggFCS0LCQctCwEIACIIAgoAKgoFCy0LCwkAKgcJCi0LAwctCwQJLgIABoADKACABAQABSUAAAUXLgiABQALACILAgwAKgwFDS0OCg0tDggBLQ4LAi0OBwMtDgkEIwAABOIBIgAFgEcABi0KBgUjAAAD8CoBAAEFAtxuJ4B2Ep08BAIBJioBAAEFxWvEWg4QAAI8BAIBJi4BgAOABgsAgAYAAoAHJACABwAABTIjAAAFPS4AgAOABSMAAAWkLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAABZAuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAABV8oAYAFBAABAwCABgACgAYjAAAFpCYqAQABBUWnynEZQeQVPAQCASY=",debug_symbols:"tZjRbiMrDIbfJde5AIMx7qusqipt01WkKK2y7ZGOqrz72oCZpBJod6q9Sb544B/b2DCTz83z/vHj58Ph9PL6a3P343PzeD4cj4efD8fXp9374fUk1s+N0w/v5Stu5Rs3dyTfIL+9U8gCXiCkBtELJIXUAEGAFWhzBzorQQNyBiIMIJCdgVqCAIcK4LyBKAeZBepWBWwAZgGzBLOEaJAbxGBADdTVCnoLCQeIGmRvYJfYLNwswXkDNOAGPhrkBhAM2i1CAAMRBMlYiM4ADbgBBoPcoGS1gE0nb0ANslmyjWG9KShQhejAIDUoeS4QDXIDsMFgg4M3MEu06RpFBW6gUVSwuyebnmxwssFkdyezZJ0eFXQ6CjBWQBcMcgOvriYFagDeAA24QQgGNjja9GgWtOmo06UvMAUDGROlkJCggRZ2hdxACzuKY+T0UlKQAKNMJ3W1gNZzBTTgBuphzAKos1ghN9BKqJAaaKNVsDHZLmkZo1OgClndqMANtL8KqD8VukXHSNFmTVQBTVQBdAZoYIM1URVsFok/KGuatUQroAE30IxVoArsvEGbzt4sHg3adIZgoNNlJ2HNYQEt0QrYQBe3QmqQokHLIRMYtGRybhbvtOxQ90xXMoRK5XaVyKhkq1KqZeCd3rsRGiXXqduo26jbcrflbuOux4uNG3ntlEZk5H0nm1E2/RKRB81EsRXvK6UWhy+Zq9Rt6n0jnUuF2Ii6TcsTs5K2diMy4q7Mlj8oxVrJ8lyOg0rgOi22Pq6vB/T1gGj3gFK+eLlsN3YiPryf93s9EK+OSDk433bn/el9c3f6OB63m/92x48y6Nfb7lS+33dnuSrNsj89y7cIvhyOe6XLdpntxlN9CGzTfZDdqktwvtHwEw2nx2qVkKJbFPBGAcYKkR01hcg+dYUUbhTCWCFH3bCKQo4pjhSmUTBbFFIFoyjw21GkfxsF5r4WebgWeaKAZFH4FMLIBx4rMOrBWRRYxL4ZhXTVKIpJXYMj3xTA5WU18bYz/KQoZePB7gQtveUT3WpMypJysO6ijH6YijiRSGB1KYduHkrgNBIOPRSEYWlOE8qWDfA+DBNKYwl5XrJkCI4jmRSn5NC8yBjcqjiWwvBXTYp/vGWCHDRd4aq8vyjApL6lQay+MaQlmZDwL7wIixe8Jg7ouQQIMIwjzk6Pngp5O1v2K4+3hwfMilMP+daoixMB/K3CZNckir1DiJclhXxbFTCpzYB2hMWrogD3RSHPFoR7YUmzjDUmOyf2Vr8u7r9SYNu8k8d1cUA2J+QNF9ZpkO+LSpNIQvi3Gj6l/nCTKK/TIOp7JzGs02DXny0YJjmd9Vrs6+IxpmGvhcm6JHJWowRX+453t90WeHYedYmrjH49FP9034k42nfi7Pkg9jjkPYGGXsTJ8Z4hW8vLIT181oqzh055ETIJ2QqHErNVlfeX/vAsB0tYcaTdPH+ncdfPJHx/TpGHhbxOIi2B5HVehL57Ca7zAsEtXULrJNLSaJnXBbL0e4B1gYQYl/eyVYFQtAWhmNYIcH8AZlwVxPJCxLDOg15TTPjNEL4K3MvP3dPhfPOv9EWlzofd43Hffr58nJ6urr7//2ZX7F/tt/Pr0/7547xXpeWvbfn4IX/7buX0ute/ReSn9MhW/kPQn16vUpSr6f6izvwG",brillig_names:["add_agent"]},{name:"claim",is_unconstrained:!1,custom_attributes:["private"],abi:{parameters:[{name:"inputs",type:{kind:"struct",path:"aztec::context::inputs::private_context_inputs::PrivateContextInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]},visibility:"private"},{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"struct",path:"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"min_revertible_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"is_fee_payer",type:{kind:"boolean"}},{name:"max_block_number",type:{kind:"struct",path:"aztec::protocol_types::abis::max_block_number::MaxBlockNumber",fields:[{name:"_opt",type:{kind:"struct",path:"std::option::Option",fields:[{name:"_is_some",type:{kind:"boolean"}},{name:"_value",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}},{name:"note_hash_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifier_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"key_validation_requests_and_generators",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",fields:[{name:"request",type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",fields:[{name:"pk_m",type:{kind:"struct",path:"std::embedded_curve_ops::EmbeddedCurvePoint",fields:[{name:"x",type:{kind:"field"}},{name:"y",type:{kind:"field"}},{name:"is_infinite",type:{kind:"boolean"}}]}},{name:"sk_app",type:{kind:"field"}}]}},{name:"sk_app_generator",type:{kind:"field"}}]}}},{name:"note_hashes",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::note_hash::NoteHash",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifiers",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::nullifier::Nullifier",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"note_hash",type:{kind:"field"}}]}}},{name:"private_call_requests",type:{kind:"array",length:5,type:{kind:"struct",path:"aztec::protocol_types::abis::private_call_request::PrivateCallRequest",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_call_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_teardown_call_request",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"l2_to_l1_msgs",type:{kind:"array",length:2,type:{kind:"struct",path:"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",fields:[{name:"recipient",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"content",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"private_logs",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::private_log::PrivateLogData",fields:[{name:"log",type:{kind:"struct",path:"aztec::protocol_types::abis::log::Log",fields:[{name:"fields",type:{kind:"array",length:18,type:{kind:"field"}}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"note_hash_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"contract_class_logs_hashes",type:{kind:"array",length:1,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::log_hash::LogHash",fields:[{name:"value",type:{kind:"field"}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}}]},visibility:"databus"},error_types:{"576755928210959028":{error_kind:"string",string:"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{error_kind:"string",string:"Cannot serialize point at infinity as bytes."},"2896122431943215824":{error_kind:"fmtstring",length:144,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"2920182694213909827":{error_kind:"string",string:"attempt to subtract with overflow"},"3305101268118424981":{error_kind:"string",string:"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{error_kind:"fmtstring",length:58,item_types:[{kind:"field"}]},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5727012404371710682":{error_kind:"string",string:"push out of bounds"},"5870202753060865374":{error_kind:"fmtstring",length:61,item_types:[{kind:"field"},{kind:"field"}]},"6336853191198150230":{error_kind:"fmtstring",length:77,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"6485997221020871071":{error_kind:"string",string:"call to assert_max_bit_size"},"6753155520859132764":{error_kind:"string",string:"Failed to deliver note"},"7233212735005103307":{error_kind:"string",string:"attempt to multiply with overflow"},"8270195893599566439":{error_kind:"string",string:"Invalid public keys hint for address"},"8830323656616886390":{error_kind:"string",string:"Got a public log emitted by a different contract"},"12822839658937144934":{error_kind:"fmtstring",length:75,item_types:[]},"13649294680379557736":{error_kind:"string",string:"extend_from_bounded_vec out of bounds"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"14514982005979867414":{error_kind:"string",string:"attempt to bit-shift with overflow"},"14657895983200220173":{error_kind:"string",string:"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{error_kind:"fmtstring",length:48,item_types:[{kind:"field"},{kind:"field"}]},"16218014537381711836":{error_kind:"string",string:"Value does not fit in field"},"16446004518090376065":{error_kind:"string",string:"Input length must be a multiple of 32"},"16954218183513903507":{error_kind:"string",string:"Attempted to read past end of BoundedVec"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17879506016437779469":{error_kind:"fmtstring",length:128,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"18194595712952743247":{error_kind:"fmtstring",length:98,item_types:[{kind:"integer",sign:"unsigned",width:32},{kind:"integer",sign:"unsigned",width:32},{kind:"field"}]}}},bytecode:"",debug_symbols:"",brillig_names:["discover_new_messages","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper"],verification_key:`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
Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH`},{name:"constructor",is_unconstrained:!0,custom_attributes:["public","initializer"],abi:{parameters:[{name:"admin",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{error_kind:"string",string:"Initializer address is not the contract deployer"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"9981700386366515877":{error_kind:"string",string:"Invalid admin address"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17618083556256589634":{error_kind:"string",string:"Initialization hash does not match"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"tZrbblw3DEX/ZZ79oCsl+leCIHASpzBgOIFrFygC/3tJSZvypJAwPZO++KzhiPtQEnUd/zx9vf/8+senh6dv3/883X74efr8/PD4+PDHp8fvX+5eHr4/ifXnyekf78vpNt2cfAin26JP6s/ox3N8TuNzGp9zPN1WeZIfz9yfxY0nPnN/1jSe8tk7AS4dggsAkfZRwDtAHhBgCbBEWKLqSA1CygAekBOgDqAIUAsJFBpQPUB1WIEHcAIMS3QJAIu2Y5BaRI2wg3wVgkBMALXIK2KKgDogw5JhIViKBBZVUJuyQZWvotQiaRgdeIDHVxpPA+3YDrBo13bIALgnuCcUziicaQA5AN5OcC9wL3CveHuFO8Od8XZt1ZhvTrlVpwEsrToNyoDgARmAwhGFYx2QYElwzwFAA1p1GuDtBPeCwgWFK95eYWnVIYUM4A7kIqAM8B4wClNwALPAXauTJG1I07gDDyB8RWWAhtoBFg21QwbAneHOo3BxHkADdAx2SIDhXkIEwD0GANwT3FMGqLsM2NKq0wCWVp0GZYDmfIcMQOGKwrUOYFh4uFedUjrQgFadBgkw3GtA4YDC0QNgSXBPGTDiqTkC8HaCO6EwoXDB21Gd2qqTFOoADgDqwM4BEmAUZh8BsIQAUHdJUW7VacADkurILM46HLJTkOCzdBOTWqJCGaBd0KBKGFndNdQsKcoaoYJ3GtkgeQl5JW3qTprlVBplIwZpog+qoGQ2HbqddCoaZCrZVMg8yDx0VAwiULVYqqlUU2FTYcTiXTCCivfeSFV0ZfOtlp2mjUGtlp0KSBfVQeaRzEMHyiCzkanoLNWp1bITgarFUk2lmgebByOWtgwPUhVWarXslI0YpPPAoAKK5hFNJZktmYrWsgQlzbxOOlw66ToySGIubV/SNhC+kW4pdM8SdVjW3CgZMSibLZuNzKbt16mYrVg5zY1ObO/QbK+a40kH5KAM8mbzZgtmCwkUzRatnLbQIHuHDs1BBVSV2i6M1aM24kFZl5lOPhgRqMWibZ/1bewaZSMG6Xw2qIDIyhX7VnuGtT+y9kwnjWoQDSLNq0EF5M2m8bH2NGkLDWKQjpROKRiZR3ZG5qvjg2OjCtLxMYhAOj4GJSPzYFNh2IoLRlBpi+QgVdGcLNrOgwpI18dBFaQzXCed1wahndva2ImikdlazLmR6mlulNbiSlXn4kEM0nWCS6MK0pViEIE0OwclI/NIppLMlk0lmwqZCpkKmUcxj2Ieuk/kfj5wnUI7WrBuu31tRwTXkAy1JDBP5D5G5MyQjCpI22GQ2YLZgtmi2aLZkukls7VR2olAWvtB5kHm0UYQN2onIK/Y4+/IqEo/ZQycVq0CsCkExRAmTqtOx7KsNiTD5CbOV2Q3sRhSmFgNy4yhTOvspji7Kc5uimxvS64rvL3dnHAq/fTyfH+vh9J3x1Q5vP64e75/ejndPr0+Pt6c/rp7fG2F/vxx99SeL3fP8q2I3j99lacIfnt4vFd6u5nebu0qK4pua5q7j85PCa5nGn6jkXWcdQmZ1KZCPlMIawU5GJWhILP7VKB4phDXCjWlOhSqHM5WCrtaUGSrRQ2rWuS1QkjFDwUZG9EUZAU8k6BNEFVTswchu+ulxMVR0FLi4qbgVVPwWkFm7iFQygzhP0QgBy1EUEpZReA3EjIVIKfkFsKt22GTlzr7oi1DWnfH5XHEQ/3xvjVqWrZG/h87RI6BMzGXY9yXtYRcTSCGnFxYDtG6iUJOPzZbyflnOVNs40hpxpHrMQm9SIMEryTCpkGJkVnFzR6VZfjyHqHZI9UvZ93NpJkzW0uQX1cjbfKKLbtl7+VXq0fIv6FTd3FUOSEjDtlMLOPYdKqshGjQwH7OOcTnEnXXGmSrkPMzxUP9pSa8GyaWGTJMZk2ijLpL45CXzzhyXsYRN/lV5NbKpox3nfIvjc38GTOqkt6t6sH9ohB3MzDbahYcH9MIFTWRzWQ4plE89jiyi3VLje2A9WEO2OUsHjcpGme/RjkvLyV+R2rw9amR3LWpkfz1qbHVuDA1thq/IzUYs6jnGJer60aBGXNocH65GiTaTTy2hc7yC8ysB10chVTZplCX6jKKTX5muaREFK4uV+e0Sc+aPdpC9tDuwFkgzEESXHbLs8BGgjOSgtkfaUvp0TRjWPbo7mxXy7sdwuzQfH46zOn6nNhGQTyjyKsodgocvI2Odzv5X+uxmTjlstIk5MfAuQmncq6xmzmDHQbkqmh5xMy7zHTVMlNuYVcStGsMvVVEVeRGMK5Etg2a53RT0qpBabOy622yNaifEnIjeq4Rd/cGNm++m3pj8OcK6fqFiPK1CxHR9QvRVuPChWirceFCtO3XZHHIxTgt+7Vs0ouKDbYS3k0aui8/09jtPskkSl0O10tzvJZVjpd4/aRR0tWTRslXTxqF/udJQy5fq90USq6tzlhlt7oXSJBbLmmFr74prO7qq8JdNchjYaW4vCmsuwvPEmzWKaksq7HJTqZoOwz5wedAj+bAtravZ4udgO1ayecjAnJTb2np6JiEty2n/H5cj0nQHBz1WBRxbuAjH4siBzdn3nJMYm61cuVjFXE8B/mxisRkWwP5NeWIxKUr2S4KmtdjVI5VpJR57crhkATP5uRwSKIkuyhMdESAE5YPzofaYU65HI5FYOOLS76yCr8KfJSPd18ens/+v/NNpZ4f7j4/3o+P316fvrz79uXvH/gG/x/64/n7l/uvr8/3qjT/SVT+fJARfZM8f5SfaPWj/LR5E6h9lJ8YPyQZtymEj28azD8=",brillig_names:["constructor"]},{name:"create_disaster",is_unconstrained:!0,custom_attributes:["public"],abi:{parameters:[{name:"title",type:{kind:"field"},visibility:"private"},{name:"metadata",type:{kind:"field"},visibility:"private"},{name:"estimated_amount_required",type:{kind:"integer",sign:"unsigned",width:64},visibility:"private"}],return_type:{abi_type:{kind:"field"},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5169577899058285377":{error_kind:"string",string:"Only authorized agents can create disasters"},"8004024417947592843":{error_kind:"string",string:"Estimated amount must be greater than 0"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"",debug_symbols:"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",brillig_names:["create_disaster"]},{name:"deactivate_disaster",is_unconstrained:!0,custom_attributes:["public"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17913345758812307884":{error_kind:"string",string:"Only authorized agents can deactivate disasters"}}},bytecode:"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",debug_symbols:"tZndbhs5DIXfxde50A8pUX2VoijS1i0CGEngJgssirz7khoeTRxghHS8ubE/06MzonQkauw/hx/Hb8+/vt7d/3z4ffj0+c/h2/nudLr79fX08P326e7hXqN/DsFeYtQ3utF3Pnyq+p70cwwGohAVcnGgqGDXkkaSRTgC2KEEACIVkToizUEyQBxaAtQFUrBbJIWUAMUh46uMCCFCiHAAEKA5lAwQh4pb1OogJhgM2KEFAAFkgRwyoDrECCgOPYsOiGRck61VVqAEQKSPcwcGNIeeRQdcXHFxLQ6CiKB5z6IDAWQBCgngzSkGAAH87pQQMbckVsjWvChQAIgDZ4B1Vc1GJQGKQ3dLBwKIg+BiQfOGSPPmHKy5GIhD1GtyNKgOiR1yBujFWTvGpDfN1oqaAyNiA56bgo1zB3MLWSsb5w42zgsg0hBpHinWwwUI0BxiBoiDuYWqQXEwtyyACCFCiJjnFyBAczC3LCAOFbcwz3foWbABO5hbFiCALFDN8wtUhxgBxaFn0QGRjGvM86TDW83zCyBinl+AAc2hZ9EBF1dc3OfCQBARNO9ZdCCALCAhAby5xAAggN9dEiLmedaVK+Z5ViOJeX4BcTDPL6BdZd1SxDy/QHEwzy9AAHEQXCxo3hBp3ryZozgbiIN5notBdTDPdzDPL6AXF9tpg/mvJCMzYMlGKQ5qoEyDBGTTVqwkBJuTwp0qyGbFiQc1kIzrGr6NlkspnQqo92ohAdkcODVQHrHePytmvVItZHZyaqBCg0YLWw9Oo61ZqIiReciJBolTMhs5FVAMg6CS0oglGjRU8lCxNV6aUR/nhRrIVvdCVnSdGFTzIIxzr2ZOGPHUEMtmlmqVP9v41V767b5OBWQj6cTunNx7sBANgq9yHbE6YjJiMmINMQph0BoTkPnbqYDSaJFGC/NGz4jM9rXHeu8XYs+DrPdOa6yBbCRr7iQgGTFzce2HIluZTsWp16OuwgHjx+ZnJ4wzW5+dcF/OIzbmg8d88JgP5nEP7m1fXm4OOOh9fTofj3bOe3Xy0/Pg4+35eP90+HT/fDrdHP65PT33i34/3t7396fbs36rI3e8/6HvKvjz7nQ0erlZW4ftpuqhhubqk8RDosmFRpxoBDuCLRK60awKfKGQthWoheoK1GIZCiVfKORtBSHb6buCUKEthWkWrSEL3Su2suCrsygfmwXLmAvZnAuZKHBFFrHkvNWHtq3QdEW4QlOxK7PQHXcri4mvtZAii5bq6mq+XBlxYko9mmJlKMpmGjNXcmTMJ+ewJTHNo42x1KeUzTx4tsQLJHQfXk0V+c0KLzNTFJfQ2jkUcoqXCnVboVbC8qq1rYsjyZvhnFgzM/YZerW8UnijMLFmii0ikRTapkaaTInu/LDFqyn9K4UGb5bI+/JIgk6k/GpG/kqjxjGpdZYJfaxGLGVUoFJln0a1Ir9o1Jb2abQwCkBLkzGdrTUa82KVf3Otpcm8lBrgUX0QWzdgPfZfVsOJw2oZEq9GVId3176TaGvfyZP9Uw/1PDbxGjZ7kScbaJUMb+jzYdw8GNBsKMZ6rfo0vSnB00zasJee/LYPKNNU0ppK2ZaY7KFcsf+xrHuXnuD2zWrZmtWZQh57V6OUtxQoXF+PKF5bjyhdX48oX1uPiK6vR8TX1qOpwrvq0TSPd9Yj+h9qCbWP1XhvPZpqvLMeTTXeWY+ma+2d9Yjp+nrE/JH16PW+Q5v1iOtsLEYe+otD3ewFT06g+lMilrxWps0HNJ5MqwQZzwS6FW4+Jc5mVf+9GU/c+uNY3vFgcfHQXrZX/bQbozhrhZR9EmVNRPb1YnWG4r5e8CjNukrqPomyLjRp+xJZ13tO+xLJROuPObsSqYQJqVT2CLRx6mu8K4n1V5SW9vVgeKpVvjKFtwJf9OPt97vzxT+0LyZ1vrv9djr6x5/P999fffv07yO+wT+8j+eH78cfz+ejKa1/8+rLZz1v32TiL/aLu360I0JsxT5G+1b/cMokX16sM/8B",brillig_names:["deactivate_disaster"]},{name:"donate",is_unconstrained:!1,custom_attributes:["private"],abi:{parameters:[{name:"inputs",type:{kind:"struct",path:"aztec::context::inputs::private_context_inputs::PrivateContextInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]},visibility:"private"},{name:"disaster_hash",type:{kind:"field"},visibility:"private"},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64},visibility:"private"},{name:"chain",type:{kind:"field"},visibility:"private"},{name:"token_address",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"struct",path:"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"min_revertible_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"is_fee_payer",type:{kind:"boolean"}},{name:"max_block_number",type:{kind:"struct",path:"aztec::protocol_types::abis::max_block_number::MaxBlockNumber",fields:[{name:"_opt",type:{kind:"struct",path:"std::option::Option",fields:[{name:"_is_some",type:{kind:"boolean"}},{name:"_value",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}},{name:"note_hash_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifier_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"key_validation_requests_and_generators",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",fields:[{name:"request",type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",fields:[{name:"pk_m",type:{kind:"struct",path:"std::embedded_curve_ops::EmbeddedCurvePoint",fields:[{name:"x",type:{kind:"field"}},{name:"y",type:{kind:"field"}},{name:"is_infinite",type:{kind:"boolean"}}]}},{name:"sk_app",type:{kind:"field"}}]}},{name:"sk_app_generator",type:{kind:"field"}}]}}},{name:"note_hashes",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::note_hash::NoteHash",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifiers",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::nullifier::Nullifier",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"note_hash",type:{kind:"field"}}]}}},{name:"private_call_requests",type:{kind:"array",length:5,type:{kind:"struct",path:"aztec::protocol_types::abis::private_call_request::PrivateCallRequest",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_call_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_teardown_call_request",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"l2_to_l1_msgs",type:{kind:"array",length:2,type:{kind:"struct",path:"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",fields:[{name:"recipient",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"content",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"private_logs",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::private_log::PrivateLogData",fields:[{name:"log",type:{kind:"struct",path:"aztec::protocol_types::abis::log::Log",fields:[{name:"fields",type:{kind:"array",length:18,type:{kind:"field"}}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"note_hash_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"contract_class_logs_hashes",type:{kind:"array",length:1,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::log_hash::LogHash",fields:[{name:"value",type:{kind:"field"}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}}]},visibility:"databus"},error_types:{"576755928210959028":{error_kind:"string",string:"0 has a square root; you cannot claim it is not square"},"855401245733623969":{error_kind:"string",string:"Obtained invalid key validation request"},"2709101749560550278":{error_kind:"string",string:"Cannot serialize point at infinity as bytes."},"2896122431943215824":{error_kind:"fmtstring",length:144,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"2920182694213909827":{error_kind:"string",string:"attempt to subtract with overflow"},"3305101268118424981":{error_kind:"string",string:"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{error_kind:"fmtstring",length:58,item_types:[{kind:"field"}]},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5727012404371710682":{error_kind:"string",string:"push out of bounds"},"5870202753060865374":{error_kind:"fmtstring",length:61,item_types:[{kind:"field"},{kind:"field"}]},"6336853191198150230":{error_kind:"fmtstring",length:77,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"6485997221020871071":{error_kind:"string",string:"call to assert_max_bit_size"},"6753155520859132764":{error_kind:"string",string:"Failed to deliver note"},"7233212735005103307":{error_kind:"string",string:"attempt to multiply with overflow"},"8270195893599566439":{error_kind:"string",string:"Invalid public keys hint for address"},"8830323656616886390":{error_kind:"string",string:"Got a public log emitted by a different contract"},"12822839658937144934":{error_kind:"fmtstring",length:75,item_types:[]},"13649294680379557736":{error_kind:"string",string:"extend_from_bounded_vec out of bounds"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"14401920829616293928":{error_kind:"string",string:"Donation amount must be greater than 0"},"14514982005979867414":{error_kind:"string",string:"attempt to bit-shift with overflow"},"14657895983200220173":{error_kind:"string",string:"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{error_kind:"fmtstring",length:48,item_types:[{kind:"field"},{kind:"field"}]},"16218014537381711836":{error_kind:"string",string:"Value does not fit in field"},"16446004518090376065":{error_kind:"string",string:"Input length must be a multiple of 32"},"16954218183513903507":{error_kind:"string",string:"Attempted to read past end of BoundedVec"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17879506016437779469":{error_kind:"fmtstring",length:128,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"18194595712952743247":{error_kind:"fmtstring",length:98,item_types:[{kind:"integer",sign:"unsigned",width:32},{kind:"integer",sign:"unsigned",width:32},{kind:"field"}]}}},bytecode:"",debug_symbols:"",brillig_names:["discover_new_messages","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_integer_quotient","directive_invert"],verification_key:`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
Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH`},{name:"get_admin",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[],return_type:{abi_type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"public"},error_types:{"10055739771636044368":{error_kind:"string",string:"Function get_admin can only be called statically"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAACSHgIAAQAeAgACADMqAAEAAgADJwIBAQEkAgADAAAAbyUAAAC7HgIAAQknAgIAAQoqAQIDJAIAAwAAAIslAAAAzS8KAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAuioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJioBAAEFi40qC3IiUlA8BAIBJg==",debug_symbols:"tZXNbsMgDMffhXMO2OazrzJVVdrSKVKUVmkyaary7jNdSJoDSFO1S2xD+OE/GHiIcziOn4emu1zvYvfxEMe+advm89BeT/XQXDtufQgZP1aLnaqE48Cy4QhkJTyxBbbu14I0swPAjopObNHsICQntZBKjhc7lNNUiTTxYehDiPO+ZML53eo+dIPYdWPbVuKrbsfnT/db3T3tUPfcy4mF7syWgZemDdGbqnW0zA8FIp+GA2nUC8K7DQMKDImYEFLhStAbAuYJyks7E5QHsxAMbQiUJzil3ExwyqgcoajC+6QCwOdU6LdVmP9Vod2yFy67F65A0DapAEOUy8HnCV6TmgmeYW+qAMyqKNU1GgMJgcZRtq4LZWlJ65lhyUJWSKEuPcqE8Iguh/iDkuwJLTCcsemQO+PWLPT2noBCaQIovWyJXW8aMHbLsIX1dJTSsE7n17NQndZgOqXWmOx6gi8q8bRI0bg9qHuO6lPTb56EKdL6pj62YQ4vY3d66R2+b6knPSm3/noK57EPkbS+K8DfD7QV4T4+FhwQVaT3U5z6Bw==",brillig_names:["get_admin"]},{name:"get_disaster_amount",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"integer",sign:"unsigned",width:64},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"6699027673119592287":{error_kind:"string",string:"Function get_disaster_amount can only be called statically"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAk0eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJ2HgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACiCcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAUnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAApotAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKaLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA8MtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATWLwoAAwABHAoBAwUcCgMCABwKAgEFJigAgAQEeAANAAAAgASAAyQAgAMAAAJ1KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQVc97os/M4PXzwEAgEmJQAAAk0tCwQGCyIABoBEAAckAgAHAAACvCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANPIwAAAtUtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC+iUAAAToLgIAB4ADKACABAQABCUAAAT6LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAzolAAAFiC0OCgEtDggCLQ4FAy0OCQQjAAADwicCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAPDLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE+i4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA8ImJQAAAk0uCIBFAAUjAAAD0w0iAAWAQwAGJAIABgAABEMjAAAD6C0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEWSMAAATFLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAATFASIABYBHAAYtCgYFIwAAA9MqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjRbiMrDIbfZa5zAQZs6Kusqipt01WkKK2y7ZGOqr77scFmkiOBdqfam/aLB/6xsTEkn8vz4fHj58Px/PL6a7n78bk8Xo6n0/Hnw+n1af9+fD2z9XNx8sd7XO7ibvHglzuS//zZO4YQGTxDBANikLFJLEmAFNAs5AzScgfAkJ1BNCgKxSxFLeCiQVbwYEAK4mkDVAjyisCQvEFSQHuEZiGzULcUhRwMskIBA2oQnDdABS+CXiAaFAUIBqQQwAAVok2PSaFGUcEsaGNQZnEKAnkDs9R1rhANskKNooIOjs4ZJAVvFh8NikKNogIpBG9g04MNjjY46ttjMotUCyADynQSKApEChkMxNXMULxBMigNkgsGpOC9gU5PYBZIBjK9MARSiDwmgAAqpKgghd2ABwd2LBG/NMgsygpZLShJiU6A3xU5XyiPKkgUDbABSQoa8Lsiv4LEwxgEikIIBqQgrjawMckeiasxCmSF6oaA1EYDVKj+VFBLrv4kgazgg4KsYQNUCDZYukQDmyVdInKWs3SJBqggZdwgGmQFssFk07NZsk0vNr3Y9CLTOSmlrqGAFEADVAAwIAUp2ga6hiUGA13MkswizSFy2XhXF6hUip2yUV2sRtSqwLv66kZoFHynbovdFrstdVvqNux62G3SzpRip2yU+4zcZ9TU14hkRyWxefFeiTQOX71v1G3V+0YyV04FLw1MabXxqiXp7F52klI2wq6Mtn71vGiUXSc0Kv29xWzQ8wE9H9DzUc+NRrV6y9fXbrHj7+H9cjjI6Xd1HvIp+ba/HM7vy93543TaLf/sTx910K+3/bn+f99f+Cmv0uH8zP9Z8OV4Ogh97dbZbjzVh1BsOi8gpC5R8o2Gn2g4OfKahIuwKqQbBRgrxOJIFbi5YlfAcKMQxgo5Sv1UhRwxjhSmUZRiUXBOR1Gkb0eBfzeKlHsu8jAXeaKQyKLwGMLIhzJW4E4VVaGw2Dej4N0yimJW14DoTQL40BvW9aQsia87qsHHnR8GMqnLAs4kuO3nkcQfRDLcoRON7L1tcj5C14yk2z7hcdYo0JLq+ULWJbiH3mrQrLRQJcCtSQ3gbxUmxUkUbZMS3xO6Bt+TbzUm5RmSdat4tUnB3SrAZDmBm78FAq6MNSYlnsACScFtUyi2T9GnbXFANif4Cwts0yDfk0qzSNLf1fCI/RxDyts0iIJpUIFtGsX1Y6TAWGO612LPC19WcLjXwiQvSM5qlADX9seXwVuNSYVRbzx0taK8vJv6Thr2nTBpoHKF60cBuaEXcuQM48jB3KCchn08pNlS9P1KiMM+HnAaSenlxT9YjK8501BgDQXHErMDPrq1k8O6onwT/O0z6frGh+PmM5PwPSe8MHmbBHYvfN7mRehNlHGbF6lnhDcrbZPAdb/nsi2Qte0E2BZIiHH9JrApEIqWEIq4RaD0zV7SpiDWK3iBbR70miqUvhnC/wXu+eP+6Xi5+dHzS6Qux/3j6aAfXz7OT1dP3/99syf2o+nb5fXp8PxxOYjS+ssp//kB/A0CsNzLl2n+yI1mx99B5aOXp+R2QHD/Jc78Bw==",brillig_names:["get_disaster_amount"]},{name:"get_disaster_creator",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1897970633891528075":{error_kind:"string",string:"Function get_disaster_creator can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAj4eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJnHgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACeScCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAYnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAostAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKLLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA7QtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATHLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAJmKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQUaVvI8Uzo9izwEAgEmJQAAAj4tCwQGCyIABoBEAAckAgAHAAACrScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANAIwAAAsYtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC6yUAAATZLgIAB4ADKACABAQABCUAAATrLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAyslAAAFeS0OCgEtDggCLQ4FAy0OCQQjAAADsycCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAO0LQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE6y4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7MmJQAAAj4uCIBFAAUjAAADxA0iAAWAQwAGJAIABgAABDQjAAAD2S0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAESiMAAAS2LQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE6y4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAS2ASIABYBHAAYtCgYFIwAAA8QqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUGIwAABREuAIADgAUjAAAFeC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVkLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAUzKAGABQQAAQMAgAYAAoAGIwAABXgmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjdbts8DIbvxcc9EKkfir2VoSjSNh0CBGmRtR/woci9j5RJORkgA3Oxk+QxLb0WJZKS/TW97J8+fz4eTq9vv6b7H1/T0/lwPB5+Ph7fnncfh7eTWL+moD8AZbpPdxMgTPek/3INQSAmARBI6EAC2jarJSuQQXELBYc83SMK1OCQHNiA3cJmwZAcqgGgAxnoSGcoBlEfEQUyOGSD4reKW8gt1C1sUKNDNWB0oBliAIdiACoICsmBDTA6kEFEh2KQvHvKBs2LBm4p3qZoL1mCSODgljbPDZJDNWheNLDGKQSHbABugeTABs2LBmQQwcG7R2+cvHGyp6fsFo0WLAJFu5MCGxAZVHTQoVYBBofswDPkEB3IAMDBumd0C2YH7c4CkQyStImoUAxyMtDAnkEaRxlYydpGdIouSmSFaqBr0aCCQ3aQhyZJK9J5TqCQHKoBokMxiN4m+S3NwSTjIZ3VBjqMGbKBxsYMxaC6RceTJGiJo0OdoWo8N9A5nCE7sAFar6phnJICGegczpAd2KANtYE3Lt69uIW8O3l38u6alSkrsIGGsQJrMs5ABlouGmBwsDlktHnmiA5uKdpGIpPb/JACG7SJalBngBBwjgAhctJJMypO2G3YbbHbYrelbktdL3ebFgEjdiqxU+9BvUdb9qKkNSE1Wxu9Eujomx/QJq0RdFvbDhq1CeRG2Sl2m0ZmDo3YSVPfqCvn6NTidKbs1FZ9pv7c2m21t/PVAOCux/4MbJFLl8vd5Pvb48d5v9ft7WrDk23wfXfenz6m+9Pn8Xg3/bc7frZGv953p/b/sTvLXfFgf3qRfxF8PRz3Spe7pXcYd4UY2btDlJLTJbjeaMCKRtA9bZYICReFfKOAY4Uk6WAKUj1LVyjxRiGOFWrSWGkKNZU0Ulj1gtm9kLUaeZG/7UX5t17k2teiDteirihkci+gxDgaA48VOMdkCixi3/QCcOjFWlxjKeASWGocxvVKWJKcZ0yD5PwydGQlLqWquwQj1pHEX3gyzNAVjYrFY7vKwbAr5Ns6AWWtUBRfVJATV5eA/Md80lpoFZPAsCxqRLhVWAlOouSOEPGSYnIQvtVYCU+pcp6lV0mK4VYBV6YTgX1FEAOPNVZCPKM7kmPYpsCepwXyNj+w+iDkjQS3aRD0RaU1T/K/1QA53fayRXWbBlF0DWLcpsGhbyOMY43VXEt9XUBO+MNciyvrUih4jMrpfCl/cty71ViJMOqFh65mVKZ3S92JMKw7caWAytEs962AwnAUuuUM/ajRY0PeJ4Z1POa1qej5SvL6NJQoq55wDy/5IlG2bAbXR60yzvo1CeiTISOq2yRKHwXUbaOIvXoJbhtFxrBkCW2TKEuiVd7myJLvEbc5ElNajuCbHKHkC0KpbBHgnmWcNzmxnH0Zt42gxxRT/qYLfwo8yOXu+XC++Zx4UanzYfd03Nvl6+fp+erux//vfsc/R76f3573L5/nvSot3yTl5wfK4+Wo9qDvrnIp59Y7KVh6CXq3kNzlh4sO5jc=",brillig_names:["get_disaster_creator"]},{name:"get_disaster_info",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"struct",path:"GodsHand::DisasterInfo",fields:[{name:"title",type:{kind:"field"}},{name:"metadata",type:{kind:"field"}},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64}},{name:"creator",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"active",type:{kind:"boolean"}}]},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"8291692332965461258":{error_kind:"string",string:"Function get_disaster_info can only be called statically"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"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",brillig_names:["get_disaster_info"]},{name:"get_disaster_metadata",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"field"},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"3443646796185337992":{error_kind:"string",string:"Function get_disaster_metadata can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAj4eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJnHgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACeScCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAQnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAostAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKLLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA7QtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATHLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAJmKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQUvykqEEooAiDwEAgEmJQAAAj4tCwQGCyIABoBEAAckAgAHAAACrScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANAIwAAAsYtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC6yUAAATZLgIAB4ADKACABAQABCUAAATrLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAyslAAAFeS0OCgEtDggCLQ4FAy0OCQQjAAADsycCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAO0LQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE6y4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7MmJQAAAj4uCIBFAAUjAAADxA0iAAWAQwAGJAIABgAABDQjAAAD2S0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAESiMAAAS2LQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE6y4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAS2ASIABYBHAAYtCgYFIwAAA8QqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUGIwAABREuAIADgAUjAAAFeC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVkLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAUzKAGABQQAAQMAgAYAAoAGIwAABXgmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjRTiM7DIbfpddcxE5ix7zKCqECZVWpKqgLRzpCvPvaGTtDV5qRdtDewFdP8o+d2E7aj93T4eH95/3x/Pzya3f742P3cDmeTsef96eXx/3b8eWs1o9dsj8AtLstNztA2N2y/dfPkBRyUQCFggGsYGOrWaoBO1BYOAXU3S2iQksBJUAcJCziFkwloDkABrCDeToBOWR7RVaoEFAdKB5RWDgsPCzi0HJAcxAM4AlyggByABMEgxIgDpgD2CFjADmUmF6qQ4+iQ1goxpDN0i3IDAFh6evcoQQ0hx5FBx9cUgqoDhAWKAHi0KPowA4ZAmJ6jsElBhd/e6lhsWxBUiCbzgbiwOzQMMBcbQoCATVAJqgpB7ADQIBPrxgWrAE2XRQyOxQdk9GAHGpxsMSeQAdndYyqjVEdsk3JYtAcbC86NAioAfrSomXFts4FDEpAc0AMIIccY0o8shos6g/bqnYwNyaoDpYbE5BDC4v5UzRpWXJAm6BZPnewNZygBogD+qxmaVyKATvYGk5QA8Shu9ohBlNMp7BwTOeYzjHdqrJUA3GwNDYQK8YJ2MHaRQdMAb6Ggr7OkjEgLGRjNDOlrw8biENfqA5tAkgJpwxQ4iBbNCcKwmHDYcvDloetDFsZenXYrAk4SRDlQWMGjxl928nIekLptu69EZj3PQ7oi9YJhq0fB536AkqnGpSHzTKzpk4SZKXvNJRrDup5OlEN6rs+0XhvG7Y2xsVuAMjQk3gH9szlz8+bXZxv92+Xw8GOty8Hnh6Dr/vL4fy2uz2/n043u//2p/c+6Nfr/tz/v+0v+lQjOJyf9L8KPh9PB6PPm3l2Wp4KOUtMh6wtZ0hIu9KAFY1kZ9okkQrOCvVKAZcVipaDK2j3pKFA+UohLyu0YrnSFVqhsqSwGoVIRKF7tRRF/XYU9G+jqG3sRVvci7aiUDmiAMp5yQdZVpCaiyuIin0zCsDFKNbyGokgJJBaXszrlbRkvc+4Buv9ZTGQlbzUrh4SgtiWJP4iksUKXdFgoShyPT5nL+p1nwBaaxQUmwp64xoSUP9YT15LLXIJTPOmZoRrhZXkZC5RpKxBDQ29CF9rrKSndrmo0i9FiulaAVeWE0FiRxCTLGuspHjFCKTmtE1Bok4J6rY4sIUT+o0Et2kwjE3ltUjqv9UAGikOxG2bBnMODRbcpiFpHCOCyxqrtVbGvoDe8BdrLa/sC3GKHNXb+dz+9Lp3rbGSYTwaD39ZUV3eDX2npbTYd/JKA9WrWR1HAadFL+zIWXSj5dH+Wl3s47muLcWoV9avT4sStBqJjPTSXyRoy2Hw9apFy1W/JgFjMdSjtk2ChhfQtnmRR/dS3OZFxTRXCW+ToLnQmmwLZK73jNsCyaXMV/BNgXCJDeFCWwRkVJnUTUHMd1/BbR6MnBKu3wzhT4E7/bh/PF6ufk78NKnLcf9wOvjH5/fz45enb/+/xpP4OfL18vJ4eHq/HExp/k1S//xAfb1e1e7su6t+1HvrjTYs+wj2lFifyt2nOfMb",brillig_names:["get_disaster_metadata"]},{name:"get_disaster_title",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"field"},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"18096245990168714626":{error_kind:"string",string:"Function get_disaster_title can only be called statically"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAj4eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJnHgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACeScCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAMnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAAostAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKLLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA7QtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATHLwoAAwABJigAgAQEeAANAAAAgASAAyQAgAMAAAJmKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQX7IsfZnBfdgjwEAgEmJQAAAj4tCwQGCyIABoBEAAckAgAHAAACrScCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANAIwAAAsYtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC6yUAAATZLgIAB4ADKACABAQABCUAAATrLgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAyslAAAFeS0OCgEtDggCLQ4FAy0OCQQjAAADsycCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAO0LQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE6y4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA7MmJQAAAj4uCIBFAAUjAAADxA0iAAWAQwAGJAIABgAABDQjAAAD2S0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAESiMAAAS2LQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE6y4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAAS2ASIABYBHAAYtCgYFIwAAA8QqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUGIwAABREuAIADgAUjAAAFeC4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVkLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAUzKAGABQQAAQMAgAYAAoAGIwAABXgmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjdaiM9DIbvZY57YMk/snorSylpmy6BkJZs+8FHyb2v5JE8yYIHdsqeJM9o7HckWfI4+Zpe9k+fPx8Pp9e3X9P9j6/p6Xw4Hg8/H49vz7uPw9tJrF9T0A+AMt2nuwkQpnvSb7mGIBCTAAgkdCABHZvVkhXIoLiFgkOe7hEFanBIDmzAbmGzYEgO1QDQgQzU0xmKQdRHRIEMDtmg+K3iFnILdQsb1OhQDRgdaIYYwKEYgAqCQnJgA4wOZBDRoRgkn56yQYuigVuKjyk6S5YgEji4peW5QXKoBi2KBjY4heCQDcAtkBzYoEXRgAwiOPj06IOTD0729JTdotWCRaDodFJgAyKDig7qahVgcMgOPEMO0YEMABxseka3YHbQ6SwQySDJmIgKxSAnAy3sGWRwFMdK1jGiU3RRIitUA12LBhUcsoM8NElbkeY5gUJyqAaIDsUg+pjkt7QHk/hDmtUG6sYM2UBrY4ZiUN2i/iQpWuLoUGeoWs8NNIczZAc2QJtVtYxTUiADzeEM2YENmqsNfHDx6cUt5NPJp5NP165MWYENtIwVWJtxBjLQ7aIBBgfLIaPlmSM6uKXoGKlMbvkhBTZoiWpQZ4AQcK4AIXLSpBkVJ+w27LbYbbHbUrelrpe7TTcBI3YqsVOfQX1GW/aipHtCarbmvRKo9y0OaElrBN3WXgeNWgK5UXaK3aaVmUMjdtLWN+rKOTq1Op0pO7VVn6k/t3Zb7eN8NQC467E/A1vl0uVyN/n77fHjvN/r6+3qhSevwffdeX/6mO5Pn8fj3fTf7vjZBv16353a98fuLHclgv3pRb5F8PVw3Ctd7pbZYTwVYmSfDlG2nC7B9UYDVjSCvtNmiZBwUcg3CjhWSNIOpiC7Z+kKJd4oxLFCTVorTaGmkkYKq1EwexSyVqMo8rejKP82ilz7WtThWtQVhUweBZQYRz7wWIFzTKbAIvbNKACHUazVNZYCLoGlxmFdr5QlyXnGNEjOL8NAVupSdnWXYMQ6kviLSIYduqJBNXg+qcalrvLtPgFlbaMovqggJ64uAfmPfNJaaRWTwLAsakS4VVgpTqLkTUrES4vJQfhWY6U8ZZfzLr1qUgy3CriSTgT2FUEMPNZYKfGMHkiOYZsCe58WyNviwOpOyC8S3KZB0BeV1iLJ/1YD5HTbty2q2zSIomsQ4zYNDv01wjjWWO211NcF5IQ/7LW4si6FgteonM6X7U+Oe7caKxVGfeOhq4xKejftO3m478SVDVSOZrm/CigMvdBXztiNGBY3hvt4zGup6P1K8vNpKFFWI+FeXvKPRNnyMrg+apVx169JQE+GeFS3SZTuBdRtXsS+ewlu8yJjWLqEtkmUpdEqbwtk6feI2wKJKS1H8E2BUPIFoVS2CHDvMs6bgljOvozbPOg1xZS/GcKfAg9yuXs+nG/+Tryo1Pmwezru7fL18/R8dffj/3e/439Hvp/fnvcvn+e9Ki3/ScrHD5THy1HtQX+7yqWcW+9kw9JL0LuF5C4/XNSZ3w==",brillig_names:["get_disaster_title"]},{name:"get_donation_count",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"integer",sign:"unsigned",width:64},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"2200152331597976830":{error_kind:"string",string:"Function get_donation_count can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAk0eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJ2HgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACiCcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAgnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAApotAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKaLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA8MtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATWLwoAAwABHAoBAwUcCgMCABwKAgEFJigAgAQEeAANAAAAgASAAyQAgAMAAAJ1KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQUeiILjgKUU/jwEAgEmJQAAAk0tCwQGCyIABoBEAAckAgAHAAACvCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANPIwAAAtUtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC+iUAAAToLgIAB4ADKACABAQABCUAAAT6LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAzolAAAFiC0OCgEtDggCLQ4FAy0OCQQjAAADwicCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAPDLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE+i4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA8ImJQAAAk0uCIBFAAUjAAAD0w0iAAWAQwAGJAIABgAABEMjAAAD6C0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEWSMAAATFLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAATFASIABYBHAAYtCgYFIwAAA9MqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjRbiMrDIbfZa5zAQZs6Kusqipt01WkKK2y7ZGOqr77scFmkiOBdqfam/aLB/6xsTEkn8vz4fHj58Px/PL6a7n78bk8Xo6n0/Hnw+n1af9+fD2z9XNx8sd7XO7ibvHglzuS//zZO4YQGTxDBANikLFJLEmAFNAs5AzScgfAkJ1BNCgKxSxFLeCiQVbwYEAK4mkDVAjyisCQvEFSQHuEZiGzULcUhRwMskIBA2oQnDdABS+CXiAaFAUIBqQQwAAVok2PSaFGUcEsaGNQZnEKAnkDs9R1rhANskKNooIOjs4ZJAVvFh8NikKNogIpBG9g04MNjjY46ttjMotUCyADynQSKApEChkMxNXMULxBMigNkgsGpOC9gU5PYBZIBjK9MARSiDwmgAAqpKgghd2ABwd2LBG/NMgsygpZLShJiU6A3xU5XyiPKkgUDbABSQoa8Lsiv4LEwxgEikIIBqQgrjawMckeiasxCmSF6oaA1EYDVKj+VFBLrv4kgazgg4KsYQNUCDZYukQDmyVdInKWs3SJBqggZdwgGmQFssFk07NZsk0vNr3Y9CLTOSmlrqGAFEADVAAwIAUp2ga6hiUGA13MkswizSFy2XhXF6hUip2yUV2sRtSqwLv66kZoFHynbovdFrstdVvqNux62G3SzpRip2yU+4zcZ9TU14hkRyWxefFeiTQOX71v1G3V+0YyV04FLw1MabXxqiXp7F52klI2wq6Mtn71vGiUXSc0Kv29xWzQ8wE9H9DzUc+NRrV6y9fXbrHj7+H9cjjI6Xd1HvIp+ba/HM7vy93543TaLf/sTx910K+3/bn+f99f+Cmv0uH8zP9Z8OV4Ogh97dbZbjzVh1BsOi8gpC5R8o2Gn2g4OfKahIuwKqQbBRgrxOJIFbi5YlfAcKMQxgo5Sv1UhRwxjhSmUZRiUXBOR1Gkb0eBfzeKlHsu8jAXeaKQyKLwGMLIhzJW4E4VVaGw2Dej4N0yimJW14DoTQL40BvW9aQsia87qsHHnR8GMqnLAs4kuO3nkcQfRDLcoRONXMjWszi3rkW67RMeZ40CLameL2RdgnvorQbNSgtVAtya1AD+VmFSnETRNinxPaFr8D35VmNSniFZt4pXmxTcrQJMlhO4+Vsg4MpYY1LiCSyQFNw2hWL7FH3aFgdkc4K/sMA2DfI9qTSLJP1dDY/YzzGkvE2DKJgGFdimUVw/RgqMNaZ7Lfa88GUFh3stTPKC5KxGCXDd8nwZvNWYVBj1xkNXK8rLu6nvwLDvhEkDlStcPwrIDb2QI2cYRw5WG5TTsI+HNFuKvl8JcdjHA04jKb28+AeL8TVnGgqsoeBYYnbAR7d2clhXlG+Cv30mXd/4cNx8ZhK+54QXJm+TwO6Fz9u8CL2JMm7zIvWM8GalbRK47vdctgWytp0A2wIJMa7fBDYFQtESQhG3CJS+2UvaFMR6BS+wzYNeU4XSN0P4v8A9f9w/HS83P3p+idTluH88HfTjy8f56erp+79v9sR+NH27vD4dnj8uB1FafznlPz+Av0EAlnv5Ms0fudHs+DuofPTylNwOCO6/xJn/AA==",brillig_names:["get_donation_count"]},{name:"get_unlocked_funds",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"},{name:"org_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"}],return_type:{abi_type:{kind:"integer",sign:"unsigned",width:64},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"3519997112791842385":{error_kind:"string",string:"Function get_unlocked_funds can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"tZnRbts6DIbfJde9kERRFPsqwzB0XTYUCNoiaw9wMPTdJ8r8lWSAhczBbprPtPRblEhKrn/tvu2/vv/48vT8/eXn7v7Tr93X49Ph8PTjy+Hl8eHt6eW5WX/tgv2JKe3u8137ld29tF9q1zE0yO1+jAbVgamBtWWzcINCAFikONS4u0/JoDhoAPACKQQALBGWmAHVIRFAHGyoC9gjqAGLQ4kA3BJYBJYKS2WAOmgG1AUoEMAfQTEBTLDND6UAYIA6EAGqQ04AdOcIEIcCS0EbsV7ZQBwqLH2eDfo8d8iAukAOCeCNc4wAWFIAMEAduhcd/Ok5o3tG44zGnAGwWLSkYmDdW7BlYYdKgOqgNtRqIAtwiAAGqEMkABqnBICF0J2suzbIBGhtqAUSc3IoAVAdpDUma2wz38FmfgFYFBZ1S7ExL8AOFuELZIA6WITnYCAOFuELwJJhybBY2CzADjb4BTJAHQSPkOrQvagGxUEjgAG6gIQMqA4xAcTBvFgAFkIbC/7cwlhs5hcQh+5FBwaoQ0HjgsaWBQvAUtHdvOhgWbBABvjTa0gAb1xjAPjTa4IlWXcysO4tjKtVmw45A9TBKmRmg+pQEqA4SABkABpXdK+wKLqrdW+5o7YEC1ibFjZqwd8hRYA6UGvMbWBqxZytl+VpB3ZLDBZSLJ3aQ7gaWfIuZA44CchqqZPJqZENsNi+Ea2qO+VBFWQBs1Aa7dK4axWmxE4KslEtZEHiJCAbn9Ow2fhK6qSgmkE2p07ilEIcxIPQt+9BhYwsuJ0EZIXFiQcpKI8eeajwsPFQKUOlDBVL27JszgyyfHUSkNKg6kQW2wtFzDPFPAgzTmnYLCKKbd3U56904kEK6jO5UPXIIRuBkzj1zcZp2OKwxWFLw5aGjWjQsNle48SDFMSjB48ePTa4k81Gt/XRL1Tdj9znbyHY2EbvZH0t2tk2S6dh61GsnXiQggjKTJg/7vHcieMgAZXx3DJsYz14rAeP9eA6ntEju3x83O1w0Pvydtzv7Zx3dvJr58HXh+P++W13//x+ONzt/ns4vPdGP18fnvvv28Ox3W1RsX/+1n6b4Penw97o4+7UO6x3bYms6N4iK/GQ0HqhEScawQ53i0QrUicFvlBI6wpZg7hC1liGQqELBVpXaDW+ukLNJa8pTL1QhRet4qx5wTd7Uf6tF1zHWtTVtagThXZwgkIhWhuDrisoU3YFbWI3etEq+JoXs7huLxQREqlUWo3rSVgKMbuGtFq76sgkLrXtU5iLlOqaxF94spqhE41aY0Fc1XxyhC/rRCyzQlGwqG1POIVmK2uXGjILLYwihdOiUoqXCpPgFMlIUhE9pViqfyzJJDxblUOWniVpCpcKaTKdKSpWJLXTx7rGJMQ5wRGmsE1Bkacl8jY/2os0/KCzFfkrDRmhlWTmCf9bjVjK2MfaS9M2DRGChmjapqFhbCOa1jWmuZbHutgpZDXXaLIuRQJiVMLZfMRwmW00LcNhzGmIsjqOaysP61rlIbq98timc1vlIb698lC5tfKQ3F55qN5aeaYKV1WeqR9XVp6pxpVVI6d/q3Ft5ZlqXFl5phpXVp5prl1ZebJcV3lSodXKk2f7/DjyyHntKrKp7pydQf+oOzw7eMXM4xAqYXUUPKmgUgmxIZVXT5A8O4SWka9SyuoJkmnqiY7wam+9q68mc1fSyZWyLjHbG3M4VfJ0mtH2Dnr1afj8XbOsF5/puo41aRNTt0mUMYpYt42CRhFtuG0UPFakJatskyinfK+6zZFT2aG0zRHK+fQ/iE2OSMaCSC5bBHQku/ImJ04v/5q2jWDElArf6MKfAp/b5cPj0/Hiw+KHSR2fHr4e9n75/f358ezu2/+vuIMPk6/Hl8f9t/fj3pROXyfbn0/UPgdRrp/tn8ztMmq+i6p2Ge1uOz61L2efP2wwvwE=",brillig_names:["get_unlocked_funds"]},{name:"get_vote_count",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"integer",sign:"unsigned",width:64},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"3065118628985571745":{error_kind:"string",string:"Function get_vote_count can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAk0eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJ2HgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACiCcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAknAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAApotAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKaLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA8MtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATWLwoAAwABHAoBAwUcCgMCABwKAgEFJigAgAQEeAANAAAAgASAAyQAgAMAAAJ1KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQUqiX0nQx4JoTwEAgEmJQAAAk0tCwQGCyIABoBEAAckAgAHAAACvCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANPIwAAAtUtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC+iUAAAToLgIAB4ADKACABAQABCUAAAT6LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAzolAAAFiC0OCgEtDggCLQ4FAy0OCQQjAAADwicCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAPDLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE+i4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA8ImJQAAAk0uCIBFAAUjAAAD0w0iAAWAQwAGJAIABgAABEMjAAAD6C0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEWSMAAATFLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAATFASIABYBHAAYtCgYFIwAAA9MqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjRais5DIbfJde5sGVZsvsqh0NJ2/QQCGnJaReW0ndfySN5mgWb3SnnJvlGY/8jWbI8ycfu6fjw/uv+dHl++b27+/Gxe7iezufTr/vzy+Ph7fRyEevHLuhHjLS7w/0uQtzdsX7LdQwCCQWiAIIDC+jYrJaswAbkFg4OeXcHIFCCAzpUg+qWahYI6FAMIjiwgXq6ABkkfUQSyNEhG5DfIrewW7hbqkFJDsWgggMvkEJ0IIOoglEBHaoBJAc2SOBABujTMRu0KBq4hXwM6SxJQeLo4Ja2zg3QoRi0KBrYYAzBIRtEt0R0qAYtigZskKKDT08+GH0w2tMxu0WrBUiAdDorVANmgwIO6moRqNEhO9QFckgObBCjg03P4BbIDjq9CiQ2QBmTQIEMMhpoYS8gg5M4llkemnQWF4NiFtKkYFCQZ6Hki/RWA41iAVqANQULyLNQHsHqISaFapCSAxuoqwv4mOy31FVEhWLQ3FDQ2liADJo/DcxSmj9ZoRjEZKBruAAZJB+sXWIBn6VdAiXLRbvEAmSgZbwAOhQD9sHs04tbik+vPr369KrTJSm1raGCFsACZADgwAZatAvYGlZMDraYNbtFmwNK2cTQFqg2wk7FqS3WQrxUQQzt0QuRU4qdug27Dbstd1vuNup61G3azoywU3EqfUbpM1rqW0S6o7LaonpvxBZHbN4v1G3N+4V0rp4KURuY0WqTVcva2aPuJKPiRF2ZfP3aebFQCZ3IqfbnVrdBzwf0fEDPRzs3FmrVWz8/9zs//u7frsejnn5fzkM5JV8P1+PlbXd3eT+f97u/Duf3Nuj36+HSvt8OV7krq3S8PMm3CD6fzkelz/06O4ynxpSqT5cFhNwlarnRiBONoEfeIhEQVoV8owBjBayBTUGaK3UFSjcKaaxQUOunKRQkHClMo6jVo5CcjqLI346C/mwUufRclGEuykQhs0cRKaWRD3WsIJ0KTaGK2DejkN0yimJW10AUXQLk0BvW9aQsWV53TEOOuzgMZFKXFYJLSNsvI4n/Eclwh040qrQh9yLiGki+7RORZo2CPKmisJam9NBbDZ6VFpkEhDWpCeKtwqQ4mdE3Kct7QteQ9+RbjUl5puzdCr9sUgi3CjBZTpDm74FAqGONSYln8EByCtsUqu9TinlbHFDcCfnBAts0OPak8iyS/Gc1IlE/x4jLNg3m5BpcYZtGDf0YqTDWmO417HmRlxUa7rU0yQtx8BploLX9ycvgrcakwrg3Hv6yorK8m/oODftOmjRQfYXrRwGHoRd65AzjKMnd4JKHfTzl2VL0/cpEwz6eaBpJ7eUlf1iMX3OmocAaCo0lZgc8hrWTw7qi8ib4n8+kr298NG4+M4nYcyILU7ZJUPcilm1epN5EBbd5kXtGZLPyNgla93up2wJZ206CbYEkxPWXwKZAGD0hjLRFoPbNXvOmINZX8ArbPOg1VTl/M4R/C/yUy8Pj6Xrzp+enSl1Ph4fz0S6f3y+PX+6+/f3qd/xP09fry+Px6f16VKX1n1P5+AHyCwKo/tQf03IpjWYvTVgvo97lsAeGn5/qzD8=",brillig_names:["get_vote_count"]},{name:"increment_donation_count",is_unconstrained:!0,custom_attributes:["public","internal"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1026094498791286252":{error_kind:"string",string:"Disaster is not active"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"15180078658462084435":{error_kind:"string",string:"Function increment_donation_count can only be called internally"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"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",brillig_names:["increment_donation_count"]},{name:"increment_vote_count",is_unconstrained:!0,custom_attributes:["public","internal"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1026094498791286252":{error_kind:"string",string:"Disaster is not active"},"1172192830538017554":{error_kind:"string",string:"Function increment_vote_count can only be called internally"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"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",brillig_names:["increment_vote_count"]},{name:"is_agent",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"}],return_type:{abi_type:{kind:"boolean"},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5552105838155802656":{error_kind:"string",string:"Function is_agent can only be called statically"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAk0eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJ2HgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACiCcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAInAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAApotAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKaLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA8MtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATWLwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAJ1KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQVNDQrX7qYoIDwEAgEmJQAAAk0tCwQGCyIABoBEAAckAgAHAAACvCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANPIwAAAtUtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC+iUAAAToLgIAB4ADKACABAQABCUAAAT6LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAzolAAAFiC0OCgEtDggCLQ4FAy0OCQQjAAADwicCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAPDLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE+i4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA8ImJQAAAk0uCIBFAAUjAAAD0w0iAAWAQwAGJAIABgAABEMjAAAD6C0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEWSMAAATFLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAATFASIABYBHAAYtCgYFIwAAA9MqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjRbiMrDIbfZa5zAQZs6Kusqipt01WkKK2y7ZGOqr77scFmkiOBdqfam/aLB/6xsTEkn8vz4fHj58Px/PL6a7n78bk8Xo6n0/Hnw+n1af9+fD2z9XNx8sd7XO7ibvHglzuS//zZO4YQGTxDBANikLFJLEmAFNAs5AzScgfAkJ1BNCgKxSxFLeCiQVbwYEAK4mkDVAjyisCQvEFSQHuEZiGzULcUhRwMskIBA2oQnDdABS+CXiAaFAUIBqQQwAAVok2PSaFGUcEsaGNQZnEKAnkDs9R1rhANskKNooIOjs4ZJAVvFh8NikKNogIpBG9g04MNjjY46ttjMotUCyADynQSKApEChkMxNXMULxBMigNkgsGpOC9gU5PYBZIBjK9MARSiDwmgAAqpKgghd2ABwd2LBG/NMgsygpZLShJiU6A3xU5XyiPKkgUDbABSQoa8Lsiv4LEwxgEikIIBqQgrjawMckeiasxCmSF6oaA1EYDVKj+VFBLrv4kgazgg4KsYQNUCDZYukQDmyVdInKWs3SJBqggZdwgGmQFssFk07NZsk0vNr3Y9CLTOSmlrqGAFEADVAAwIAUp2ga6hiUGA13MkswizSFy2XhXF6hUip2yUV2sRtSqwLv66kZoFHynbovdFrstdVvqNux62G3SzpRip2yU+4zcZ9TU14hkRyWxefFeiTQOX71v1G3V+0YyV04FLw1MabXxqiXp7F52klI2wq6Mtn71vGiUXSc0Kv29xWzQ8wE9H9DzUc+NRrV6y9fXbrHj7+H9cjjI6Xd1HvIp+ba/HM7vy93543TaLf/sTx910K+3/bn+f99f+Cmv0uH8zP9Z8OV4Ogh97dbZbjzVh1BsOi8gpC5R8o2Gn2g4OfKahIuwKqQbBRgrxOJIFbi5YlfAcKMQxgo5Sv1UhRwxjhSmUZRiUXBOR1Gkb0eBfzeKlHsu8jAXeaKQyKLwGMLIhzJW4E4VVaGw2Dej4N0yimJW14DoTQL40BvW9aQsia87qsHHnR8GMqnLAs4kuO3nkcQfRDLcoRONnPp65kSrQrrtEx5njQItqZ4vZF2Ce+itBs1KC1UC3JrUAP5WYVKcRNE2KfE9oWvwPflWY1KeIVm3ilebFNytAkyWE7j5WyDgylhjUuIJLJAU3DaFYvsUfdoWB2Rzgr+wwDYN8j2pNIsk/V0Nj9jPMaS8TYMomAYV2KZRXD9GCow1pnst9rzwZQWHey1M8oLkrEYJcG1/fBm81ZhUGPXGQ1crysu7qe/kMuo7YdJA5QrXjwJyQy/kyBnGkYPVBuU07OMhzZai71dCHPbxgNNISi8v/sFifM2ZhgJrKDiWmPTQRNb/rlPC98DfPpGu73s4bj0zCd8zwsuSt0lg98LnbV6E3kIZt3mRej54q9I2CVx3ey7bAlmbToBtgYQY1+8BmwKhaAmhiFsESt/qJW0KYr2AF9jmQa+pQumbIfxf4J4/7p+Ol5ufPL9E6nLcP54O+vHl4/x09fT93zd7Yj+Zvl1enw7PH5eDKK2/m/KfH8DfHwDLvXyV5o/cZnb8DVQ+enlKbgcE91/izH8=",brillig_names:["is_agent"]},{name:"is_disaster_active",is_unconstrained:!0,custom_attributes:["public","view"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"}],return_type:{abi_type:{kind:"boolean"},visibility:"public"},error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17720616183563258828":{error_kind:"string",string:"Function is_disaster_active can only be called statically"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHwoAAgADgEguCIBIAAElAAAASyUAAABvLgIAAYBJKAIAAgSASScCAwQBOw4AAwACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAk0eAgACAB4CAAMAMyoAAgADAAQkAgAEAAAAkyUAAAJ2HgIAAgknAgMAAQoqAgMEJAIABAAAAK8lAAACiCcCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUrAgAEAAAAAAAAAAACAAAAAAAAAAAtCAEFJwIGBAUACAEGAScDBQQBACIFAgYtCgYHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4CBwAiBwIHLQ4EBy0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgyARQAFLQgBBgAAAQIBLgyARAAGJwIHAAcnAggECS0IAAktCgQKLQoDCy0KBQwtCgYNLQoHDgAIAAgAJQAAApotAgAAJwIHBAgtCAAILQoECS0KAwotCgULLQoGDC0KAQ0ACAAHACUAAAKaLQIAAC0LBgELIgABgEQAByQCAAcAAAHmJwIIBAA8BggBJwIBBActCAAHLQoECC0KAwktCgUKLQoGCwAIAAEAJQAAA8MtAgAALQsDAQEiAAGARwAELQsEAwoqAwIBCyIAAYBEAAIkAgACAAACNyUAAATWLwoAAwABHAoBAwEcCgMCABwKAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAJ1KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQX17EaH9lOLzDwEAgEmJQAAAk0tCwQGCyIABoBEAAckAgAHAAACvCcCCAQAPAYIAS0LAwYLIgAGgEMAByQCAAcAAANPIwAAAtUtCwMGLQsBBy0LAggtCwQJDSIABoBDAAokAgAKAAAC+iUAAAToLgIAB4ADKACABAQABCUAAAT6LgiABQAKACIKAgsAKgsGDC0OBQwBIgAGgEcABQ4qBgUHJAIABwAAAzolAAAFiC0OCgEtDggCLQ4FAy0OCQQjAAADwicCBgQHLQgABy0KAQgtCgIJLQoDCi0KBAsACAAGACUAAAPDLQIAAC0LAQYtCwIHLQsECC4CAAaAAygAgAQEAAQlAAAE+i4IgAUACQAiCQIKASIACoBFAAstDgULLQ4JAS0OBwIuDIBHAAMtDggEIwAAA8ImJQAAAk0uCIBFAAUjAAAD0w0iAAWAQwAGJAIABgAABEMjAAAD6C0LAgUtCwUGACIGAgYtDgYFJwIGBAQtCAEHJwIIBAUACAEIAScDBwQBACIFAggnAgkEBAAiBwIKPw8ACAAKLQsBBS0LAwYtCwQILQ4FAS0OBwItDgYDLQ4IBCYtCwMGDCoFBgckAgAHAAAEWSMAAATFLQsCBgAiBgIIACoIBQktCwkHLQsBCAAiCAIKACoKBQstCwsJACoHCQotCwMHLQsECS4CAAaAAygAgAQEAAUlAAAE+i4IgAUACwAiCwIMACoMBQ0tDgoNLQ4IAS0OCwItDgcDLQ4JBCMAAATFASIABYBHAAYtCgYFIwAAA9MqAQABBQLcbieAdhKdPAQCASYqAQABBcVrxFoOEAACPAQCASYuAYADgAYLAIAGAAKAByQAgAcAAAUVIwAABSAuAIADgAUjAAAFhy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAVzLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAAAVCKAGABQQAAQMAgAYAAoAGIwAABYcmKgEAAQVFp8pxGUHkFTwEAgEm",debug_symbols:"tZjdTiM7DMffZa57kQ/HTniVFUIFyqpSVVAXjnSEePdjJ3amPVKi3UF7A796kv/YseOk/VyeD48fPx+O55fXX8vdj8/l8XI8nY4/H06vT/v34+uZrZ+Lkz/e43IHu8UHv9yR/OfP3jFEYPAMEAyIQcYmsSQBUkCzkDNIy10IDNkZgEFRKGYpagkODLKCDwakIJ42QIUor4gMyRskBbRHaBYyC3VLUcjRICuUYEANovMGqOBF0AuAQVEI0YAUYjBABbDpkBRqFBXMgjYGZRanIJI3MEtd5wpgkBVqFBV0MDhnkBS8WTwYFIUaRQVSiN7ApkcbDDYY9O2QzCLVEpABZToJFAUihRwMxNXMULxBMigNkosGpOC9gU5PwSwhGcj0whBJAXhMDAKokEBBCrsBD47sWCJ+aZRZlBWyWlCSAk6A3wWcL5RHFSSKBtiAJAUN+F3AryDxEKJAUYjRgBTE1QY2JtkjcRVAICtUNwSkNhqgQvWnglpy9ScJZAUfFWQNG6BCtMHSJRrYLOkSwFnO0iUaoIKUcQMwyApkg8mmZ7Nkm15serHpRaZzUkpdQwEpgAaoEIIBKUjRNtA1LBANdDFLMos0B+Cy8a4uUKkEnbJRXaxG1KrAu/rqRmgUfadug26DbkvdlroNux52m7QzJeiUjXKfkfuMmvoakeyoJDYv3iuRxuGr9426rXrfSObKqeClgSmtNl61JJ3dy05SykbYldHWr54XjbLrhEalv7eYLfR8hJ6P0PNRz41GtXrL19dusePv4f1yOMjpd3Ue8in5tr8czu/L3fnjdNot/+xPH3XQr7f9uf5/31/4Ka/S4fzM/1nw5Xg6CH3t1tluPNXHWGw6L2BIXaLkGw0/0XBy5DUJB2FVSDcKYawAxZEqcHPFroDxRiGOFTJI/VSFDAgjhWkUpVgUnNNRFOnbUeDfjSLlnos8zEWeKCSyKDzGOPKhjBW4U4EqFBb7ZhS8W0ZRzOo6IHqTCHzoDet6UpbE1x3V4OPODwOZ1GUJziS47eeRxB9EMtyhblZXvvS6glUh3fYJj7NGgZZUzxeyLsE99FaDZqWFKhHcmtQY/K3CpDiJwAIhvid0Db4n32pMyjMm61ZwtUmDu1UIk+UM3PwtkODKWGNS4ilYICm6bQrF9in6tC2OkM0J/sIStmmQ70mlWSTp72p4xH6OIeVtGkTRNKiEbRrF9WOkhLHGdK9BzwtfVnC41+IkL0jOapQCru2PL4O3GpMKo9546GpFeXk39R0c9p04aaByhetHAbmhF3LkDOPI0WqDchr28ZhmS9H3KyEO+3jEaSSllxf/YDG+5kxDCWsoOJaY9NBE1v9SXnsX3wN/+0S6vu/huPXMJHzPCC9L3iaB3Quft3kRewtl3OZF6vngrUrbJHDd7blsC2RtOjFsCyQCrN8DNgVCYAkhwC0CpW/1kjYFsV7AS9jmQa+pQumbIfxf4J4/7p+Ol5ufPL9E6nLcP54O+vHl4/x09fT93zd7Yj+Zvl1enw7PH5eDKK2/m/KfH4G/PwQs9/JVmj9ym9nxN1D56OUpuV2gcP8lzvwH",brillig_names:["is_disaster_active"]},{name:"process_claim",is_unconstrained:!0,custom_attributes:["public","internal"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"},{name:"claimer",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1026094498791286252":{error_kind:"string",string:"Disaster is not active"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"10095015593353305456":{error_kind:"string",string:"Function process_claim can only be called internally"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"16487243485358474054":{error_kind:"string",string:"No funds available to claim"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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JAIACwAADKMjAAAKmScCCwAnCioFCwwkAgAMAAAMeSMAAAqwJwILACgKKgULDCQCAAwAAAxPIwAACscnAgsAKgoqBQsMJAIADAAADCUjAAAK3icCCwAsCioFCwwkAgAMAAAL+yMAAAr1JwILAC4KKgULDCQCAAwAAAvRIwAACwwnAgsALwoqBQsMJAIADAAAC6cjAAALIycCCwAwCioFCwwkAgAMAAALfSMAAAs6CyIABYBJAAskAgALAAALUycCDAQAPAYMAQsiAAaARAAFJAIABQAAC2glAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAAC5IlAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAAC7wlAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAAC+YlAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAADBAlAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAADDolAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAADGQlAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAADI4lAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzQsiAAaARAAFJAIABQAADLglAAAI2i0KAQctCgIILQoDCS0KBAojAAAMzS0KCgQtCgcBLQoIAi0KCQMmKgEAAQXkznSYxipDRjwEAgEmKgEAAQXFa8RaDhAAAjwEAgEmLgGAA4AGCwCABgACgAckAIAHAAANHSMAAA0oLgCAA4AFIwAADY8uAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAANey4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAANSigBgAUEAAEDAIAGAAKABiMAAA2PJioBAAEFRafKcRlB5BU8BAIBJg==",debug_symbols:"tZvbbtw4DIbfZa5zoQN1YF6lKIq0TRcBgrTINgssirz7ihQPkwIWvHZz0/mGI/0WJYq05ebX5ev955e/Pj08ffv+9+X2w6/L5+eHx8eHvz49fv9y9/Ph+9Ow/roE+ieWeLmNN+OzzM8a5LPOzybfm/zepX2X7yi/o37Hy225uaQAl9tOn+N7HD+k2AakAakIZOpKbTNZqDGQBQmKQMkK/XKb6oCaFJpAU0tTS1dLrwKoFpQ2OWQFUc5xDDk1gi6QsoJaslqyWiApqKVom4ICVZVpNicUAZrPVAiKAM3oBFDoE4DHzNAEYlSoAikpqCVrm0y9xjwDj5lBLRQGE4oCCtSsoI2bNm5VoKula3f2ggEU+oQSkoJ0LzEogIJcvSS10BLkMCCP7nlEVKFomdAFaOYnjKHmEWOFomVCFaAlmAAKXaBr467dUS0o3Wug7pmgC0RqM+KnpqDQBXIVgDE/EAmGMlCvkhTUQkMFGEAjnDAms1CvhgIdFNSCakGxNAqSCWqJ0qbRCCeIcqPYKImgCNCsTlBLUUsxCwpUtTRtQyHB0FWZJpOBJnPCmJ8ylrJTJExoAhTPE4oAj5kBFLQ7bcYJKABqAW1TqFcmQIGqltoFKIFMqAI9KGjjro0xK4gFQ1JoAuwFQ1GQq2PKCto4a+MsV0dQCy9BIaDuI5CQooWBZ56AZ56BhtoIUKBnhSaAUaEoSOMYAhiZLWYjkuhEHDuTRrtKST9QZplEQ55Em1FozFRNRJRLhJoSZROhYoRK3Xp0s6HZUJVjyEaqHGM0KkaqEmklamMiGxJlMDIbDFsLTKhUzEa7Vmhct7EeeSRUlbrZutnQbLQcTClEI22XKMMI6TUSjb51pqZEmVHIbGA2MBsleyGzVWtH22JSs2vQekyiDTGJMnyrTGCEQlxehZoS+zGpKqVgVJRoRwiZDawdUF9amcx+TCpGqESxJtSUmvVo1oP2upDbTIV9m9SFgDa8kI4FYjACI+uRspHZaLV6ZBoqnWISKNYmUX0Qakp1jL5npqpE218IjLoSVTQh64GmgmorIRiRChDRaglRO4o6rsaTePRMtDJCY/5655vJYARGXYliTagqNevRzNbN1k0ZzYamjKpcQzJSlUorg+Qbl8iRH27orpbuKyPf2FKWUERD8lSxG5LXkW5ex/0wK2TGZlijY3FEw+Ztuzfgu+gIjFWxz0FO7IYRHNEwuXWOtxDmagjREQ0LOHq3mhxdgR8BIu1Bro+K4NgNMTlWRQzB0cQwujWCo4lhSo4sRtGGcy0moiGAYQmOxbBmR1sLbNHRlgW7WlMI3JafaOb80kNJmGOYWA3nVE8sEnIpzOFMBEc0rG6tbm1ubW7tbkXXxStrV4whOVbDGBzBEdVNro+jChGyQ4JFfYvToYlXVjTkqU788EdFRbC5lTdDomfBSJlKsRqiXwJtftPcFxNtLdL0YqKNISW3+rolX7fk6zYfPwVNgesXMlGmEKpKyWzJbNlsVL8mgdnA2lGOF7Jr8JyFwNgM6Q5V0a3drd2tlN8Vzco1S7EbxuyIhjxnE+kZHfnRnG6NhFCJbreFmhI7NakqVVOhpDiJdpyQ2bq14xgIFCQw/ZlYHFGxcDgINsMYHa1bodsNxSuri2Vw7IaQHG1kXOUUvVvxbtVHVt06FzMzshjw+QYYcvIUbIo1sEOFsRryNhYEx27IyVPQu2UXy24FFwMXAxcrLla8W/Vu1bvxyVGYJzXdcMZsY2yG02PaAG2GZGPshnOQjJyMJnKumTgvzOiXaH6JzgVn4pwzxmSX4KdJwRId7cK92SW6X6Kji6FfYoYnOYQzJhlnIDJOLyZ62+JtezZEb2u6OaRimLOh6eZQm2HztqabYzCxGK1tdN15OCjobV03oomlEB2t7TzamwjeVnRfX28ueiT56efz/T2dSF6dUY6Tyx93z/dPPy+3Ty+PjzeXf+4eX7jR3z/unvjz593z+HWkqvunr+NzCH57eLwner3x3mG7a2t0b829x+FDMgHsexXGUwrqAMbzRypbGmmhEZKOYuz2q1GUNwp5W2EcuDVRGBmzmkLNbxRgW6EDdJ0JqLClsPSCatj0YhTPLS/qaS/a+3pRuq1F31wLXCiUpl6Me6C8NYa4CCochUgkRlJoJ90Yd1NbbqwCO40HYZUYN3Z1K7DjIi5L6Lo5BvbNuVgFZqHnj7mkJYctibUnNbknfXObx/OxGc8H5/416XAgYZVo4Tnuhzw8y9ukmZY5r2p40oGHSYwn9bcacbVLqkiMRypTGDfUbxXSKneD5ps2nptNY9TytxqL+MxFAwOu1pSm5Y3CIjzH00ZUR0bp29YoiyVJ6sh1gP8vBdQ1rbEc82Pctagf+WpF/pdGi7aobeUJvq/GeH1pJXncfR7TaC2rxnh3cUwDg1VETAuN1V4DW5dxxFY391perMu4GdcYbeOO3zXC292WFxHWqklczeiY3kN5J23mnbxIoOOoolhRa2FzFJQjN/3oWWNjHMHFrSSccTUVtl9brZtFDcLSE7TwGgerm/Vk7UpyV+r2Td8ih46nUV2T7rlr3NIeW9WytaorhQye/RpsKUA5X4+gnq1H0M7XI+hn6xHg+XpUwtl6tFTYVY+WfuysR/AHakmB99XYW4+WGjvr0VJjZz1a7rWd9ajgvnoUrqvJb/WorjJoCDan4/X05jj2Zp6rKT2Wu8bbwC2Fms/XtAqna1otp2tarX+gpq1d2VXTal9FaPBqkMKhqgap2LoCHImMUjTEyzjn3VJo8XxVa+lsVWv5fFVrcLaqtXK+qrV6tqotFXZVtaUfO6vaUmNnRerhfTX2VrWlxs6qttTYWdWWe21nVevlfFXr9X2r2nXmwbO5q15ttt8UOi5zcPQc3DarGi6GMd7O2Nn8eLOxVQpwsaw9dDs7HOl0U2KVQem/lVhVq5CPHNvtzOQIZzM5lvOZHOvZTI7tfCbHfjaTLxV2ZfKlHzsz+VJjZxaOIb2zyN5cvhbZmczXIjuz+R84MuOXtWfPzMZLonc8NHvzZrCWQ7MR7eFg3KH3YxL+/iT2Y6PItuPo/1Iekij2aDCWtR2TqB4ZHY854vGZ0zFHMoC/MT7kSANdkAb1iADaUyeWQ0746zBMx0ZgMYWtnHThd4GP4+vdl4fnN3/y9EpSzw93nx/v5eu3l6cvV7/+/PeH/qJ/MvXj+fuX+68vz/ek5H83Nf75UEu5qa1+vLnQfyj5kMdGzanR10i/jmPR2vDjKw3mPw==",brillig_names:["process_claim"]},{name:"public_dispatch",is_unconstrained:!0,custom_attributes:["public"],abi:{parameters:[{name:"selector",type:{kind:"field"},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1026094498791286252":{error_kind:"string",string:"Disaster is not active"},"1172192830538017554":{error_kind:"string",string:"Function increment_vote_count can only be called internally"},"1897970633891528075":{error_kind:"string",string:"Function get_disaster_creator can only be called statically"},"2200152331597976830":{error_kind:"string",string:"Function get_donation_count can only be called statically"},"2233873454491509486":{error_kind:"string",string:"Initializer address is not the contract deployer"},"2830029349304997821":{error_kind:"fmtstring",length:27,item_types:[{kind:"field"}]},"3065118628985571745":{error_kind:"string",string:"Function get_vote_count can only be called statically"},"3252656178252285882":{error_kind:"string",string:"Invalid organization address"},"3443646796185337992":{error_kind:"string",string:"Function get_disaster_metadata can only be called statically"},"3519997112791842385":{error_kind:"string",string:"Function get_unlocked_funds can only be called statically"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5169577899058285377":{error_kind:"string",string:"Only authorized agents can create disasters"},"5552105838155802656":{error_kind:"string",string:"Function is_agent can only be called statically"},"6699027673119592287":{error_kind:"string",string:"Function get_disaster_amount can only be called statically"},"7895633555767585835":{error_kind:"string",string:"Only admin can add agents"},"8004024417947592843":{error_kind:"string",string:"Estimated amount must be greater than 0"},"8291692332965461258":{error_kind:"string",string:"Function get_disaster_info can only be called statically"},"9981700386366515877":{error_kind:"string",string:"Invalid admin address"},"10055739771636044368":{error_kind:"string",string:"Function get_admin can only be called statically"},"10095015593353305456":{error_kind:"string",string:"Function process_claim can only be called internally"},"11007420719637660636":{error_kind:"string",string:"Amount must be greater than 0"},"12648806478238410232":{error_kind:"string",string:"Invalid agent address"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"15180078658462084435":{error_kind:"string",string:"Function increment_donation_count can only be called internally"},"16487243485358474054":{error_kind:"string",string:"No funds available to claim"},"17553630960180866722":{error_kind:"string",string:"Only authorized agents can unlock funds"},"17618083556256589634":{error_kind:"string",string:"Initialization hash does not match"},"17720616183563258828":{error_kind:"string",string:"Function is_disaster_active can only be called statically"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17913345758812307884":{error_kind:"string",string:"Only authorized agents can deactivate disasters"},"18096245990168714626":{error_kind:"string",string:"Function get_disaster_title can only be called statically"}}},bytecode:"",debug_symbols:"",brillig_names:["public_dispatch"]},{name:"sync_private_state",is_unconstrained:!0,custom_attributes:["utility"],abi:{parameters:[],return_type:null,error_types:{"576755928210959028":{error_kind:"string",string:"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{error_kind:"string",string:"Cannot serialize point at infinity as bytes."},"2896122431943215824":{error_kind:"fmtstring",length:144,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"2920182694213909827":{error_kind:"string",string:"attempt to subtract with overflow"},"3305101268118424981":{error_kind:"string",string:"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{error_kind:"fmtstring",length:58,item_types:[{kind:"field"}]},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5727012404371710682":{error_kind:"string",string:"push out of bounds"},"5870202753060865374":{error_kind:"fmtstring",length:61,item_types:[{kind:"field"},{kind:"field"}]},"6336853191198150230":{error_kind:"fmtstring",length:77,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"6485997221020871071":{error_kind:"string",string:"call to assert_max_bit_size"},"6753155520859132764":{error_kind:"string",string:"Failed to deliver note"},"7233212735005103307":{error_kind:"string",string:"attempt to multiply with overflow"},"8270195893599566439":{error_kind:"string",string:"Invalid public keys hint for address"},"8830323656616886390":{error_kind:"string",string:"Got a public log emitted by a different contract"},"12822839658937144934":{error_kind:"fmtstring",length:75,item_types:[]},"13649294680379557736":{error_kind:"string",string:"extend_from_bounded_vec out of bounds"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"14514982005979867414":{error_kind:"string",string:"attempt to bit-shift with overflow"},"14657895983200220173":{error_kind:"string",string:"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{error_kind:"fmtstring",length:48,item_types:[{kind:"field"},{kind:"field"}]},"16218014537381711836":{error_kind:"string",string:"Value does not fit in field"},"16446004518090376065":{error_kind:"string",string:"Input length must be a multiple of 32"},"16954218183513903507":{error_kind:"string",string:"Attempted to read past end of BoundedVec"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17879506016437779469":{error_kind:"fmtstring",length:128,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"18194595712952743247":{error_kind:"fmtstring",length:98,item_types:[{kind:"integer",sign:"unsigned",width:32},{kind:"integer",sign:"unsigned",width:32},{kind:"field"}]}}},bytecode:"",debug_symbols:"",brillig_names:["sync_private_state"]},{name:"unlock_funds",is_unconstrained:!0,custom_attributes:["public"],abi:{parameters:[{name:"disaster_hash",type:{kind:"field"},visibility:"private"},{name:"org_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64},visibility:"private"}],return_type:null,error_types:{"206160798890201757":{error_kind:"string",string:"Storage slot 0 not allowed. Storage slots must start from 1."},"1026094498791286252":{error_kind:"string",string:"Disaster is not active"},"3252656178252285882":{error_kind:"string",string:"Invalid organization address"},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"11007420719637660636":{error_kind:"string",string:"Amount must be greater than 0"},"13699457482007836410":{error_kind:"string",string:"Not initialized"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"17553630960180866722":{error_kind:"string",string:"Only authorized agents can unlock funds"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"}}},bytecode:"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",debug_symbols:"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",brillig_names:["unlock_funds"]},{name:"vote",is_unconstrained:!1,custom_attributes:["private"],abi:{parameters:[{name:"inputs",type:{kind:"struct",path:"aztec::context::inputs::private_context_inputs::PrivateContextInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]},visibility:"private"},{name:"disaster_hash",type:{kind:"field"},visibility:"private"},{name:"org_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]},visibility:"private"},{name:"vote_type",type:{kind:"integer",sign:"unsigned",width:8},visibility:"private"}],return_type:{abi_type:{kind:"struct",path:"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"min_revertible_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"is_fee_payer",type:{kind:"boolean"}},{name:"max_block_number",type:{kind:"struct",path:"aztec::protocol_types::abis::max_block_number::MaxBlockNumber",fields:[{name:"_opt",type:{kind:"struct",path:"std::option::Option",fields:[{name:"_is_some",type:{kind:"boolean"}},{name:"_value",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}},{name:"note_hash_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifier_read_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::read_request::ReadRequest",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"key_validation_requests_and_generators",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",fields:[{name:"request",type:{kind:"struct",path:"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",fields:[{name:"pk_m",type:{kind:"struct",path:"std::embedded_curve_ops::EmbeddedCurvePoint",fields:[{name:"x",type:{kind:"field"}},{name:"y",type:{kind:"field"}},{name:"is_infinite",type:{kind:"boolean"}}]}},{name:"sk_app",type:{kind:"field"}}]}},{name:"sk_app_generator",type:{kind:"field"}}]}}},{name:"note_hashes",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::note_hash::NoteHash",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"nullifiers",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::nullifier::Nullifier",fields:[{name:"value",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"note_hash",type:{kind:"field"}}]}}},{name:"private_call_requests",type:{kind:"array",length:5,type:{kind:"struct",path:"aztec::protocol_types::abis::private_call_request::PrivateCallRequest",fields:[{name:"call_context",type:{kind:"struct",path:"aztec::protocol_types::abis::call_context::CallContext",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"function_selector",type:{kind:"struct",path:"aztec::protocol_types::abis::function_selector::FunctionSelector",fields:[{name:"inner",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"is_static_call",type:{kind:"boolean"}}]}},{name:"args_hash",type:{kind:"field"}},{name:"returns_hash",type:{kind:"field"}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_call_requests",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"public_teardown_call_request",type:{kind:"struct",path:"aztec::protocol_types::abis::public_call_request::PublicCallRequest",fields:[{name:"msg_sender",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"contract_address",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"is_static_call",type:{kind:"boolean"}},{name:"calldata_hash",type:{kind:"field"}}]}},{name:"l2_to_l1_msgs",type:{kind:"array",length:2,type:{kind:"struct",path:"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",fields:[{name:"recipient",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"content",type:{kind:"field"}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"private_logs",type:{kind:"array",length:16,type:{kind:"struct",path:"aztec::protocol_types::abis::private_log::PrivateLogData",fields:[{name:"log",type:{kind:"struct",path:"aztec::protocol_types::abis::log::Log",fields:[{name:"fields",type:{kind:"array",length:18,type:{kind:"field"}}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"note_hash_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"contract_class_logs_hashes",type:{kind:"array",length:1,type:{kind:"struct",path:"aztec::protocol_types::abis::side_effect::counted::Counted",fields:[{name:"inner",type:{kind:"struct",path:"aztec::protocol_types::abis::log_hash::LogHash",fields:[{name:"value",type:{kind:"field"}},{name:"length",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"counter",type:{kind:"integer",sign:"unsigned",width:32}}]}}},{name:"start_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"end_side_effect_counter",type:{kind:"integer",sign:"unsigned",width:32}},{name:"historical_header",type:{kind:"struct",path:"aztec::protocol_types::block_header::BlockHeader",fields:[{name:"last_archive",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"content_commitment",type:{kind:"struct",path:"aztec::protocol_types::content_commitment::ContentCommitment",fields:[{name:"num_txs",type:{kind:"field"}},{name:"blobs_hash",type:{kind:"field"}},{name:"in_hash",type:{kind:"field"}},{name:"out_hash",type:{kind:"field"}}]}},{name:"state",type:{kind:"struct",path:"aztec::protocol_types::state_reference::StateReference",fields:[{name:"l1_to_l2_message_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"partial",type:{kind:"struct",path:"aztec::protocol_types::partial_state_reference::PartialStateReference",fields:[{name:"note_hash_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"nullifier_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"public_data_tree",type:{kind:"struct",path:"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",fields:[{name:"root",type:{kind:"field"}},{name:"next_available_leaf_index",type:{kind:"integer",sign:"unsigned",width:32}}]}}]}}]}},{name:"global_variables",type:{kind:"struct",path:"aztec::protocol_types::abis::global_variables::GlobalVariables",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"block_number",type:{kind:"field"}},{name:"slot_number",type:{kind:"field"}},{name:"timestamp",type:{kind:"integer",sign:"unsigned",width:64}},{name:"coinbase",type:{kind:"struct",path:"aztec::protocol_types::address::eth_address::EthAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"fee_recipient",type:{kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress",fields:[{name:"inner",type:{kind:"field"}}]}},{name:"gas_fees",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}},{name:"total_fees",type:{kind:"field"}},{name:"total_mana_used",type:{kind:"field"}}]}},{name:"tx_context",type:{kind:"struct",path:"aztec::protocol_types::transaction::tx_context::TxContext",fields:[{name:"chain_id",type:{kind:"field"}},{name:"version",type:{kind:"field"}},{name:"gas_settings",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_settings::GasSettings",fields:[{name:"gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"teardown_gas_limits",type:{kind:"struct",path:"aztec::protocol_types::abis::gas::Gas",fields:[{name:"da_gas",type:{kind:"integer",sign:"unsigned",width:32}},{name:"l2_gas",type:{kind:"integer",sign:"unsigned",width:32}}]}},{name:"max_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}},{name:"max_priority_fees_per_gas",type:{kind:"struct",path:"aztec::protocol_types::abis::gas_fees::GasFees",fields:[{name:"fee_per_da_gas",type:{kind:"field"}},{name:"fee_per_l2_gas",type:{kind:"field"}}]}}]}}]}}]},visibility:"databus"},error_types:{"576755928210959028":{error_kind:"string",string:"0 has a square root; you cannot claim it is not square"},"855401245733623969":{error_kind:"string",string:"Obtained invalid key validation request"},"1987007748161277259":{error_kind:"string",string:"Invalid vote type"},"2709101749560550278":{error_kind:"string",string:"Cannot serialize point at infinity as bytes."},"2896122431943215824":{error_kind:"fmtstring",length:144,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"2920182694213909827":{error_kind:"string",string:"attempt to subtract with overflow"},"3252656178252285882":{error_kind:"string",string:"Invalid organization address"},"3305101268118424981":{error_kind:"string",string:"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{error_kind:"fmtstring",length:58,item_types:[{kind:"field"}]},"5019202896831570965":{error_kind:"string",string:"attempt to add with overflow"},"5727012404371710682":{error_kind:"string",string:"push out of bounds"},"5870202753060865374":{error_kind:"fmtstring",length:61,item_types:[{kind:"field"},{kind:"field"}]},"6336853191198150230":{error_kind:"fmtstring",length:77,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"6485997221020871071":{error_kind:"string",string:"call to assert_max_bit_size"},"6753155520859132764":{error_kind:"string",string:"Failed to deliver note"},"7233212735005103307":{error_kind:"string",string:"attempt to multiply with overflow"},"8270195893599566439":{error_kind:"string",string:"Invalid public keys hint for address"},"8830323656616886390":{error_kind:"string",string:"Got a public log emitted by a different contract"},"12822839658937144934":{error_kind:"fmtstring",length:75,item_types:[]},"13649294680379557736":{error_kind:"string",string:"extend_from_bounded_vec out of bounds"},"14225679739041873922":{error_kind:"string",string:"Index out of bounds"},"14514982005979867414":{error_kind:"string",string:"attempt to bit-shift with overflow"},"14657895983200220173":{error_kind:"string",string:"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{error_kind:"fmtstring",length:48,item_types:[{kind:"field"},{kind:"field"}]},"16218014537381711836":{error_kind:"string",string:"Value does not fit in field"},"16446004518090376065":{error_kind:"string",string:"Input length must be a multiple of 32"},"16954218183513903507":{error_kind:"string",string:"Attempted to read past end of BoundedVec"},"17843811134343075018":{error_kind:"string",string:"Stack too deep"},"17879506016437779469":{error_kind:"fmtstring",length:128,item_types:[{kind:"integer",sign:"unsigned",width:32}]},"18194595712952743247":{error_kind:"fmtstring",length:98,item_types:[{kind:"integer",sign:"unsigned",width:32},{kind:"integer",sign:"unsigned",width:32},{kind:"field"}]}}},bytecode:"",debug_symbols:"",brillig_names:["discover_new_messages","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_integer_quotient","directive_invert"],verification_key:`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
Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH`}],h={globals:{notes:[{fields:[{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000000"},{kind:"string",value:"ValueNote"},{fields:[{name:"value",value:{fields:[{name:"index",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000000"}},{name:"nullable",value:{kind:"boolean",value:!1}}],kind:"struct"}},{name:"owner",value:{fields:[{name:"index",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000001"}},{name:"nullable",value:{kind:"boolean",value:!1}}],kind:"struct"}},{name:"randomness",value:{fields:[{name:"index",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000002"}},{name:"nullable",value:{kind:"boolean",value:!1}}],kind:"struct"}}],kind:"struct"}],kind:"tuple"}],storage:[{fields:[{name:"contract_name",value:{kind:"string",value:"GodsHand"}},{name:"fields",value:{fields:[{name:"admin",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000001"}}],kind:"struct"}},{name:"agents",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000002"}}],kind:"struct"}},{name:"disaster_titles",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000003"}}],kind:"struct"}},{name:"disaster_metadata",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000004"}}],kind:"struct"}},{name:"disaster_amounts",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000005"}}],kind:"struct"}},{name:"disaster_creators",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000006"}}],kind:"struct"}},{name:"disaster_active",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000007"}}],kind:"struct"}},{name:"donation_count",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000008"}}],kind:"struct"}},{name:"vote_count",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"0000000000000000000000000000000000000000000000000000000000000009"}}],kind:"struct"}},{name:"unlocked_funds",value:{fields:[{name:"slot",value:{kind:"integer",sign:!1,value:"000000000000000000000000000000000000000000000000000000000000000a"}}],kind:"struct"}}],kind:"struct"}}],kind:"struct"}]},structs:{functions:[{fields:[{name:"parameters",type:{fields:[{name:"agent",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::add_agent_parameters"}}],kind:"struct",path:"GodsHand::add_agent_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::claim_parameters"}}],kind:"struct",path:"GodsHand::claim_abi"},{fields:[{name:"parameters",type:{fields:[{name:"admin",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::constructor_parameters"}}],kind:"struct",path:"GodsHand::constructor_abi"},{fields:[{name:"parameters",type:{fields:[{name:"title",type:{kind:"field"}},{name:"metadata",type:{kind:"field"}},{name:"estimated_amount_required",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::create_disaster_parameters"}},{name:"return_type",type:{kind:"field"}}],kind:"struct",path:"GodsHand::create_disaster_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::deactivate_disaster_parameters"}}],kind:"struct",path:"GodsHand::deactivate_disaster_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64}},{name:"chain",type:{kind:"field"}},{name:"token_address",type:{kind:"field"}}],kind:"struct",path:"GodsHand::donate_parameters"}}],kind:"struct",path:"GodsHand::donate_abi"},{fields:[{name:"parameters",type:{fields:[],kind:"struct",path:"GodsHand::get_admin_parameters"}},{name:"return_type",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::get_admin_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_amount_parameters"}},{name:"return_type",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::get_disaster_amount_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_creator_parameters"}},{name:"return_type",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::get_disaster_creator_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_info_parameters"}},{name:"return_type",type:{fields:[{name:"title",type:{kind:"field"}},{name:"metadata",type:{kind:"field"}},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64}},{name:"creator",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}},{name:"active",type:{kind:"boolean"}}],kind:"struct",path:"GodsHand::DisasterInfo"}}],kind:"struct",path:"GodsHand::get_disaster_info_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_metadata_parameters"}},{name:"return_type",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_metadata_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_title_parameters"}},{name:"return_type",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_disaster_title_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_donation_count_parameters"}},{name:"return_type",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::get_donation_count_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}},{name:"org_address",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::get_unlocked_funds_parameters"}},{name:"return_type",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::get_unlocked_funds_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::get_vote_count_parameters"}},{name:"return_type",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::get_vote_count_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::increment_donation_count_parameters"}}],kind:"struct",path:"GodsHand::increment_donation_count_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::increment_vote_count_parameters"}}],kind:"struct",path:"GodsHand::increment_vote_count_abi"},{fields:[{name:"parameters",type:{fields:[{name:"address",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::is_agent_parameters"}},{name:"return_type",type:{kind:"boolean"}}],kind:"struct",path:"GodsHand::is_agent_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}}],kind:"struct",path:"GodsHand::is_disaster_active_parameters"}},{name:"return_type",type:{kind:"boolean"}}],kind:"struct",path:"GodsHand::is_disaster_active_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}},{name:"claimer",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}}],kind:"struct",path:"GodsHand::process_claim_parameters"}}],kind:"struct",path:"GodsHand::process_claim_abi"},{fields:[{name:"parameters",type:{fields:[],kind:"struct",path:"GodsHand::sync_private_state_parameters"}}],kind:"struct",path:"GodsHand::sync_private_state_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}},{name:"org_address",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}},{name:"amount",type:{kind:"integer",sign:"unsigned",width:64}}],kind:"struct",path:"GodsHand::unlock_funds_parameters"}}],kind:"struct",path:"GodsHand::unlock_funds_abi"},{fields:[{name:"parameters",type:{fields:[{name:"disaster_hash",type:{kind:"field"}},{name:"org_address",type:{fields:[{name:"inner",type:{kind:"field"}}],kind:"struct",path:"aztec::protocol_types::address::aztec_address::AztecAddress"}},{name:"vote_type",type:{kind:"integer",sign:"unsigned",width:8}}],kind:"struct",path:"GodsHand::vote_parameters"}}],kind:"struct",path:"GodsHand::vote_abi"}]}},m={6:{path:"std/collections/bounded_vec.nr",source:`use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};

/// A \`BoundedVec<T, MaxLen>\` is a growable storage similar to a \`Vec<T>\` except that it
/// is bounded with a maximum possible length. Unlike \`Vec\`, \`BoundedVec\` is not implemented
/// via slices and thus is not subject to the same restrictions slices are (notably, nested
/// slices - and thus nested vectors as well - are disallowed).
///
/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by
/// pushing an additional element is also more efficient - the length only needs to be increased
/// by one.
///
/// For these reasons \`BoundedVec<T, N>\` should generally be preferred over \`Vec<T>\` when there
/// is a reasonable maximum bound that can be placed on the vector.
///
/// Example:
///
/// \`\`\`noir
/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();
/// for i in 0..5 {
///     vector.push(i);
/// }
/// assert(vector.len() == 5);
/// assert(vector.max_len() == 10);
/// \`\`\`
pub struct BoundedVec<T, let MaxLen: u32> {
    storage: [T; MaxLen],
    len: u32,
}

impl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {
    /// Creates a new, empty vector of length zero.
    ///
    /// Since this container is backed by an array internally, it still needs an initial value
    /// to give each element. To resolve this, each element is zeroed internally. This value
    /// is guaranteed to be inaccessible unless \`get_unchecked\` is used.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();
    /// assert(empty_vector.len() == 0);
    /// \`\`\`
    ///
    /// Note that whenever calling \`new\` the maximum length of the vector should always be specified
    /// via a type signature:
    ///
    /// \`\`\`noir
    /// fn good() -> BoundedVec<Field, 10> {
    ///     // Ok! MaxLen is specified with a type annotation
    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();
    ///     let v2 = BoundedVec::new();
    ///
    ///     // Ok! MaxLen is known from the type of \`good\`'s return value
    ///     v2
    /// }
    ///
    /// fn bad() {
    ///     // Error: Type annotation needed
    ///     // The compiler can't infer \`MaxLen\` from the following code:
    ///     let mut v3 = BoundedVec::new();
    ///     v3.push(5);
    /// }
    /// \`\`\`
    ///
    /// This defaulting of \`MaxLen\` (and numeric generics in general) to zero may change in future noir versions
    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a
    /// constraint failure at runtime when the vec is pushed to.
    pub fn new() -> Self {
        let zeroed = crate::mem::zeroed();
        BoundedVec { storage: [zeroed; MaxLen], len: 0 }
    }

    /// Retrieves an element from the vector at the given index, starting from zero.
    ///
    /// If the given index is equal to or greater than the length of the vector, this
    /// will issue a constraint failure.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {
    ///     let first = v.get(0);
    ///     let last = v.get(v.len() - 1);
    ///     assert(first != last);
    /// }
    /// \`\`\`
    pub fn get(self, index: u32) -> T {
        assert(index < self.len, "Attempted to read past end of BoundedVec");
        self.get_unchecked(index)
    }

    /// Retrieves an element from the vector at the given index, starting from zero, without
    /// performing a bounds check.
    ///
    /// Since this function does not perform a bounds check on length before accessing the element,
    /// it is unsafe! Use at your own risk!
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {
    ///     // Always ensure the length is larger than the largest
    ///     // index passed to get_unchecked
    ///     assert(v.len() > 2);
    ///     let first = v.get_unchecked(0);
    ///     let second = v.get_unchecked(1);
    ///     let third = v.get_unchecked(2);
    ///     first + second + third
    /// }
    /// \`\`\`
    pub fn get_unchecked(self, index: u32) -> T {
        self.storage[index]
    }

    /// Writes an element to the vector at the given index, starting from zero.
    ///
    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {
    ///     let first = v.get(0);
    ///     assert(first != 42);
    ///     v.set(0, 42);
    ///     let new_first = v.get(0);
    ///     assert(new_first == 42);
    /// }
    /// \`\`\`
    pub fn set(&mut self, index: u32, value: T) {
        assert(index < self.len, "Attempted to write past end of BoundedVec");
        self.set_unchecked(index, value)
    }

    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.
    ///
    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// fn set_unchecked_example() {
    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();
    ///     vec.extend_from_array([1, 2]);
    ///
    ///     // Here we're safely writing within the valid range of \`vec\`
    ///     // \`vec\` now has the value [42, 2]
    ///     vec.set_unchecked(0, 42);
    ///
    ///     // We can then safely read this value back out of \`vec\`.
    ///     // Notice that we use the checked version of \`get\` which would prevent reading unsafe values.
    ///     assert_eq(vec.get(0), 42);
    ///
    ///     // We've now written past the end of \`vec\`.
    ///     // As this index is still within the maximum potential length of \`v\`,
    ///     // it won't cause a constraint failure.
    ///     vec.set_unchecked(2, 42);
    ///     println(vec);
    ///
    ///     // This will write past the end of the maximum potential length of \`vec\`,
    ///     // it will then trigger a constraint failure.
    ///     vec.set_unchecked(5, 42);
    ///     println(vec);
    /// }
    /// \`\`\`
    pub fn set_unchecked(&mut self, index: u32, value: T) {
        self.storage[index] = value;
    }

    /// Pushes an element to the end of the vector. This increases the length
    /// of the vector by one.
    ///
    /// Panics if the new length of the vector will be greater than the max length.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();
    ///
    /// v.push(1);
    /// v.push(2);
    ///
    /// // Panics with failed assertion "push out of bounds"
    /// v.push(3);
    /// \`\`\`
    pub fn push(&mut self, elem: T) {
        assert(self.len < MaxLen, "push out of bounds");

        self.storage[self.len] = elem;
        self.len += 1;
    }

    /// Returns the current length of this vector
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();
    /// assert(v.len() == 0);
    ///
    /// v.push(100);
    /// assert(v.len() == 1);
    ///
    /// v.push(200);
    /// v.push(300);
    /// v.push(400);
    /// assert(v.len() == 4);
    ///
    /// let _ = v.pop();
    /// let _ = v.pop();
    /// assert(v.len() == 2);
    /// \`\`\`
    pub fn len(self) -> u32 {
        self.len
    }

    /// Returns the maximum length of this vector. This is always
    /// equal to the \`MaxLen\` parameter this vector was initialized with.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();
    ///
    /// assert(v.max_len() == 5);
    /// v.push(10);
    /// assert(v.max_len() == 5);
    /// \`\`\`
    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {
        MaxLen
    }

    /// Returns the internal array within this vector.
    ///
    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate
    /// the storage held internally by this vector.
    ///
    /// Note that uninitialized elements may be zeroed out!
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();
    ///
    /// assert(v.storage() == [0, 0, 0, 0, 0]);
    ///
    /// v.push(57);
    /// assert(v.storage() == [57, 0, 0, 0, 0]);
    /// \`\`\`
    pub fn storage(self) -> [T; MaxLen] {
        self.storage
    }

    /// Pushes each element from the given array to this vector.
    ///
    /// Panics if pushing each element would cause the length of this vector
    /// to exceed the maximum length.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();
    /// vec.extend_from_array([2, 4]);
    ///
    /// assert(vec.len == 2);
    /// assert(vec.get(0) == 2);
    /// assert(vec.get(1) == 4);
    /// \`\`\`
    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {
        let new_len = self.len + array.len();
        assert(new_len <= MaxLen, "extend_from_array out of bounds");
        for i in 0..array.len() {
            self.storage[self.len + i] = array[i];
        }
        self.len = new_len;
    }

    /// Pushes each element from the given slice to this vector.
    ///
    /// Panics if pushing each element would cause the length of this vector
    /// to exceed the maximum length.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();
    /// vec.extend_from_slice(&[2, 4]);
    ///
    /// assert(vec.len == 2);
    /// assert(vec.get(0) == 2);
    /// assert(vec.get(1) == 4);
    /// \`\`\`
    pub fn extend_from_slice(&mut self, slice: [T]) {
        let new_len = self.len + slice.len();
        assert(new_len <= MaxLen, "extend_from_slice out of bounds");
        for i in 0..slice.len() {
            self.storage[self.len + i] = slice[i];
        }
        self.len = new_len;
    }

    /// Pushes each element from the other vector to this vector. The length of
    /// the other vector is left unchanged.
    ///
    /// Panics if pushing each element would cause the length of this vector
    /// to exceed the maximum length.
    ///
    /// \`\`\`noir
    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();
    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();
    ///
    /// v2.extend_from_array([1, 2, 3]);
    /// v1.extend_from_bounded_vec(v2);
    ///
    /// assert(v1.storage() == [1, 2, 3, 0, 0]);
    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);
    /// \`\`\`
    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {
        let append_len = vec.len();
        let new_len = self.len + append_len;
        assert(new_len <= MaxLen, "extend_from_bounded_vec out of bounds");

        if is_unconstrained() {
            for i in 0..append_len {
                self.storage[self.len + i] = vec.get_unchecked(i);
            }
        } else {
            let mut exceeded_len = false;
            for i in 0..Len {
                exceeded_len |= i == append_len;
                if !exceeded_len {
                    self.storage[self.len + i] = vec.get_unchecked(i);
                }
            }
        }
        self.len = new_len;
    }

    /// Creates a new vector, populating it with values derived from an array input.
    /// The maximum length of the vector is determined based on the type signature.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])
    /// \`\`\`
    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {
        static_assert(Len <= MaxLen, "from array out of bounds");
        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();
        vec.extend_from_array(array);
        vec
    }

    /// Pops the element at the end of the vector. This will decrease the length
    /// of the vector by one.
    ///
    /// Panics if the vector is empty.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();
    /// v.push(1);
    /// v.push(2);
    ///
    /// let two = v.pop();
    /// let one = v.pop();
    ///
    /// assert(two == 2);
    /// assert(one == 1);
    ///
    /// // error: cannot pop from an empty vector
    /// let _ = v.pop();
    /// \`\`\`
    pub fn pop(&mut self) -> T {
        assert(self.len > 0);
        self.len -= 1;

        let elem = self.storage[self.len];
        self.storage[self.len] = crate::mem::zeroed();
        elem
    }

    /// Returns true if the given predicate returns true for any element
    /// in this vector.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();
    /// v.extend_from_array([2, 4, 6]);
    ///
    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);
    /// assert(all_even);
    /// \`\`\`
    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {
        let mut ret = false;
        if is_unconstrained() {
            for i in 0..self.len {
                ret |= predicate(self.storage[i]);
            }
        } else {
            let mut ret = false;
            let mut exceeded_len = false;
            for i in 0..MaxLen {
                exceeded_len |= i == self.len;
                if !exceeded_len {
                    ret |= predicate(self.storage[i]);
                }
            }
        }
        ret
    }

    /// Creates a new vector of equal size by calling a closure on each element in this vector.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
    /// let result = vec.map(|value| value * 2);
    ///
    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);
    /// assert_eq(result, expected);
    /// \`\`\`
    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {
        let mut ret = BoundedVec::new();
        ret.len = self.len();

        if is_unconstrained() {
            for i in 0..self.len() {
                ret.storage[i] = f(self.get_unchecked(i));
            }
        } else {
            for i in 0..MaxLen {
                if i < self.len() {
                    ret.storage[i] = f(self.get_unchecked(i));
                }
            }
        }

        ret
    }

    /// Creates a new vector of equal size by calling a closure on each element
    /// in this vector, along with its index.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
    /// let result = vec.mapi(|i, value| i + value * 2);
    ///
    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);
    /// assert_eq(result, expected);
    /// \`\`\`
    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {
        let mut ret = BoundedVec::new();
        ret.len = self.len();

        if is_unconstrained() {
            for i in 0..self.len() {
                ret.storage[i] = f(i, self.get_unchecked(i));
            }
        } else {
            for i in 0..MaxLen {
                if i < self.len() {
                    ret.storage[i] = f(i, self.get_unchecked(i));
                }
            }
        }

        ret
    }

    /// Calls a closure on each element in this vector.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
    /// let mut result = BoundedVec::<u32, 4>::new();
    /// vec.for_each(|value| result.push(value * 2));
    ///
    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);
    /// assert_eq(result, expected);
    /// \`\`\`
    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {
        if is_unconstrained() {
            for i in 0..self.len() {
                f(self.get_unchecked(i));
            }
        } else {
            for i in 0..MaxLen {
                if i < self.len() {
                    f(self.get_unchecked(i));
                }
            }
        }
    }

    /// Calls a closure on each element in this vector, along with its index.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
    /// let mut result = BoundedVec::<u32, 4>::new();
    /// vec.for_eachi(|i, value| result.push(i + value * 2));
    ///
    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);
    /// assert_eq(result, expected);
    /// \`\`\`
    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {
        if is_unconstrained() {
            for i in 0..self.len() {
                f(i, self.get_unchecked(i));
            }
        } else {
            for i in 0..MaxLen {
                if i < self.len() {
                    f(i, self.get_unchecked(i));
                }
            }
        }
    }

    /// Creates a new BoundedVec from the given array and length.
    /// The given length must be less than or equal to the length of the array.
    ///
    /// This function will zero out any elements at or past index \`len\` of \`array\`.
    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is
    /// zeroed after that index, you can use \`from_parts_unchecked\` to remove the extra loop.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);
    /// assert_eq(vec.len(), 3);
    /// \`\`\`
    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {
        assert(len <= MaxLen);
        let zeroed = crate::mem::zeroed();

        if is_unconstrained() {
            for i in len..MaxLen {
                array[i] = zeroed;
            }
        } else {
            for i in 0..MaxLen {
                if i >= len {
                    array[i] = zeroed;
                }
            }
        }

        BoundedVec { storage: array, len }
    }

    /// Creates a new BoundedVec from the given array and length.
    /// The given length must be less than or equal to the length of the array.
    ///
    /// This function is unsafe because it expects all elements past the \`len\` index
    /// of \`array\` to be zeroed, but does not check for this internally. Use \`from_parts\`
    /// for a safe version of this function which does zero out any indices past the
    /// given length. Invalidating this assumption can notably cause \`BoundedVec::eq\`
    /// to give incorrect results since it will check even elements past \`len\`.
    ///
    /// Example:
    ///
    /// \`\`\`noir
    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);
    /// assert_eq(vec.len(), 3);
    ///
    /// // invalid use!
    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);
    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);
    ///
    /// // both vecs have length 3 so we'd expect them to be equal, but this
    /// // fails because elements past the length are still checked in eq
    /// assert_eq(vec1, vec2); // fails
    /// \`\`\`
    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {
        assert(len <= MaxLen);
        BoundedVec { storage: array, len }
    }
}

impl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>
where
    T: Eq,
{
    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {
        // TODO: https://github.com/noir-lang/noir/issues/4837
        //
        // We make the assumption that the user has used the proper interface for working with \`BoundedVec\`s
        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.
        if self.len == other.len {
            self.storage == other.storage
        } else {
            false
        }
    }
}

impl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {
    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {
        BoundedVec::from_array(array)
    }
}

mod bounded_vec_tests {

    mod get {
        use crate::collections::bounded_vec::BoundedVec;

        #[test(should_fail_with = "Attempted to read past end of BoundedVec")]
        fn panics_when_reading_elements_past_end_of_vec() {
            let vec: BoundedVec<Field, 5> = BoundedVec::new();

            crate::println(vec.get(0));
        }
    }

    mod set {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn set_updates_values_properly() {
            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);

            vec.set(0, 42);
            assert_eq(vec.storage, [42, 0, 0, 0, 0]);

            vec.set(1, 43);
            assert_eq(vec.storage, [42, 43, 0, 0, 0]);

            vec.set(2, 44);
            assert_eq(vec.storage, [42, 43, 44, 0, 0]);

            vec.set(1, 10);
            assert_eq(vec.storage, [42, 10, 44, 0, 0]);

            vec.set(0, 0);
            assert_eq(vec.storage, [0, 10, 44, 0, 0]);
        }

        #[test(should_fail_with = "Attempted to write past end of BoundedVec")]
        fn panics_when_writing_elements_past_end_of_vec() {
            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();
            vec.set(0, 42);

            // Need to use println to avoid DIE removing the write operation.
            crate::println(vec.get(0));
        }
    }

    mod map {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn applies_function_correctly() {
            // docs:start:bounded-vec-map-example
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = vec.map(|value| value * 2);
            // docs:end:bounded-vec-map-example
            let expected = BoundedVec::from_array([2, 4, 6, 8]);

            assert_eq(result, expected);
        }

        #[test]
        fn applies_function_that_changes_return_type() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = vec.map(|value| (value * 2) as Field);
            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);

            assert_eq(result, expected);
        }

        #[test]
        fn does_not_apply_function_past_len() {
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);
            let result = vec.map(|value| if value == 0 { 5 } else { value });
            let expected = BoundedVec::from_array([5, 1]);

            assert_eq(result, expected);
            assert_eq(result.get_unchecked(2), 0);
        }
    }

    mod mapi {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn applies_function_correctly() {
            // docs:start:bounded-vec-mapi-example
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = vec.mapi(|i, value| i + value * 2);
            // docs:end:bounded-vec-mapi-example
            let expected = BoundedVec::from_array([2, 5, 8, 11]);

            assert_eq(result, expected);
        }

        #[test]
        fn applies_function_that_changes_return_type() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = vec.mapi(|i, value| (i + value * 2) as Field);
            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);

            assert_eq(result, expected);
        }

        #[test]
        fn does_not_apply_function_past_len() {
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);
            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });
            let expected = BoundedVec::from_array([5, 1]);

            assert_eq(result, expected);
            assert_eq(result.get_unchecked(2), 0);
        }
    }

    mod for_each {
        use crate::collections::bounded_vec::BoundedVec;

        // map in terms of for_each
        fn for_each_map<T, U, Env, let MaxLen: u32>(
            input: BoundedVec<T, MaxLen>,
            f: fn[Env](T) -> U,
        ) -> BoundedVec<U, MaxLen> {
            let mut output = BoundedVec::<U, MaxLen>::new();
            let output_ref = &mut output;
            input.for_each(|x| output_ref.push(f(x)));
            output
        }

        #[test]
        fn smoke_test() {
            let mut acc = 0;
            let acc_ref = &mut acc;
            // docs:start:bounded-vec-for-each-example
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);
            vec.for_each(|value| { *acc_ref += value; });
            // docs:end:bounded-vec-for-each-example
            assert_eq(acc, 6);
        }

        #[test]
        fn applies_function_correctly() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = for_each_map(vec, |value| value * 2);
            let expected = BoundedVec::from_array([2, 4, 6, 8]);

            assert_eq(result, expected);
        }

        #[test]
        fn applies_function_that_changes_return_type() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = for_each_map(vec, |value| (value * 2) as Field);
            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);

            assert_eq(result, expected);
        }

        #[test]
        fn does_not_apply_function_past_len() {
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);
            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });
            let expected = BoundedVec::from_array([5, 1]);

            assert_eq(result, expected);
            assert_eq(result.get_unchecked(2), 0);
        }
    }

    mod for_eachi {
        use crate::collections::bounded_vec::BoundedVec;

        // mapi in terms of for_eachi
        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(
            input: BoundedVec<T, MaxLen>,
            f: fn[Env](u32, T) -> U,
        ) -> BoundedVec<U, MaxLen> {
            let mut output = BoundedVec::<U, MaxLen>::new();
            let output_ref = &mut output;
            input.for_eachi(|i, x| output_ref.push(f(i, x)));
            output
        }

        #[test]
        fn smoke_test() {
            let mut acc = 0;
            let acc_ref = &mut acc;
            // docs:start:bounded-vec-for-eachi-example
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);
            vec.for_eachi(|i, value| { *acc_ref += i * value; });
            // docs:end:bounded-vec-for-eachi-example

            // 0 * 1 + 1 * 2 + 2 * 3
            assert_eq(acc, 8);
        }

        #[test]
        fn applies_function_correctly() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = for_eachi_mapi(vec, |i, value| i + value * 2);
            let expected = BoundedVec::from_array([2, 5, 8, 11]);

            assert_eq(result, expected);
        }

        #[test]
        fn applies_function_that_changes_return_type() {
            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);
            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);
            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);

            assert_eq(result, expected);
        }

        #[test]
        fn does_not_apply_function_past_len() {
            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);
            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });
            let expected = BoundedVec::from_array([5, 1]);

            assert_eq(result, expected);
            assert_eq(result.get_unchecked(2), 0);
        }
    }

    mod from_array {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn empty() {
            let empty_array: [Field; 0] = [];
            let bounded_vec = BoundedVec::from_array([]);

            assert_eq(bounded_vec.max_len(), 0);
            assert_eq(bounded_vec.len(), 0);
            assert_eq(bounded_vec.storage(), empty_array);
        }

        #[test]
        fn equal_len() {
            let array = [1, 2, 3];
            let bounded_vec = BoundedVec::from_array(array);

            assert_eq(bounded_vec.max_len(), 3);
            assert_eq(bounded_vec.len(), 3);
            assert_eq(bounded_vec.storage(), array);
        }

        #[test]
        fn max_len_greater_then_array_len() {
            let array = [1, 2, 3];
            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);

            assert_eq(bounded_vec.max_len(), 10);
            assert_eq(bounded_vec.len(), 3);
            assert_eq(bounded_vec.get(0), 1);
            assert_eq(bounded_vec.get(1), 2);
            assert_eq(bounded_vec.get(2), 3);
        }

        #[test(should_fail_with = "from array out of bounds")]
        fn max_len_lower_then_array_len() {
            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);
        }
    }

    mod trait_from {
        use crate::collections::bounded_vec::BoundedVec;
        use crate::convert::From;

        #[test]
        fn simple() {
            let array = [1, 2];
            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);

            assert_eq(bounded_vec.max_len(), 10);
            assert_eq(bounded_vec.len(), 2);
            assert_eq(bounded_vec.get(0), 1);
            assert_eq(bounded_vec.get(1), 2);
        }
    }

    mod trait_eq {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn empty_equality() {
            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();
            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();

            assert_eq(bounded_vec1, bounded_vec2);
        }

        #[test]
        fn inequality() {
            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();
            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();
            bounded_vec1.push(1);
            bounded_vec2.push(2);

            assert(bounded_vec1 != bounded_vec2);
        }
    }

    mod from_parts {
        use crate::collections::bounded_vec::BoundedVec;

        #[test]
        fn from_parts() {
            // docs:start:from-parts
            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);
            assert_eq(vec.len(), 3);

            // Any elements past the given length are zeroed out, so these
            // two BoundedVecs will be completely equal
            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);
            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);
            assert_eq(vec1, vec2);
            // docs:end:from-parts
        }

        #[test]
        fn from_parts_unchecked() {
            // docs:start:from-parts-unchecked
            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);
            assert_eq(vec.len(), 3);

            // invalid use!
            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);
            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);

            // both vecs have length 3 so we'd expect them to be equal, but this
            // fails because elements past the length are still checked in eq
            assert(vec1 != vec2);
            // docs:end:from-parts-unchecked
        }
    }
}
`},12:{path:"std/convert.nr",source:`// docs:start:from-trait
pub trait From<T> {
    fn from(input: T) -> Self;
}
// docs:end:from-trait

impl<T> From<T> for T {
    fn from(input: T) -> T {
        input
    }
}

// docs:start:into-trait
pub trait Into<T> {
    fn into(self) -> T;
}

impl<T, U> Into<T> for U
where
    T: From<U>,
{
    fn into(self) -> T {
        T::from(self)
    }
}
// docs:end:into-trait

// docs:start:from-impls
// Unsigned integers

impl From<u8> for u32 {
    fn from(value: u8) -> u32 {
        value as u32
    }
}

impl From<u8> for u64 {
    fn from(value: u8) -> u64 {
        value as u64
    }
}
impl From<u32> for u64 {
    fn from(value: u32) -> u64 {
        value as u64
    }
}

impl From<u8> for u128 {
    fn from(value: u8) -> u128 {
        value as u128
    }
}
impl From<u32> for u128 {
    fn from(value: u32) -> u128 {
        value as u128
    }
}
impl From<u64> for u128 {
    fn from(value: u64) -> u128 {
        value as u128
    }
}

impl From<u8> for Field {
    fn from(value: u8) -> Field {
        value as Field
    }
}
impl From<u32> for Field {
    fn from(value: u32) -> Field {
        value as Field
    }
}
impl From<u64> for Field {
    fn from(value: u64) -> Field {
        value as Field
    }
}

impl From<u128> for Field {
    fn from(value: u128) -> Field {
        value as Field
    }
}

// Signed integers

impl From<i8> for i32 {
    fn from(value: i8) -> i32 {
        value as i32
    }
}

impl From<i8> for i64 {
    fn from(value: i8) -> i64 {
        value as i64
    }
}
impl From<i32> for i64 {
    fn from(value: i32) -> i64 {
        value as i64
    }
}

// Booleans
impl From<bool> for u8 {
    fn from(value: bool) -> u8 {
        value as u8
    }
}
impl From<bool> for u32 {
    fn from(value: bool) -> u32 {
        value as u32
    }
}
impl From<bool> for u64 {
    fn from(value: bool) -> u64 {
        value as u64
    }
}
impl From<bool> for i8 {
    fn from(value: bool) -> i8 {
        value as i8
    }
}
impl From<bool> for i32 {
    fn from(value: bool) -> i32 {
        value as i32
    }
}
impl From<bool> for i64 {
    fn from(value: bool) -> i64 {
        value as i64
    }
}
impl From<bool> for Field {
    fn from(value: bool) -> Field {
        value as Field
    }
}
// docs:end:from-impls

/// A generic interface for casting between primitive types,
/// equivalent of using the \`as\` keyword between values.
///
/// # Example
///
/// \`\`\`
/// let x: Field = 1234567890;
/// let y: u8 = x as u8;
/// let z: u8 = x.as_();
/// assert_eq(y, z);
/// \`\`\`
pub trait AsPrimitive<T> {
    /// The equivalent of doing \`self as T\`.
    fn as_(self) -> T;
}

#[generate_as_primitive_impls]
comptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {
    let types = [
        quote { bool },
        quote { u8 },
        quote { u16 },
        quote { u32 },
        quote { u64 },
        quote { u128 },
        quote { i8 },
        quote { i16 },
        quote { i32 },
        quote { i64 },
        quote { Field },
    ];

    let mut impls = &[];
    for type1 in types {
        for type2 in types {
            impls = impls.push_back(
                quote {
                impl AsPrimitive<$type1> for $type2 {
                    fn as_(self) -> $type1 {
                        self as $type1
                    }
                }
            },
            );
        }
    }
    impls.join(quote {})
}
`},16:{path:"std/embedded_curve_ops.nr",source:`use crate::cmp::Eq;
use crate::hash::Hash;
use crate::ops::arith::{Add, Neg, Sub};

/// A point on the embedded elliptic curve
/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.
/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.
pub struct EmbeddedCurvePoint {
    pub x: Field,
    pub y: Field,
    pub is_infinite: bool,
}

impl EmbeddedCurvePoint {
    /// Elliptic curve point doubling operation
    /// returns the doubled point of a point P, i.e P+P
    pub fn double(self) -> EmbeddedCurvePoint {
        embedded_curve_add(self, self)
    }

    /// Returns the null element of the curve; 'the point at infinity'
    pub fn point_at_infinity() -> EmbeddedCurvePoint {
        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }
    }

    /// Returns the curve's generator point.
    pub fn generator() -> EmbeddedCurvePoint {
        // Generator point for the grumpkin curve (y^2 = x^3 - 17)
        EmbeddedCurvePoint {
            x: 1,
            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)
            is_infinite: false,
        }
    }
}

impl Add for EmbeddedCurvePoint {
    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity
    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {
        embedded_curve_add(self, other)
    }
}

impl Sub for EmbeddedCurvePoint {
    /// Points subtraction operation, using addition and negation
    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {
        self + other.neg()
    }
}

impl Neg for EmbeddedCurvePoint {
    /// Negates a point P, i.e returns -P, by negating the y coordinate.
    /// If the point is at infinity, then the result is also at infinity.
    fn neg(self) -> EmbeddedCurvePoint {
        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }
    }
}

impl Eq for EmbeddedCurvePoint {
    /// Checks whether two points are equal
    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {
        (self.is_infinite & b.is_infinite)
            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))
    }
}

impl Hash for EmbeddedCurvePoint {
    fn hash<H>(self, state: &mut H)
    where
        H: crate::hash::Hasher,
    {
        if self.is_infinite {
            self.is_infinite.hash(state);
        } else {
            self.x.hash(state);
            self.y.hash(state);
        }
    }
}

/// Scalar for the embedded curve represented as low and high limbs
/// By definition, the scalar field of the embedded curve is base field of the proving system curve.
/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.
pub struct EmbeddedCurveScalar {
    pub lo: Field,
    pub hi: Field,
}

impl EmbeddedCurveScalar {
    pub fn new(lo: Field, hi: Field) -> Self {
        EmbeddedCurveScalar { lo, hi }
    }

    #[field(bn254)]
    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {
        let (a, b) = crate::field::bn254::decompose(scalar);
        EmbeddedCurveScalar { lo: a, hi: b }
    }

    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value
    #[field(bn254)]
    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {
        let mut v = 1;
        let mut lo = 0 as Field;
        let mut hi = 0 as Field;
        for i in 0..16 {
            lo = lo + (bytes[offset + 31 - i] as Field) * v;
            hi = hi + (bytes[offset + 15 - i] as Field) * v;
            v = v * 256;
        }
        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };
        sig_s
    }
}

impl Eq for EmbeddedCurveScalar {
    fn eq(self, other: Self) -> bool {
        (other.hi == self.hi) & (other.lo == self.lo)
    }
}

impl Hash for EmbeddedCurveScalar {
    fn hash<H>(self, state: &mut H)
    where
        H: crate::hash::Hasher,
    {
        self.hi.hash(state);
        self.lo.hash(state);
    }
}

// Computes a multi scalar multiplication over the embedded curve.
// For bn254, We have Grumpkin and Baby JubJub.
// For bls12-381, we have JubJub and Bandersnatch.
//
// The embedded curve being used is decided by the
// underlying proof system.
// docs:start:multi_scalar_mul
pub fn multi_scalar_mul<let N: u32>(
    points: [EmbeddedCurvePoint; N],
    scalars: [EmbeddedCurveScalar; N],
) -> EmbeddedCurvePoint
// docs:end:multi_scalar_mul
{
    multi_scalar_mul_array_return(points, scalars)[0]
}

#[foreign(multi_scalar_mul)]
pub(crate) fn multi_scalar_mul_array_return<let N: u32>(
    points: [EmbeddedCurvePoint; N],
    scalars: [EmbeddedCurveScalar; N],
) -> [EmbeddedCurvePoint; 1] {}

// docs:start:fixed_base_scalar_mul
pub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint
// docs:end:fixed_base_scalar_mul
{
    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])
}

/// This function only assumes that the points are on the curve
/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe
// docs:start:embedded_curve_add
pub fn embedded_curve_add(
    point1: EmbeddedCurvePoint,
    point2: EmbeddedCurvePoint,
) -> EmbeddedCurvePoint {
    // docs:end:embedded_curve_add
    if crate::runtime::is_unconstrained() {
        // \`embedded_curve_add_unsafe\` requires the inputs not to be the infinity point, so we check it here.
        // This is because \`embedded_curve_add_unsafe\` uses the \`embedded_curve_add\` opcode.
        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point
        // so that it can apply the ec addition formula directly.
        if point1.is_infinite {
            point2
        } else if point2.is_infinite {
            point1
        } else {
            embedded_curve_add_unsafe(point1, point2)
        }
    } else {
        // In a constrained context, we also need to check the inputs are not the infinity point because we also use \`embedded_curve_add_unsafe\`
        // However we also need to identify the case where the two inputs are the same, because then
        // the addition formula does not work and we need to use the doubling formula instead.
        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.

        // x_coordinates_match is true if both abscissae are the same
        let x_coordinates_match = point1.x == point2.x;
        // y_coordinates_match is true if both ordinates are the same
        let y_coordinates_match = point1.y == point2.y;
        // double_predicate is true if both abscissae and ordinates are the same
        let double_predicate = (x_coordinates_match & y_coordinates_match);
        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other
        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);
        let point1_1 = EmbeddedCurvePoint {
            x: point1.x + (x_coordinates_match as Field),
            y: point1.y,
            is_infinite: false,
        };
        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };
        // point1_1 is guaranteed to have a different abscissa than point2:
        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0
        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case
        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use \`embedded_curve_add_unsafe\`
        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.
        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);

        // \`embedded_curve_add_unsafe\` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.
        let double = embedded_curve_add_unsafe(point1, point1);
        // \`embedded_curve_add_unsafe\` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)
        // However we did this logic when we computed \`double_predicate\`, so we set the result to 2*point1 if point1 and point2 are the same
        result = if double_predicate { double } else { result };

        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point
        if point1.is_infinite {
            result = point2;
        }
        if point2.is_infinite {
            result = point1;
        }

        // Finally, we set the is_infinity flag of the result:
        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful
        // so we should not use the fact that the inputs are opposite in this case:
        let mut result_is_infinity =
            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);
        // However, if both of them are at infinity, then the result is also at infinity
        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);
        result
    }
}

#[foreign(embedded_curve_add)]
fn embedded_curve_add_array_return(
    _point1: EmbeddedCurvePoint,
    _point2: EmbeddedCurvePoint,
) -> [EmbeddedCurvePoint; 1] {}

/// This function assumes that:
/// The points are on the curve, and
/// The points don't share an x-coordinate, and
/// Neither point is the infinity point.
/// If it is used with correct input, the function ensures the correct non-zero result is returned.
/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.
pub fn embedded_curve_add_not_nul(
    point1: EmbeddedCurvePoint,
    point2: EmbeddedCurvePoint,
) -> EmbeddedCurvePoint {
    assert(point1.x != point2.x);
    assert(!point1.is_infinite);
    assert(!point2.is_infinite);
    embedded_curve_add_unsafe(point1, point2)
}

/// Unsafe ec addition
/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.
/// If they have the same value but are different variables, the result will be incorrect because in this case
/// it assumes (but does not check) that the points' x-coordinates are not equal.
/// It also assumes neither point is the infinity point.
pub fn embedded_curve_add_unsafe(
    point1: EmbeddedCurvePoint,
    point2: EmbeddedCurvePoint,
) -> EmbeddedCurvePoint {
    embedded_curve_add_array_return(point1, point2)[0]
}
`},17:{path:"std/field/bn254.nr",source:`use crate::field::field_less_than;
use crate::runtime::is_unconstrained;

// The low and high decomposition of the field modulus
global PLO: Field = 53438638232309528389504892708671455233;
global PHI: Field = 64323764613183177041862057485226039389;

pub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;

// Decomposes a single field into two 16 byte fields.
fn compute_decomposition(x: Field) -> (Field, Field) {
    // Here's we're taking advantage of truncating 128 bit limbs from the input field
    // and then subtracting them from the input such the field division is equivalent to integer division.
    let low = (x as u128) as Field;
    let high = (x - low) / TWO_POW_128;

    (low, high)
}

pub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {
    compute_decomposition(x)
}

unconstrained fn lte_hint(x: Field, y: Field) -> bool {
    if x == y {
        true
    } else {
        field_less_than(x, y)
    }
}

// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)
fn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {
    let (alo, ahi) = a;
    let (blo, bhi) = b;
    // Safety: borrow is enforced to be boolean due to its type.
    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)
    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)
    unsafe {
        let borrow = lte_hint(alo, blo);

        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;
        let rhi = ahi - bhi - (borrow as Field);

        rlo.assert_max_bit_size::<128>();
        rhi.assert_max_bit_size::<128>();
    }
}

/// Decompose a single field into two 16 byte fields.
pub fn decompose(x: Field) -> (Field, Field) {
    if is_unconstrained() {
        compute_decomposition(x)
    } else {
        // Safety: decomposition is properly checked below
        unsafe {
            // Take hints of the decomposition
            let (xlo, xhi) = decompose_hint(x);

            // Range check the limbs
            xlo.assert_max_bit_size::<128>();
            xhi.assert_max_bit_size::<128>();

            // Check that the decomposition is correct
            assert_eq(x, xlo + TWO_POW_128 * xhi);

            // Assert that the decomposition of P is greater than the decomposition of x
            assert_gt_limbs((PLO, PHI), (xlo, xhi));
            (xlo, xhi)
        }
    }
}

pub fn assert_gt(a: Field, b: Field) {
    if is_unconstrained() {
        assert(
            // Safety: already unconstrained
            unsafe { field_less_than(b, a) },
        );
    } else {
        // Decompose a and b
        let a_limbs = decompose(a);
        let b_limbs = decompose(b);

        // Assert that a_limbs is greater than b_limbs
        assert_gt_limbs(a_limbs, b_limbs)
    }
}

pub fn assert_lt(a: Field, b: Field) {
    assert_gt(b, a);
}

pub fn gt(a: Field, b: Field) -> bool {
    if is_unconstrained() {
        // Safety: unsafe in unconstrained
        unsafe {
            field_less_than(b, a)
        }
    } else if a == b {
        false
    } else {
        // Safety: Take a hint of the comparison and verify it
        unsafe {
            if field_less_than(a, b) {
                assert_gt(b, a);
                false
            } else {
                assert_gt(a, b);
                true
            }
        }
    }
}

pub fn lt(a: Field, b: Field) -> bool {
    gt(b, a)
}

mod tests {
    // TODO: Allow imports from "super"
    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};

    #[test]
    fn check_decompose() {
        assert_eq(decompose(TWO_POW_128), (0, 1));
        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));
        assert_eq(decompose(0x1234567890), (0x1234567890, 0));
    }

    #[test]
    unconstrained fn check_decompose_unconstrained() {
        assert_eq(decompose(TWO_POW_128), (0, 1));
        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));
        assert_eq(decompose(0x1234567890), (0x1234567890, 0));
    }

    #[test]
    unconstrained fn check_lte_hint() {
        assert(lte_hint(0, 1));
        assert(lte_hint(0, 0x100));
        assert(lte_hint(0x100, TWO_POW_128 - 1));
        assert(!lte_hint(0 - 1, 0));

        assert(lte_hint(0, 0));
        assert(lte_hint(0x100, 0x100));
        assert(lte_hint(0 - 1, 0 - 1));
    }

    #[test]
    fn check_assert_gt() {
        assert_gt(1, 0);
        assert_gt(0x100, 0);
        assert_gt((0 - 1), (0 - 2));
        assert_gt(TWO_POW_128, 0);
        assert_gt(0 - 1, 0);
    }

    #[test]
    unconstrained fn check_assert_gt_unconstrained() {
        assert_gt(1, 0);
        assert_gt(0x100, 0);
        assert_gt((0 - 1), (0 - 2));
        assert_gt(TWO_POW_128, 0);
        assert_gt(0 - 1, 0);
    }

    #[test]
    fn check_gt() {
        assert(gt(1, 0));
        assert(gt(0x100, 0));
        assert(gt((0 - 1), (0 - 2)));
        assert(gt(TWO_POW_128, 0));
        assert(!gt(0, 0));
        assert(!gt(0, 0x100));
        assert(gt(0 - 1, 0 - 2));
        assert(!gt(0 - 2, 0 - 1));
    }

    #[test]
    unconstrained fn check_gt_unconstrained() {
        assert(gt(1, 0));
        assert(gt(0x100, 0));
        assert(gt((0 - 1), (0 - 2)));
        assert(gt(TWO_POW_128, 0));
        assert(!gt(0, 0));
        assert(!gt(0, 0x100));
        assert(gt(0 - 1, 0 - 2));
        assert(!gt(0 - 2, 0 - 1));
    }

    #[test]
    fn check_plo_phi() {
        assert_eq(PLO + PHI * TWO_POW_128, 0);
        let p_bytes = crate::field::modulus_le_bytes();
        let mut p_low: Field = 0;
        let mut p_high: Field = 0;

        let mut offset = 1;
        for i in 0..16 {
            p_low += (p_bytes[i] as Field) * offset;
            p_high += (p_bytes[i + 16] as Field) * offset;
            offset *= 256;
        }
        assert_eq(p_low, PLO);
        assert_eq(p_high, PHI);
    }
}
`},18:{path:"std/field/mod.nr",source:`pub mod bn254;
use crate::{runtime::is_unconstrained, static_assert};
use bn254::lt as bn254_lt;

impl Field {
    /// Asserts that \`self\` can be represented in \`bit_size\` bits.
    ///
    /// # Failures
    /// Causes a constraint failure for \`Field\` values exceeding \`2^{bit_size}\`.
    // docs:start:assert_max_bit_size
    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {
        // docs:end:assert_max_bit_size
        static_assert(
            BIT_SIZE < modulus_num_bits() as u32,
            "BIT_SIZE must be less than modulus_num_bits",
        );
        self.__assert_max_bit_size(BIT_SIZE);
    }

    #[builtin(apply_range_constraint)]
    fn __assert_max_bit_size(self, bit_size: u32) {}

    /// Decomposes \`self\` into its little endian bit decomposition as a \`[u1; N]\` array.
    /// This slice will be zero padded should not all bits be necessary to represent \`self\`.
    ///
    /// # Failures
    /// Causes a constraint failure for \`Field\` values exceeding \`2^N\` as the resulting slice will not
    /// be able to represent the original \`Field\`.
    ///
    /// # Safety
    /// Values of \`N\` equal to or greater than the number of bits necessary to represent the \`Field\` modulus
    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the \`Field\` will
    /// wrap around due to overflow when verifying the decomposition.
    #[builtin(to_le_bits)]
    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}

    /// Decomposes \`self\` into its big endian bit decomposition as a \`[u1; N]\` array.
    /// This array will be zero padded should not all bits be necessary to represent \`self\`.
    ///
    /// # Failures
    /// Causes a constraint failure for \`Field\` values exceeding \`2^N\` as the resulting slice will not
    /// be able to represent the original \`Field\`.
    ///
    /// # Safety
    /// Values of \`N\` equal to or greater than the number of bits necessary to represent the \`Field\` modulus
    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the \`Field\` will
    /// wrap around due to overflow when verifying the decomposition.
    #[builtin(to_be_bits)]
    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}

    /// Decomposes \`self\` into its little endian bit decomposition as a \`[u1; N]\` array.
    /// This slice will be zero padded should not all bits be necessary to represent \`self\`.
    ///
    /// # Failures
    /// Causes a constraint failure for \`Field\` values exceeding \`2^N\` as the resulting slice will not
    /// be able to represent the original \`Field\`.
    ///
    /// # Safety
    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.
    // docs:start:to_le_bits
    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {
        // docs:end:to_le_bits
        let bits = self._to_le_bits();

        if !is_unconstrained() {
            // Ensure that the byte decomposition does not overflow the modulus
            let p = modulus_le_bits();
            assert(bits.len() <= p.len());
            let mut ok = bits.len() != p.len();
            for i in 0..N {
                if !ok {
                    if (bits[N - 1 - i] != p[N - 1 - i]) {
                        assert(p[N - 1 - i] == 1);
                        ok = true;
                    }
                }
            }
            assert(ok);
        }
        bits
    }

    /// Decomposes \`self\` into its big endian bit decomposition as a \`[u1; N]\` array.
    /// This array will be zero padded should not all bits be necessary to represent \`self\`.
    ///
    /// # Failures
    /// Causes a constraint failure for \`Field\` values exceeding \`2^N\` as the resulting slice will not
    /// be able to represent the original \`Field\`.
    ///
    /// # Safety
    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.
    // docs:start:to_be_bits
    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {
        // docs:end:to_be_bits
        let bits = self._to_be_bits();

        if !is_unconstrained() {
            // Ensure that the decomposition does not overflow the modulus
            let p = modulus_be_bits();
            assert(bits.len() <= p.len());
            let mut ok = bits.len() != p.len();
            for i in 0..N {
                if !ok {
                    if (bits[i] != p[i]) {
                        assert(p[i] == 1);
                        ok = true;
                    }
                }
            }
            assert(ok);
        }
        bits
    }

    /// Decomposes \`self\` into its little endian byte decomposition as a \`[u8;N]\` array
    /// This array will be zero padded should not all bytes be necessary to represent \`self\`.
    ///
    /// # Failures
    ///  The length N of the array must be big enough to contain all the bytes of the 'self',
    ///  and no more than the number of bytes required to represent the field modulus
    ///
    /// # Safety
    /// The result is ensured to be the canonical decomposition of the field element
    // docs:start:to_le_bytes
    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {
        // docs:end:to_le_bytes
        static_assert(
            N <= modulus_le_bytes().len(),
            "N must be less than or equal to modulus_le_bytes().len()",
        );
        // Compute the byte decomposition
        let bytes = self.to_le_radix(256);

        if !is_unconstrained() {
            // Ensure that the byte decomposition does not overflow the modulus
            let p = modulus_le_bytes();
            assert(bytes.len() <= p.len());
            let mut ok = bytes.len() != p.len();
            for i in 0..N {
                if !ok {
                    if (bytes[N - 1 - i] != p[N - 1 - i]) {
                        assert(bytes[N - 1 - i] < p[N - 1 - i]);
                        ok = true;
                    }
                }
            }
            assert(ok);
        }
        bytes
    }

    /// Decomposes \`self\` into its big endian byte decomposition as a \`[u8;N]\` array of length required to represent the field modulus
    /// This array will be zero padded should not all bytes be necessary to represent \`self\`.
    ///
    /// # Failures
    ///  The length N of the array must be big enough to contain all the bytes of the 'self',
    ///  and no more than the number of bytes required to represent the field modulus
    ///
    /// # Safety
    /// The result is ensured to be the canonical decomposition of the field element
    // docs:start:to_be_bytes
    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {
        // docs:end:to_be_bytes
        static_assert(
            N <= modulus_le_bytes().len(),
            "N must be less than or equal to modulus_le_bytes().len()",
        );
        // Compute the byte decomposition
        let bytes = self.to_be_radix(256);

        if !is_unconstrained() {
            // Ensure that the byte decomposition does not overflow the modulus
            let p = modulus_be_bytes();
            assert(bytes.len() <= p.len());
            let mut ok = bytes.len() != p.len();
            for i in 0..N {
                if !ok {
                    if (bytes[i] != p[i]) {
                        assert(bytes[i] < p[i]);
                        ok = true;
                    }
                }
            }
            assert(ok);
        }
        bytes
    }

    // docs:start:to_le_radix
    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {
        // Brillig does not need an immediate radix
        if !crate::runtime::is_unconstrained() {
            static_assert(1 < radix, "radix must be greater than 1");
            static_assert(radix <= 256, "radix must be less than or equal to 256");
            static_assert(radix & (radix - 1) == 0, "radix must be a power of 2");
        }
        self.__to_le_radix(radix)
    }
    // docs:end:to_le_radix

    // docs:start:to_be_radix
    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {
        // Brillig does not need an immediate radix
        if !crate::runtime::is_unconstrained() {
            crate::assert_constant(radix);
        }
        self.__to_be_radix(radix)
    }
    // docs:end:to_be_radix

    // \`_radix\` must be less than 256
    #[builtin(to_le_radix)]
    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}

    // \`_radix\` must be less than 256
    #[builtin(to_be_radix)]
    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}

    // Returns self to the power of the given exponent value.
    // Caution: we assume the exponent fits into 32 bits
    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits
    pub fn pow_32(self, exponent: Field) -> Field {
        let mut r: Field = 1;
        let b: [u1; 32] = exponent.to_le_bits();

        for i in 1..33 {
            r *= r;
            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;
        }
        r
    }

    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x \`elem\` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.
    pub fn sgn0(self) -> u1 {
        self as u1
    }

    pub fn lt(self, another: Field) -> bool {
        if crate::compat::is_bn254() {
            bn254_lt(self, another)
        } else {
            lt_fallback(self, another)
        }
    }

    /// Convert a little endian byte array to a field element.
    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.
    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {
        static_assert(
            N <= modulus_le_bytes().len(),
            "N must be less than or equal to modulus_le_bytes().len()",
        );
        let mut v = 1;
        let mut result = 0;

        for i in 0..N {
            result += (bytes[i] as Field) * v;
            v = v * 256;
        }
        result
    }

    /// Convert a big endian byte array to a field element.
    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.
    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {
        let mut v = 1;
        let mut result = 0;

        for i in 0..N {
            result += (bytes[N - 1 - i] as Field) * v;
            v = v * 256;
        }
        result
    }
}

#[builtin(modulus_num_bits)]
pub comptime fn modulus_num_bits() -> u64 {}

#[builtin(modulus_be_bits)]
pub comptime fn modulus_be_bits() -> [u1] {}

#[builtin(modulus_le_bits)]
pub comptime fn modulus_le_bits() -> [u1] {}

#[builtin(modulus_be_bytes)]
pub comptime fn modulus_be_bytes() -> [u8] {}

#[builtin(modulus_le_bytes)]
pub comptime fn modulus_le_bytes() -> [u8] {}

/// An unconstrained only built in to efficiently compare fields.
#[builtin(field_less_than)]
unconstrained fn __field_less_than(x: Field, y: Field) -> bool {}

pub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {
    __field_less_than(x, y)
}

// Convert a 32 byte array to a field element by modding
pub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {
    // Convert it to a field element
    let mut v = 1;
    let mut high = 0 as Field;
    let mut low = 0 as Field;

    for i in 0..16 {
        high = high + (bytes32[15 - i] as Field) * v;
        low = low + (bytes32[16 + 15 - i] as Field) * v;
        v = v * 256;
    }
    // Abuse that a % p + b % p = (a + b) % p and that low < p
    low + high * v
}

fn lt_fallback(x: Field, y: Field) -> bool {
    if is_unconstrained() {
        // Safety: unconstrained context
        unsafe {
            field_less_than(x, y)
        }
    } else {
        let x_bytes: [u8; 32] = x.to_le_bytes();
        let y_bytes: [u8; 32] = y.to_le_bytes();
        let mut x_is_lt = false;
        let mut done = false;
        for i in 0..32 {
            if (!done) {
                let x_byte = x_bytes[32 - 1 - i] as u8;
                let y_byte = y_bytes[32 - 1 - i] as u8;
                let bytes_match = x_byte == y_byte;
                if !bytes_match {
                    x_is_lt = x_byte < y_byte;
                    done = true;
                }
            }
        }
        x_is_lt
    }
}

mod tests {
    use crate::{panic::panic, runtime};
    use super::field_less_than;

    #[test]
    // docs:start:to_be_bits_example
    fn test_to_be_bits() {
        let field = 2;
        let bits: [u1; 8] = field.to_be_bits();
        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);
    }
    // docs:end:to_be_bits_example

    #[test]
    // docs:start:to_le_bits_example
    fn test_to_le_bits() {
        let field = 2;
        let bits: [u1; 8] = field.to_le_bits();
        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);
    }
    // docs:end:to_le_bits_example

    #[test]
    // docs:start:to_be_bytes_example
    fn test_to_be_bytes() {
        let field = 2;
        let bytes: [u8; 8] = field.to_be_bytes();
        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);
        assert_eq(Field::from_be_bytes::<8>(bytes), field);
    }
    // docs:end:to_be_bytes_example

    #[test]
    // docs:start:to_le_bytes_example
    fn test_to_le_bytes() {
        let field = 2;
        let bytes: [u8; 8] = field.to_le_bytes();
        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq(Field::from_le_bytes::<8>(bytes), field);
    }
    // docs:end:to_le_bytes_example

    #[test]
    // docs:start:to_be_radix_example
    fn test_to_be_radix() {
        // 259, in base 256, big endian, is [1, 3].
        // i.e. 3 * 256^0 + 1 * 256^1
        let field = 259;

        // The radix (in this example, 256) must be a power of 2.
        // The length of the returned byte array can be specified to be
        // >= the amount of space needed.
        let bytes: [u8; 8] = field.to_be_radix(256);
        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);
        assert_eq(Field::from_be_bytes::<8>(bytes), field);
    }
    // docs:end:to_be_radix_example

    #[test]
    // docs:start:to_le_radix_example
    fn test_to_le_radix() {
        // 259, in base 256, little endian, is [3, 1].
        // i.e. 3 * 256^0 + 1 * 256^1
        let field = 259;

        // The radix (in this example, 256) must be a power of 2.
        // The length of the returned byte array can be specified to be
        // >= the amount of space needed.
        let bytes: [u8; 8] = field.to_le_radix(256);
        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);
        assert_eq(Field::from_le_bytes::<8>(bytes), field);
    }
    // docs:end:to_le_radix_example

    #[test(should_fail_with = "radix must be greater than 1")]
    fn test_to_le_radix_1() {
        // this test should only fail in constrained mode
        if !runtime::is_unconstrained() {
            let field = 2;
            let _: [u8; 8] = field.to_le_radix(1);
        } else {
            panic(f"radix must be greater than 1");
        }
    }

    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2
    //#[test]
    //fn test_to_le_radix_brillig_1() {
    //    // this test should only fail in constrained mode
    //    if runtime::is_unconstrained() {
    //        let field = 1;
    //        let out: [u8; 8] = field.to_le_radix(1);
    //        crate::println(out);
    //        let expected = [0; 8];
    //        assert(out == expected, "unexpected result");
    //    }
    //}

    #[test(should_fail_with = "radix must be a power of 2")]
    fn test_to_le_radix_3() {
        // this test should only fail in constrained mode
        if !runtime::is_unconstrained() {
            let field = 2;
            let _: [u8; 8] = field.to_le_radix(3);
        } else {
            panic(f"radix must be a power of 2");
        }
    }

    #[test]
    fn test_to_le_radix_brillig_3() {
        // this test should only fail in constrained mode
        if runtime::is_unconstrained() {
            let field = 1;
            let out: [u8; 8] = field.to_le_radix(3);
            let mut expected = [0; 8];
            expected[0] = 1;
            assert(out == expected, "unexpected result");
        }
    }

    #[test(should_fail_with = "radix must be less than or equal to 256")]
    fn test_to_le_radix_512() {
        // this test should only fail in constrained mode
        if !runtime::is_unconstrained() {
            let field = 2;
            let _: [u8; 8] = field.to_le_radix(512);
        } else {
            panic(f"radix must be less than or equal to 256")
        }
    }

    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512
    //#[test]
    //fn test_to_le_radix_brillig_512() {
    //    // this test should only fail in constrained mode
    //    if runtime::is_unconstrained() {
    //        let field = 1;
    //        let out: [u8; 8] = field.to_le_radix(512);
    //        let mut expected = [0; 8];
    //        expected[0] = 1;
    //        assert(out == expected, "unexpected result");
    //    }
    //}

    #[test]
    unconstrained fn test_field_less_than() {
        assert(field_less_than(0, 1));
        assert(field_less_than(0, 0x100));
        assert(field_less_than(0x100, 0 - 1));
        assert(!field_less_than(0 - 1, 0));
    }
}
`},19:{path:"std/hash/mod.nr",source:`// Exposed only for usage in \`std::meta\`
pub(crate) mod poseidon2;

use crate::default::Default;
use crate::embedded_curve_ops::{
    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,
};
use crate::meta::derive_via;

#[foreign(sha256_compression)]
// docs:start:sha256_compression
pub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}
// docs:end:sha256_compression

#[foreign(keccakf1600)]
// docs:start:keccakf1600
pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}
// docs:end:keccakf1600

pub mod keccak {
    #[deprecated("This function has been moved to std::hash::keccakf1600")]
    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {
        super::keccakf1600(input)
    }
}

#[foreign(blake2s)]
// docs:start:blake2s
pub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]
// docs:end:blake2s
{}

#[foreign(blake3)]
// docs:start:blake3
pub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]
// docs:end:blake3
{}

// docs:start:pedersen_commitment
pub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {
    // docs:end:pedersen_commitment
    pedersen_commitment_with_separator(input, 0)
}

#[inline_always]
pub fn pedersen_commitment_with_separator<let N: u32>(
    input: [Field; N],
    separator: u32,
) -> EmbeddedCurvePoint {
    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];
    for i in 0..N {
        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.
        points[i] = from_field_unsafe(input[i]);
    }
    let generators = derive_generators("DEFAULT_DOMAIN_SEPARATOR".as_bytes(), separator);
    multi_scalar_mul(generators, points)
}

// docs:start:pedersen_hash
pub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field
// docs:end:pedersen_hash
{
    pedersen_hash_with_separator(input, 0)
}

#[no_predicates]
pub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {
    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];
    let mut generators: [EmbeddedCurvePoint; N + 1] =
        [EmbeddedCurvePoint::point_at_infinity(); N + 1];
    let domain_generators: [EmbeddedCurvePoint; N] =
        derive_generators("DEFAULT_DOMAIN_SEPARATOR".as_bytes(), separator);

    for i in 0..N {
        scalars[i] = from_field_unsafe(input[i]);
        generators[i] = domain_generators[i];
    }
    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };

    let length_generator: [EmbeddedCurvePoint; 1] =
        derive_generators("pedersen_hash_length".as_bytes(), 0);
    generators[N] = length_generator[0];
    multi_scalar_mul_array_return(generators, scalars)[0].x
}

#[field(bn254)]
#[inline_always]
pub fn derive_generators<let N: u32, let M: u32>(
    domain_separator_bytes: [u8; M],
    starting_index: u32,
) -> [EmbeddedCurvePoint; N] {
    crate::assert_constant(domain_separator_bytes);
    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index
    __derive_generators(domain_separator_bytes, starting_index)
}

#[builtin(derive_pedersen_generators)]
#[field(bn254)]
fn __derive_generators<let N: u32, let M: u32>(
    domain_separator_bytes: [u8; M],
    starting_index: u32,
) -> [EmbeddedCurvePoint; N] {}

#[field(bn254)]
// Same as from_field but:
// does not assert the limbs are 128 bits
// does not assert the decomposition does not overflow the EmbeddedCurveScalar
fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {
    // Safety: xlo and xhi decomposition is checked below
    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };
    // Check that the decomposition is correct
    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);
    EmbeddedCurveScalar { lo: xlo, hi: xhi }
}

pub fn hash_to_field(inputs: [Field]) -> Field {
    let mut sum = 0;

    for input in inputs {
        let input_bytes: [u8; 32] = input.to_le_bytes();
        sum += crate::field::bytes32_to_field(blake2s(input_bytes));
    }

    sum
}

#[foreign(poseidon2_permutation)]
pub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}

// Generic hashing support.
// Partially ported and impacted by rust.

// Hash trait shall be implemented per type.
#[derive_via(derive_hash)]
pub trait Hash {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher;
}

// docs:start:derive_hash
comptime fn derive_hash(s: TypeDefinition) -> Quoted {
    let name = quote { Hash };
    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };
    let for_each_field = |name| quote { _self.$name.hash(_state); };
    crate::meta::make_trait_impl(
        s,
        name,
        signature,
        for_each_field,
        quote {},
        |fields| fields,
    )
}
// docs:end:derive_hash

// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.
// TODO: consider making the types generic here ([u8], [Field], etc.)
pub trait Hasher {
    fn finish(self) -> Field;

    fn write(&mut self, input: Field);
}

// BuildHasher is a factory trait, responsible for production of specific Hasher.
pub trait BuildHasher<H>
where
    H: Hasher,
{
    fn build_hasher(self) -> H;
}

pub struct BuildHasherDefault<H>;

impl<H> BuildHasher<H> for BuildHasherDefault<H>
where
    H: Hasher + Default,
{
    fn build_hasher(_self: Self) -> H {
        H::default()
    }
}

impl<H> Default for BuildHasherDefault<H>
where
    H: Hasher + Default,
{
    fn default() -> Self {
        BuildHasherDefault {}
    }
}

impl Hash for Field {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self);
    }
}

impl Hash for u1 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for u8 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for u16 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for u32 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for u64 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for u128 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for i8 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for i16 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for i32 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for i64 {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for bool {
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        H::write(state, self as Field);
    }
}

impl Hash for () {
    fn hash<H>(_self: Self, _state: &mut H)
    where
        H: Hasher,
    {}
}

impl<T, let N: u32> Hash for [T; N]
where
    T: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        for elem in self {
            elem.hash(state);
        }
    }
}

impl<T> Hash for [T]
where
    T: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self.len().hash(state);
        for elem in self {
            elem.hash(state);
        }
    }
}

impl<A, B> Hash for (A, B)
where
    A: Hash,
    B: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self.0.hash(state);
        self.1.hash(state);
    }
}

impl<A, B, C> Hash for (A, B, C)
where
    A: Hash,
    B: Hash,
    C: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self.0.hash(state);
        self.1.hash(state);
        self.2.hash(state);
    }
}

impl<A, B, C, D> Hash for (A, B, C, D)
where
    A: Hash,
    B: Hash,
    C: Hash,
    D: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self.0.hash(state);
        self.1.hash(state);
        self.2.hash(state);
        self.3.hash(state);
    }
}

impl<A, B, C, D, E> Hash for (A, B, C, D, E)
where
    A: Hash,
    B: Hash,
    C: Hash,
    D: Hash,
    E: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self.0.hash(state);
        self.1.hash(state);
        self.2.hash(state);
        self.3.hash(state);
        self.4.hash(state);
    }
}

// Some test vectors for Pedersen hash and Pedersen Commitment.
// They have been generated using the same functions so the tests are for now useless
// but they will be useful when we switch to Noir implementation.
#[test]
fn assert_pedersen() {
    assert_eq(
        pedersen_hash_with_separator([1], 1),
        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,
    );
    assert_eq(
        pedersen_commitment_with_separator([1], 1),
        EmbeddedCurvePoint {
            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,
            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,
            is_infinite: false,
        },
    );

    assert_eq(
        pedersen_hash_with_separator([1, 2], 2),
        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2], 2),
        EmbeddedCurvePoint {
            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,
            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3], 3),
        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3], 3),
        EmbeddedCurvePoint {
            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,
            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4], 4),
        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4], 4),
        EmbeddedCurvePoint {
            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,
            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),
        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),
        EmbeddedCurvePoint {
            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,
            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),
        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),
        EmbeddedCurvePoint {
            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,
            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),
        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),
        EmbeddedCurvePoint {
            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,
            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),
        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),
        EmbeddedCurvePoint {
            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,
            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),
        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),
        EmbeddedCurvePoint {
            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,
            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,
            is_infinite: false,
        },
    );
    assert_eq(
        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),
        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,
    );
    assert_eq(
        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),
        EmbeddedCurvePoint {
            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,
            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,
            is_infinite: false,
        },
    );
}
`},42:{path:"std/option.nr",source:`use crate::cmp::{Eq, Ord, Ordering};
use crate::default::Default;
use crate::hash::{Hash, Hasher};

pub struct Option<T> {
    _is_some: bool,
    _value: T,
}

impl<T> Option<T> {
    /// Constructs a None value
    pub fn none() -> Self {
        Self { _is_some: false, _value: crate::mem::zeroed() }
    }

    /// Constructs a Some wrapper around the given value
    pub fn some(_value: T) -> Self {
        Self { _is_some: true, _value }
    }

    /// True if this Option is None
    pub fn is_none(self) -> bool {
        !self._is_some
    }

    /// True if this Option is Some
    pub fn is_some(self) -> bool {
        self._is_some
    }

    /// Asserts \`self.is_some()\` and returns the wrapped value.
    pub fn unwrap(self) -> T {
        assert(self._is_some);
        self._value
    }

    /// Returns the inner value without asserting \`self.is_some()\`
    /// Note that if \`self\` is \`None\`, there is no guarantee what value will be returned,
    /// only that it will be of type \`T\`.
    pub fn unwrap_unchecked(self) -> T {
        self._value
    }

    /// Returns the wrapped value if \`self.is_some()\`. Otherwise, returns the given default value.
    pub fn unwrap_or(self, default: T) -> T {
        if self._is_some {
            self._value
        } else {
            default
        }
    }

    /// Returns the wrapped value if \`self.is_some()\`. Otherwise, calls the given function to return
    /// a default value.
    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {
        if self._is_some {
            self._value
        } else {
            default()
        }
    }

    /// Asserts \`self.is_some()\` with a provided custom message and returns the contained \`Some\` value
    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {
        assert(self.is_some(), message);
        self._value
    }

    /// If self is \`Some(x)\`, this returns \`Some(f(x))\`. Otherwise, this returns \`None\`.
    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {
        if self._is_some {
            Option::some(f(self._value))
        } else {
            Option::none()
        }
    }

    /// If self is \`Some(x)\`, this returns \`f(x)\`. Otherwise, this returns the given default value.
    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {
        if self._is_some {
            f(self._value)
        } else {
            default
        }
    }

    /// If self is \`Some(x)\`, this returns \`f(x)\`. Otherwise, this returns \`default()\`.
    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {
        if self._is_some {
            f(self._value)
        } else {
            default()
        }
    }

    /// Returns None if self is None. Otherwise, this returns \`other\`.
    pub fn and(self, other: Self) -> Self {
        if self.is_none() {
            Option::none()
        } else {
            other
        }
    }

    /// If self is None, this returns None. Otherwise, this calls the given function
    /// with the Some value contained within self, and returns the result of that call.
    ///
    /// In some languages this function is called \`flat_map\` or \`bind\`.
    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {
        if self._is_some {
            f(self._value)
        } else {
            Option::none()
        }
    }

    /// If self is Some, return self. Otherwise, return \`other\`.
    pub fn or(self, other: Self) -> Self {
        if self._is_some {
            self
        } else {
            other
        }
    }

    /// If self is Some, return self. Otherwise, return \`default()\`.
    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {
        if self._is_some {
            self
        } else {
            default()
        }
    }

    // If only one of the two Options is Some, return that option.
    // Otherwise, if both options are Some or both are None, None is returned.
    pub fn xor(self, other: Self) -> Self {
        if self._is_some {
            if other._is_some {
                Option::none()
            } else {
                self
            }
        } else if other._is_some {
            other
        } else {
            Option::none()
        }
    }

    /// Returns \`Some(x)\` if self is \`Some(x)\` and \`predicate(x)\` is true.
    /// Otherwise, this returns \`None\`
    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {
        if self._is_some {
            if predicate(self._value) {
                self
            } else {
                Option::none()
            }
        } else {
            Option::none()
        }
    }

    /// Flattens an Option<Option<T>> into a Option<T>.
    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.
    pub fn flatten(option: Option<Option<T>>) -> Option<T> {
        if option._is_some {
            option._value
        } else {
            Option::none()
        }
    }
}

impl<T> Default for Option<T> {
    fn default() -> Self {
        Option::none()
    }
}

impl<T> Eq for Option<T>
where
    T: Eq,
{
    fn eq(self, other: Self) -> bool {
        if self._is_some == other._is_some {
            if self._is_some {
                self._value == other._value
            } else {
                true
            }
        } else {
            false
        }
    }
}

impl<T> Hash for Option<T>
where
    T: Hash,
{
    fn hash<H>(self, state: &mut H)
    where
        H: Hasher,
    {
        self._is_some.hash(state);
        if self._is_some {
            self._value.hash(state);
        }
    }
}

// For this impl we're declaring Option::none < Option::some
impl<T> Ord for Option<T>
where
    T: Ord,
{
    fn cmp(self, other: Self) -> Ordering {
        if self._is_some {
            if other._is_some {
                self._value.cmp(other._value)
            } else {
                Ordering::greater()
            }
        } else if other._is_some {
            Ordering::less()
        } else {
            Ordering::equal()
        }
    }
}
`},43:{path:"std/panic.nr",source:`pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {
    assert(false, message);
    crate::mem::zeroed()
}
`},50:{path:"/Users/gabrielantonyxaviour/Developer/projects/gods-hand/aztec-contracts/src/main.nr",source:`use dep::aztec::macros::aztec;

#[aztec]
pub contract GodsHand {
    use dep::aztec::{
        macros::{
            functions::{initializer, internal, private, public, view},
            storage::storage,
        },
        prelude::{
            AztecAddress, Map, PublicMutable
        },
        protocol_types::traits::{Serialize, Hash, ToField},
        keys::getters::get_public_keys,
    };
    use std::meta::derive;

    // Struct for disaster info to make it serializable
    #[derive(Serialize)]
    pub struct DisasterInfo {
        title: Field,
        metadata: Field,
        amount: u64,
        creator: AztecAddress,
        active: bool,
    }

    #[storage]
    struct Storage<Context> {
        // Admin who can manage agents
        admin: PublicMutable<AztecAddress, Context>,
        
        // Mapping of authorized agents
        agents: Map<AztecAddress, PublicMutable<bool, Context>, Context>,
        
        // Disaster details stored separately
        disaster_titles: Map<Field, PublicMutable<Field, Context>, Context>,
        disaster_metadata: Map<Field, PublicMutable<Field, Context>, Context>,
        disaster_amounts: Map<Field, PublicMutable<u64, Context>, Context>,
        disaster_creators: Map<Field, PublicMutable<AztecAddress, Context>, Context>,
        disaster_active: Map<Field, PublicMutable<bool, Context>, Context>,
        
        // For this simplified version, we'll track donations publicly
        donation_count: Map<Field, PublicMutable<u64, Context>, Context>,
        vote_count: Map<Field, PublicMutable<u64, Context>, Context>,
        
        // Track unlocked funds per disaster per organization
        unlocked_funds: Map<Field, Map<AztecAddress, PublicMutable<u64, Context>, Context>, Context>,
    }

    #[public]
    #[initializer]
    fn constructor(admin: AztecAddress) {
        assert(!admin.is_zero(), "Invalid admin address");
        storage.admin.write(admin);
        storage.agents.at(admin).write(true);
    }

    #[public]
    fn add_agent(agent: AztecAddress) {
        assert(storage.admin.read().eq(context.msg_sender()), "Only admin can add agents");
        assert(!agent.is_zero(), "Invalid agent address");
        storage.agents.at(agent).write(true);
    }

    #[public]
    fn create_disaster(title: Field, metadata: Field, estimated_amount_required: u64) -> Field {
        let caller = context.msg_sender();
        assert(storage.agents.at(caller).read(), "Only authorized agents can create disasters");
        assert(estimated_amount_required > 0, "Estimated amount must be greater than 0");

        // Calculate disaster hash
        let disaster_hash = std::hash::pedersen_hash([
            title,
            metadata, 
            estimated_amount_required as Field,
            caller.to_field(),
            context.block_number() as Field
        ]);

        // Store disaster details
        storage.disaster_titles.at(disaster_hash).write(title);
        storage.disaster_metadata.at(disaster_hash).write(metadata);
        storage.disaster_amounts.at(disaster_hash).write(estimated_amount_required);
        storage.disaster_creators.at(disaster_hash).write(caller);
        storage.disaster_active.at(disaster_hash).write(true);
        storage.donation_count.at(disaster_hash).write(0);
        storage.vote_count.at(disaster_hash).write(0);

        disaster_hash
    }

    // Private function that calls public function to update state
    #[private]
    fn donate(disaster_hash: Field, amount: u64, chain: Field, token_address: Field) {
        assert(amount > 0, "Donation amount must be greater than 0");
        
        // Create nullifier to prevent double donations (optional privacy feature)
        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();
        let secret = context.request_nsk_app(msg_sender_npk_m_hash);
        let nullifier = std::hash::pedersen_hash([
            context.msg_sender().to_field(), 
            secret, 
            disaster_hash, 
            amount as Field
        ]);
        context.push_nullifier(nullifier);
        
        // Call public function to update donation count
        GodsHand::at(context.this_address())
            .increment_donation_count(disaster_hash)
            .enqueue(&mut context);
    }

    // Public internal function to increment donation count
    #[public]
    #[internal]
    fn increment_donation_count(disaster_hash: Field) {
        assert(storage.disaster_active.at(disaster_hash).read(), "Disaster is not active");
        let current_count = storage.donation_count.at(disaster_hash).read();
        storage.donation_count.at(disaster_hash).write(current_count + 1);
    }

    #[private]
    fn claim(disaster_hash: Field) {
        let caller = context.msg_sender();
        
        // Call public function to handle claim logic
        GodsHand::at(context.this_address())
            .process_claim(disaster_hash, caller)
            .enqueue(&mut context);
    }

    // Public internal function to process claims
    #[public]
    #[internal] 
    fn process_claim(disaster_hash: Field, claimer: AztecAddress) {
        assert(storage.disaster_active.at(disaster_hash).read(), "Disaster is not active");
        
        // Get the unlocked funds for this organization
        let unlocked_amount = storage.unlocked_funds.at(disaster_hash).at(claimer).read();
        assert(unlocked_amount > 0, "No funds available to claim");
        
        // Reset the unlocked funds to 0 after claiming
        storage.unlocked_funds.at(disaster_hash).at(claimer).write(0);
    }

    // Private vote function for anonymity
    #[private]
    fn vote(disaster_hash: Field, org_address: AztecAddress, vote_type: u8) {
        assert(vote_type <= 3, "Invalid vote type");
        assert(!org_address.is_zero(), "Invalid organization address");
        
        // Create nullifier to prevent double voting
        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();
        let secret = context.request_nsk_app(msg_sender_npk_m_hash);
        let nullifier = std::hash::pedersen_hash([
            context.msg_sender().to_field(),
            secret,
            disaster_hash,
            org_address.to_field(),
            vote_type as Field
        ]);
        context.push_nullifier(nullifier);
        
        // Call public function to increment vote count
        GodsHand::at(context.this_address())
            .increment_vote_count(disaster_hash)
            .enqueue(&mut context);
    }

    // Public internal function to increment vote count
    #[public]
    #[internal]
    fn increment_vote_count(disaster_hash: Field) {
        assert(storage.disaster_active.at(disaster_hash).read(), "Disaster is not active");
        let current_count = storage.vote_count.at(disaster_hash).read();
        storage.vote_count.at(disaster_hash).write(current_count + 1);
    }

    #[public]
    fn unlock_funds(disaster_hash: Field, org_address: AztecAddress, amount: u64) {
        let caller = context.msg_sender();
        assert(storage.agents.at(caller).read(), "Only authorized agents can unlock funds");
        assert(!org_address.is_zero(), "Invalid organization address");
        assert(amount > 0, "Amount must be greater than 0");

        // Verify disaster exists and is active
        assert(storage.disaster_active.at(disaster_hash).read(), "Disaster is not active");

        // Update unlocked funds
        let current_unlocked = storage.unlocked_funds.at(disaster_hash).at(org_address).read();
        storage.unlocked_funds.at(disaster_hash).at(org_address).write(current_unlocked + amount);
    }

    // View functions
    #[public]
    #[view]
    fn get_disaster_title(disaster_hash: Field) -> Field {
        storage.disaster_titles.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn get_disaster_metadata(disaster_hash: Field) -> Field {
        storage.disaster_metadata.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn get_disaster_amount(disaster_hash: Field) -> u64 {
        storage.disaster_amounts.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn get_disaster_creator(disaster_hash: Field) -> AztecAddress {
        storage.disaster_creators.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn is_disaster_active(disaster_hash: Field) -> bool {
        storage.disaster_active.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn is_agent(address: AztecAddress) -> bool {
        storage.agents.at(address).read()
    }

    #[public]
    #[view]
    fn get_admin() -> AztecAddress {
        storage.admin.read()
    }

    #[public]
    #[view]
    fn get_unlocked_funds(disaster_hash: Field, org_address: AztecAddress) -> u64 {
        storage.unlocked_funds.at(disaster_hash).at(org_address).read()
    }

    #[public]
    #[view]
    fn get_donation_count(disaster_hash: Field) -> u64 {
        storage.donation_count.at(disaster_hash).read()
    }

    #[public]
    #[view]
    fn get_vote_count(disaster_hash: Field) -> u64 {
        storage.vote_count.at(disaster_hash).read()
    }

    #[public]
    fn deactivate_disaster(disaster_hash: Field) {
        let caller = context.msg_sender();
        assert(storage.agents.at(caller).read(), "Only authorized agents can deactivate disasters");
        
        storage.disaster_active.at(disaster_hash).write(false);
    }

    #[public]
    #[view]
    fn get_disaster_info(disaster_hash: Field) -> DisasterInfo {
        DisasterInfo {
            title: storage.disaster_titles.at(disaster_hash).read(),
            metadata: storage.disaster_metadata.at(disaster_hash).read(),
            amount: storage.disaster_amounts.at(disaster_hash).read(),
            creator: storage.disaster_creators.at(disaster_hash).read(),
            active: storage.disaster_active.at(disaster_hash).read(),
        }
    }
}`},54:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",source:`use crate::oracle::capsules;
use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};

/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until
/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness
/// generation. All values are scoped per contract address, so external contracts cannot access them.
pub struct CapsuleArray<T> {
    contract_address: AztecAddress,
    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots
    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at
    /// slot 6, the second element (index 1) is at slot 7, and so on.
    base_slot: Field,
}

impl<T> CapsuleArray<T> {
    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in
    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to
    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.
    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {
        Self { contract_address, base_slot }
    }

    /// Returns the number of elements stored in the array.
    pub unconstrained fn len(self) -> u32 {
        // An uninitialized array defaults to a length of 0.
        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32
    }

    /// Stores a value at the end of the array.
    pub unconstrained fn push<let N: u32>(self, value: T)
    where
        T: Serialize<N>,
    {
        let current_length = self.len();

        // The slot corresponding to the index \`current_length\` is the first slot immediately after the end of the
        // array, which is where we want to place the new value.
        capsules::store(self.contract_address, self.slot_at(current_length), value);

        // Then we simply update the length.
        let new_length = current_length + 1;
        capsules::store(self.contract_address, self.base_slot, new_length);
    }

    /// Retrieves the value stored in the array at \`index\`. Throws if the index is out of bounds.
    pub unconstrained fn get<let N: u32>(self, index: u32) -> T
    where
        T: Deserialize<N>,
    {
        assert(index < self.len(), "Attempted to read past the length of a CapsuleArray");

        capsules::load(self.contract_address, self.slot_at(index)).unwrap()
    }

    /// Deletes the value stored in the array at \`index\`. Throws if the index is out of bounds.
    pub unconstrained fn remove(self, index: u32) {
        let current_length = self.len();
        assert(index < current_length, "Attempted to delete past the length of a CapsuleArray");

        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the
        // array past the removed element one slot backward so that we don't end up with a gap and preserve the
        // contiguous slots. We can skip this when deleting the last element however.
        if index != current_length - 1 {
            // The source and destination regions overlap, but \`copy\` supports this.
            capsules::copy(
                self.contract_address,
                self.slot_at(index + 1),
                self.slot_at(index),
                current_length - index - 1,
            );
        }

        // We can now delete the last element (which has either been copied to the slot immediately before it, or was
        // the element we meant to delete in the first place) and update the length.
        capsules::delete(self.contract_address, self.slot_at(current_length - 1));
        capsules::store(self.contract_address, self.base_slot, current_length - 1);
    }

    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which
    /// values are processed is arbitrary.
    ///
    /// It is safe to delete the current element (and only the current element) from inside the callback via \`remove\`:
    /// \`\`\`noir
    /// array.for_each(|index, value| {
    ///   if some_condition(value) {
    ///     array.remove(index); // safe only for this index
    ///   }
    /// }
    /// \`\`\`
    ///
    /// If all elements in the array need to iterated over and then removed, then using \`for_each\` results in optimal
    /// efficiency.
    ///
    /// It is **not** safe to push new elements into the array from inside the callback.
    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())
    where
        T: Deserialize<N>,
    {
        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current
        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays
        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes
        // unconditionally, resulting in a full clear) is a very common access pattern.
        //
        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change
        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last
        // element. This results in an optimal full clear since \`remove\` will be able to skip the \`capsules::copy\` call
        // to shift any elements past the deleted one (because there will be none).
        let mut i = self.len();
        while i > 0 {
            i -= 1;
            f(i, self.get(i));
        }
    }

    unconstrained fn slot_at(self, index: u32) -> Field {
        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first
        // element.
        self.base_slot + 1 + index as Field
    }
}

mod test {
    use crate::test::helpers::test_environment::TestEnvironment;
    use super::CapsuleArray;
    use protocol_types::address::AztecAddress;

    global SLOT: Field = 1230;

    unconstrained fn setup() -> AztecAddress {
        TestEnvironment::new().utility().this_address()
    }

    #[test]
    unconstrained fn empty_array() {
        let contract_address = setup();

        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);
        assert_eq(array.len(), 0);
    }

    #[test(should_fail_with = "Attempted to read past the length of a CapsuleArray")]
    unconstrained fn empty_array_read() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);
        let _: Field = array.get(0);
    }

    #[test]
    unconstrained fn array_push() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);
        array.push(5);

        assert_eq(array.len(), 1);
        assert_eq(array.get(0), 5);
    }

    #[test(should_fail_with = "Attempted to read past the length of a CapsuleArray")]
    unconstrained fn read_past_len() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);
        array.push(5);

        let _ = array.get(1);
    }

    #[test]
    unconstrained fn array_remove_last() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(5);
        array.remove(0);

        assert_eq(array.len(), 0);
    }

    #[test]
    unconstrained fn array_remove_some() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(7);
        array.push(8);
        array.push(9);

        assert_eq(array.len(), 3);
        assert_eq(array.get(0), 7);
        assert_eq(array.get(1), 8);
        assert_eq(array.get(2), 9);

        array.remove(1);

        assert_eq(array.len(), 2);
        assert_eq(array.get(0), 7);
        assert_eq(array.get(1), 9);
    }

    #[test]
    unconstrained fn array_remove_all() {
        let contract_address = setup();

        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(7);
        array.push(8);
        array.push(9);

        array.remove(1);
        array.remove(1);
        array.remove(0);

        assert_eq(array.len(), 0);
    }

    #[test]
    unconstrained fn for_each_called_with_all_elements() {
        let contract_address = setup();
        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(4);
        array.push(5);
        array.push(6);

        // We store all values that we were called with and check that all (value, index) tuples are present. Note that
        // we do not care about the order in which each tuple was passed to the closure.
        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();
        array.for_each(|index, value| { called_with.push((index, value)); });

        assert_eq(called_with.len(), 3);
        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));
        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));
        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));
    }

    #[test]
    unconstrained fn for_each_remove_some() {
        let contract_address = setup();
        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(4);
        array.push(5);
        array.push(6);

        array.for_each(|index, _| {
            if index == 1 {
                array.remove(index);
            }
        });

        assert_eq(array.len(), 2);
        assert_eq(array.get(0), 4);
        assert_eq(array.get(1), 6);
    }

    #[test]
    unconstrained fn for_each_remove_all() {
        let contract_address = setup();
        let array = CapsuleArray::at(contract_address, SLOT);

        array.push(4);
        array.push(5);
        array.push(6);

        array.for_each(|index, _| { array.remove(index); });

        assert_eq(array.len(), 0);
    }

    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.
    // #[test]
    // unconstrained fn for_each_remove_all_no_copy() {
    //     let contract_address = setup();
    //     let array = CapsuleArray::at(contract_address, SLOT);

    //     array.push(4);
    //     array.push(5);
    //     array.push(6);

    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.
    //     let mock = OracleMock::mock("copyCapsule");

    //     array.for_each(|index, _| {
    //         array.remove(index);
    //     });

    //     assert_eq(mock.count(), 0);
    // }
}
`},55:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",source:`use dep::protocol_types::{
    abis::function_selector::FunctionSelector,
    address::AztecAddress,
    traits::{Deserialize, ToField},
};

use crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};

use crate::hash::{hash_args, hash_calldata};
use crate::oracle::execution_cache;

pub trait CallInterface<let N: u32> {
    fn get_args(self) -> [Field];
    fn get_selector(self) -> FunctionSelector;
    fn get_name(self) -> str<N>;
    fn get_contract_address(self) -> AztecAddress;
    fn get_is_static(self) -> bool;
}

// PrivateCallInterface

pub struct PrivateCallInterface<let N: u32, T> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: T,
    is_static: bool,
}

impl<let N: u32, T> PrivateCallInterface<N, T> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
        is_static: bool,
    ) -> Self {
        let args_hash = hash_args(args);
        Self {
            target_contract,
            selector,
            name,
            args_hash,
            args,
            return_type: std::mem::zeroed(),
            is_static,
        }
    }

    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T
    where
        T: Deserialize<M>,
    {
        execution_cache::store(self.args, self.args_hash);
        let returns_hash = context.call_private_function_with_args_hash(
            self.target_contract,
            self.selector,
            self.args_hash,
            false,
        );
        let returns: T = returns_hash.get_preimage();
        returns
    }

    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T
    where
        T: Deserialize<M>,
    {
        execution_cache::store(self.args, self.args_hash);
        let returns_hash = context.call_private_function_with_args_hash(
            self.target_contract,
            self.selector,
            self.args_hash,
            true,
        );
        returns_hash.get_preimage()
    }
}

impl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PrivateVoidCallInterface

pub struct PrivateVoidCallInterface<let N: u32> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)
    is_static: bool,
}

impl<let N: u32> PrivateVoidCallInterface<N> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
        is_static: bool,
    ) -> Self {
        let args_hash = hash_args(args);
        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }
    }

    pub fn call(self, context: &mut PrivateContext) {
        execution_cache::store(self.args, self.args_hash);
        context
            .call_private_function_with_args_hash(
                self.target_contract,
                self.selector,
                self.args_hash,
                false,
            )
            .assert_empty();
    }

    pub fn view(self, context: &mut PrivateContext) {
        execution_cache::store(self.args, self.args_hash);
        context
            .call_private_function_with_args_hash(
                self.target_contract,
                self.selector,
                self.args_hash,
                true,
            )
            .assert_empty();
    }
}

impl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PrivateStaticCallInterface

pub struct PrivateStaticCallInterface<let N: u32, T> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: T,
    is_static: bool,
}

impl<let N: u32, T> PrivateStaticCallInterface<N, T> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        let args_hash = hash_args(args);
        Self {
            target_contract,
            selector,
            name,
            args_hash,
            args,
            return_type: std::mem::zeroed(),
            is_static: true,
        }
    }

    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T
    where
        T: Deserialize<M>,
    {
        execution_cache::store(self.args, self.args_hash);
        let returns = context.call_private_function_with_args_hash(
            self.target_contract,
            self.selector,
            self.args_hash,
            true,
        );
        returns.get_preimage()
    }
}

impl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PrivateStaticVoidCallInterface

pub struct PrivateStaticVoidCallInterface<let N: u32> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)
    is_static: bool,
}

impl<let N: u32> PrivateStaticVoidCallInterface<N> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        let args_hash = hash_args(args);
        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }
    }

    pub fn view(self, context: &mut PrivateContext) {
        execution_cache::store(self.args, self.args_hash);
        context
            .call_private_function_with_args_hash(
                self.target_contract,
                self.selector,
                self.args_hash,
                true,
            )
            .assert_empty();
    }
}

impl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PublicCallInterface

pub struct PublicCallInterface<let N: u32, T> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args: [Field],
    gas_opts: GasOpts,
    return_type: T,
    is_static: bool,
}

impl<let N: u32, T> PublicCallInterface<N, T> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
        is_static: bool,
    ) -> Self {
        Self {
            target_contract,
            selector,
            name,
            args,
            gas_opts: GasOpts::default(),
            return_type: std::mem::zeroed(),
            is_static,
        }
    }

    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {
        self.gas_opts = gas_opts;
        self
    }

    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T
    where
        T: Deserialize<M>,
    {
        let returns = context.call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        Deserialize::deserialize(returns.as_array::<M>())
    }

    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T
    where
        T: Deserialize<M>,
    {
        let returns = context.static_call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        Deserialize::deserialize(returns.as_array::<M>())
    }

    pub fn enqueue(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            false,
        )
    }

    pub fn enqueue_view(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            true,
        )
    }
}

impl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PublicVoidCallInterface

pub struct PublicVoidCallInterface<let N: u32> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args: [Field],
    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)
    is_static: bool,
    gas_opts: GasOpts,
}

impl<let N: u32> PublicVoidCallInterface<N> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
        is_static: bool,
    ) -> Self {
        Self {
            target_contract,
            selector,
            name,
            args,
            return_type: (),
            is_static,
            gas_opts: GasOpts::default(),
        }
    }

    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {
        self.gas_opts = gas_opts;
        self
    }

    pub unconstrained fn call(self, context: &mut PublicContext) {
        let returns = context.call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        assert(returns.len() == 0);
    }

    pub unconstrained fn view(self, context: &mut PublicContext) {
        let returns = context.static_call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        assert(returns.len() == 0);
    }

    pub fn enqueue(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            false,
        )
    }

    pub fn enqueue_view(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            true,
        )
    }

    pub fn set_as_teardown(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.set_public_teardown_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            false,
        )
    }
}

impl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PublicStaticCallInterface

pub struct PublicStaticCallInterface<let N: u32, T> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args: [Field],
    return_type: T,
    is_static: bool,
    gas_opts: GasOpts,
}

impl<let N: u32, T> PublicStaticCallInterface<N, T> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        Self {
            target_contract,
            selector,
            name,
            args,
            return_type: std::mem::zeroed(),
            is_static: true,
            gas_opts: GasOpts::default(),
        }
    }

    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {
        self.gas_opts = gas_opts;
        self
    }

    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T
    where
        T: Deserialize<M>,
    {
        let returns = context.static_call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        Deserialize::deserialize(returns.as_array::<M>())
    }

    pub fn enqueue_view(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            true,
        )
    }
}

impl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// PublicStaticVoidCallInterface

pub struct PublicStaticVoidCallInterface<let N: u32> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args: [Field],
    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)
    is_static: bool,
    gas_opts: GasOpts,
}

impl<let N: u32> PublicStaticVoidCallInterface<N> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        Self {
            target_contract,
            selector,
            name,
            args,
            return_type: (),
            is_static: true,
            gas_opts: GasOpts::default(),
        }
    }

    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {
        self.gas_opts = gas_opts;
        self
    }

    pub unconstrained fn view(self, context: &mut PublicContext) {
        let returns = context.static_call_public_function(
            self.target_contract,
            self.selector,
            self.args,
            self.gas_opts,
        );
        assert(returns.len() == 0);
    }

    pub fn enqueue_view(self, context: &mut PrivateContext) {
        let calldata = self.args.push_front(self.selector.to_field());
        let calldata_hash = hash_calldata(calldata);
        execution_cache::store(calldata, calldata_hash);
        context.call_public_function_with_calldata_hash(
            self.target_contract,
            calldata_hash,
            /*static=*/
            true,
        )
    }
}

impl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {
    fn get_args(self) -> [Field] {
        self.args
    }

    fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    fn get_name(self) -> str<N> {
        self.name
    }

    fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }

    fn get_is_static(self) -> bool {
        self.is_static
    }
}

// UtilityCallInterface

pub struct UtilityCallInterface<let N: u32, T> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: T,
}

impl<let N: u32, T> UtilityCallInterface<N, T> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        let args_hash = hash_args(args);
        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }
    }

    pub fn get_args(self) -> [Field] {
        self.args
    }

    pub fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    pub fn get_name(self) -> str<N> {
        self.name
    }

    pub fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }
}

// UtilityVoidCallInterface

pub struct UtilityVoidCallInterface<let N: u32> {
    target_contract: AztecAddress,
    selector: FunctionSelector,
    name: str<N>,
    args_hash: Field,
    args: [Field],
    return_type: (),
}

impl<let N: u32> UtilityVoidCallInterface<N> {
    pub fn new(
        target_contract: AztecAddress,
        selector: FunctionSelector,
        name: str<N>,
        args: [Field],
    ) -> Self {
        let args_hash = hash_args(args);
        Self { target_contract, selector, name, args_hash, args, return_type: () }
    }

    pub fn get_args(self) -> [Field] {
        self.args
    }

    pub fn get_selector(self) -> FunctionSelector {
        self.selector
    }

    pub fn get_name(self) -> str<N> {
        self.name
    }

    pub fn get_contract_address(self) -> AztecAddress {
        self.target_contract
    }
}
`},62:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/private_context.nr",source:`use crate::{
    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},
    hash::{ArgsHasher, hash_args_array, hash_calldata_array},
    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},
    messaging::process_l1_to_l2_message,
    oracle::{
        block_header::get_block_header_at,
        call_private_function::call_private_function_internal,
        enqueue_public_function_call::{
            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,
            notify_set_public_teardown_function_call,
        },
        execution_cache,
        key_validation_request::get_key_validation_request,
        notes::{notify_created_nullifier, notify_nullified_note},
    },
};
use dep::protocol_types::{
    abis::{
        call_context::CallContext,
        function_selector::FunctionSelector,
        gas_settings::GasSettings,
        log_hash::LogHash,
        max_block_number::MaxBlockNumber,
        note_hash::NoteHash,
        nullifier::Nullifier,
        private_call_request::PrivateCallRequest,
        private_circuit_public_inputs::PrivateCircuitPublicInputs,
        private_log::{PrivateLog, PrivateLogData},
        public_call_request::PublicCallRequest,
        read_request::ReadRequest,
        side_effect::Counted,
        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},
    },
    address::{AztecAddress, EthAddress},
    block_header::BlockHeader,
    constants::{
        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,
        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,
        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,
        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,
        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,
        PRIVATE_LOG_SIZE_IN_FIELDS,
    },
    messaging::l2_to_l1_message::L2ToL1Message,
    traits::{Empty, Hash, ToField},
    utils::arrays::array_concat,
};

// When finished, one can call .finish() to convert back to the abi
pub struct PrivateContext {
    // docs:start:private-context
    pub inputs: PrivateContextInputs,
    pub side_effect_counter: u32,

    pub min_revertible_side_effect_counter: u32,
    pub is_fee_payer: bool,

    pub args_hash: Field,
    pub return_hash: Field,

    pub max_block_number: MaxBlockNumber,

    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,
    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,
    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,

    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,
    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,

    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,
    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,
    pub public_teardown_call_request: PublicCallRequest,
    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,
    // docs:end:private-context

    // Header of a block whose state is used during private execution (not the block the transaction is included in).
    pub historical_header: BlockHeader,

    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,
    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,

    // Contains the last key validation request for each key type. This is used to cache the last request and avoid
    // fetching the same request multiple times.
    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).
    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],
}

impl PrivateContext {
    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {
        PrivateContext {
            inputs,
            side_effect_counter: inputs.start_side_effect_counter + 1,
            min_revertible_side_effect_counter: 0,
            is_fee_payer: false,
            args_hash,
            return_hash: 0,
            max_block_number: MaxBlockNumber::empty(),
            note_hash_read_requests: BoundedVec::new(),
            nullifier_read_requests: BoundedVec::new(),
            key_validation_requests_and_generators: BoundedVec::new(),
            note_hashes: BoundedVec::new(),
            nullifiers: BoundedVec::new(),
            historical_header: inputs.historical_header,
            private_call_requests: BoundedVec::new(),
            public_call_requests: BoundedVec::new(),
            public_teardown_call_request: PublicCallRequest::empty(),
            l2_to_l1_msgs: BoundedVec::new(),
            private_logs: BoundedVec::new(),
            contract_class_logs_hashes: BoundedVec::new(),
            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],
        }
    }

    pub fn msg_sender(self) -> AztecAddress {
        self.inputs.call_context.msg_sender
    }

    pub fn this_address(self) -> AztecAddress {
        self.inputs.call_context.contract_address
    }

    pub fn chain_id(self) -> Field {
        self.inputs.tx_context.chain_id
    }

    pub fn version(self) -> Field {
        self.inputs.tx_context.version
    }

    pub fn gas_settings(self) -> GasSettings {
        self.inputs.tx_context.gas_settings
    }

    pub fn selector(self) -> FunctionSelector {
        self.inputs.call_context.function_selector
    }

    pub fn get_args_hash(self) -> Field {
        self.args_hash
    }

    pub fn push_note_hash(&mut self, note_hash: Field) {
        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });
    }

    pub fn push_nullifier(&mut self, nullifier: Field) {
        notify_created_nullifier(nullifier);
        self.nullifiers.push(
            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },
        );
    }

    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {
        let nullifier_counter = self.next_counter();
        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);
        self.nullifiers.push(
            Nullifier {
                value: nullifier,
                note_hash: nullified_note_hash,
                counter: nullifier_counter,
            },
        );
    }

    // Returns the header of a block whose state is used during private execution (not the block the transaction is
    // included in).
    pub fn get_block_header(self) -> BlockHeader {
        self.historical_header
    }

    // Returns the header of an arbitrary block whose block number is less than or equal to the block number
    // of historical header.
    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {
        get_block_header_at(block_number, self)
    }

    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {
        self.return_hash = returns_hasher.hash();
        execution_cache::store(returns_hasher.fields, self.return_hash);
    }

    pub fn finish(self) -> PrivateCircuitPublicInputs {
        PrivateCircuitPublicInputs {
            call_context: self.inputs.call_context,
            args_hash: self.args_hash,
            returns_hash: self.return_hash,
            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,
            is_fee_payer: self.is_fee_payer,
            max_block_number: self.max_block_number,
            note_hash_read_requests: self.note_hash_read_requests.storage(),
            nullifier_read_requests: self.nullifier_read_requests.storage(),
            key_validation_requests_and_generators: self
                .key_validation_requests_and_generators
                .storage(),
            note_hashes: self.note_hashes.storage(),
            nullifiers: self.nullifiers.storage(),
            private_call_requests: self.private_call_requests.storage(),
            public_call_requests: self.public_call_requests.storage(),
            public_teardown_call_request: self.public_teardown_call_request,
            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),
            start_side_effect_counter: self.inputs.start_side_effect_counter,
            end_side_effect_counter: self.side_effect_counter,
            private_logs: self.private_logs.storage(),
            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),
            historical_header: self.historical_header,
            tx_context: self.inputs.tx_context,
        }
    }

    pub fn set_as_fee_payer(&mut self) {
        dep::protocol_types::debug_log::debug_log_format(
            "Setting {0} as fee payer",
            [self.this_address().to_field()],
        );
        self.is_fee_payer = true;
    }

    pub fn end_setup(&mut self) {
        // dep::protocol_types::debug_log::debug_log_format(
        //     "Ending setup at counter {0}",
        //     [self.side_effect_counter as Field]
        // );
        self.min_revertible_side_effect_counter = self.side_effect_counter;
        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);
    }

    // docs:start:max-block-number
    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {
        // docs:end:max-block-number
        self.max_block_number =
            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);
    }

    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {
        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };
        self.note_hash_read_requests.push(side_effect);
    }

    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {
        let request = ReadRequest { value: nullifier, counter: self.next_counter() };
        self.nullifier_read_requests.push(request);
    }

    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {
        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)
    }

    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {
        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)
    }

    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {
        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(
            KeyValidationRequest::empty(),
        );

        if cached_request.pk_m.hash() == pk_m_hash {
            // We get a match so the cached request is the latest one
            cached_request.sk_app
        } else {
            // We didn't get a match meaning the cached result is stale
            // Typically we'd validate keys by showing that they are the preimage of \`pk_m_hash\`, but that'd require
            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn
            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to
            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes
            // to \`pk_m_hash\`.

            // Safety: Kernels verify that the key validation request is valid and below we verify that a request
            // for the correct public key has been received.
            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };
            assert_eq(request.pk_m.hash(), pk_m_hash, "Obtained invalid key validation request");

            self.key_validation_requests_and_generators.push(
                KeyValidationRequestAndGenerator {
                    request,
                    sk_app_generator: sk_generators[key_index as u32],
                },
            );
            self.last_key_validation_requests[key_index as u32] = Option::some(request);
            request.sk_app
        }
    }

    // docs:start:context_message_portal
    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {
        // docs:end:context_message_portal
        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };
        self.l2_to_l1_msgs.push(message);
    }

    // docs:start:context_consume_l1_to_l2_message
    // docs:start:consume_l1_to_l2_message
    pub fn consume_l1_to_l2_message(
        &mut self,
        content: Field,
        secret: Field,
        sender: EthAddress,
        leaf_index: Field,
    ) {
        // docs:end:context_consume_l1_to_l2_message
        let nullifier = process_l1_to_l2_message(
            self.historical_header.state.l1_to_l2_message_tree.root,
            self.this_address(),
            sender,
            self.chain_id(),
            self.version(),
            content,
            secret,
            leaf_index,
        );

        // Push nullifier (and the "commitment" corresponding to this can be "empty")
        self.push_nullifier(nullifier)
    }
    // docs:end:consume_l1_to_l2_message

    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {
        let counter = self.next_counter();
        let private_log =
            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };
        self.private_logs.push(private_log);
    }

    pub fn emit_raw_note_log(
        &mut self,
        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],
        length: u32,
        note_hash_counter: u32,
    ) {
        let counter = self.next_counter();
        let private_log =
            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };
        self.private_logs.push(private_log);
    }

    pub fn call_private_function<let ARGS_COUNT: u32>(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field; ARGS_COUNT],
    ) -> ReturnsHash {
        let args_hash = hash_args_array(args);
        execution_cache::store(args, args_hash);
        self.call_private_function_with_args_hash(
            contract_address,
            function_selector,
            args_hash,
            false,
        )
    }

    pub fn static_call_private_function<let ARGS_COUNT: u32>(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field; ARGS_COUNT],
    ) -> ReturnsHash {
        let args_hash = hash_args_array(args);
        execution_cache::store(args, args_hash);
        self.call_private_function_with_args_hash(
            contract_address,
            function_selector,
            args_hash,
            true,
        )
    }

    pub fn call_private_function_no_args(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
    ) -> ReturnsHash {
        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)
    }

    pub fn static_call_private_function_no_args(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
    ) -> ReturnsHash {
        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)
    }

    pub fn call_private_function_with_args_hash(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args_hash: Field,
        is_static_call: bool,
    ) -> ReturnsHash {
        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;
        let start_side_effect_counter = self.side_effect_counter;

        // Safety: The oracle simulates the private call and returns the value of the side effects counter after
        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is
        // the number of side effects that took place), along with the hash of the return values. We validate these
        // by requesting a private kernel iteration in which the return values are constrained to hash
        // to \`returns_hash\` and the side effects counter to increment from start to end.
        let (end_side_effect_counter, returns_hash) = unsafe {
            call_private_function_internal(
                contract_address,
                function_selector,
                args_hash,
                start_side_effect_counter,
                is_static_call,
            )
        };

        self.private_call_requests.push(
            PrivateCallRequest {
                call_context: CallContext {
                    msg_sender: self.this_address(),
                    contract_address,
                    function_selector,
                    is_static_call,
                },
                args_hash,
                returns_hash,
                start_side_effect_counter,
                end_side_effect_counter,
            },
        );

        // TODO (fees) figure out why this crashes the prover and enable it
        // we need this in order to pay fees inside child call contexts
        // assert(
        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)
        //     | (item.public_inputs.min_revertible_side_effect_counter
        //         > self.min_revertible_side_effect_counter)
        // );
        // if item.public_inputs.min_revertible_side_effect_counter
        //     > self.min_revertible_side_effect_counter {
        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;
        // }
        self.side_effect_counter = end_side_effect_counter + 1;
        ReturnsHash::new(returns_hash)
    }

    pub fn call_public_function<let ARGS_COUNT: u32>(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field; ARGS_COUNT],
    ) {
        let calldata = array_concat([function_selector.to_field()], args);
        let calldata_hash = hash_calldata_array(calldata);
        execution_cache::store(calldata, calldata_hash);
        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)
    }

    pub fn static_call_public_function<let ARGS_COUNT: u32>(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field; ARGS_COUNT],
    ) {
        let calldata = array_concat([function_selector.to_field()], args);
        let calldata_hash = hash_calldata_array(calldata);
        execution_cache::store(calldata, calldata_hash);
        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)
    }

    pub fn call_public_function_no_args(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
    ) {
        let calldata_hash = hash_calldata_array([function_selector.to_field()]);
        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)
    }

    pub fn static_call_public_function_no_args(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
    ) {
        let calldata_hash = hash_calldata_array([function_selector.to_field()]);
        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)
    }

    pub fn call_public_function_with_calldata_hash(
        &mut self,
        contract_address: AztecAddress,
        calldata_hash: Field,
        is_static_call: bool,
    ) {
        let counter = self.next_counter();

        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;

        notify_enqueued_public_function_call(
            contract_address,
            calldata_hash,
            counter,
            is_static_call,
        );

        let call_request = PublicCallRequest {
            msg_sender: self.this_address(),
            contract_address,
            is_static_call,
            calldata_hash,
        };

        self.public_call_requests.push(Counted::new(call_request, counter));
    }

    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(
        &mut self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field; ARGS_COUNT],
    ) {
        let calldata = array_concat([function_selector.to_field()], args);
        let calldata_hash = hash_calldata_array(calldata);
        execution_cache::store(calldata, calldata_hash);
        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)
    }

    pub fn set_public_teardown_function_with_calldata_hash(
        &mut self,
        contract_address: AztecAddress,
        calldata_hash: Field,
        is_static_call: bool,
    ) {
        let counter = self.next_counter();

        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;

        notify_set_public_teardown_function_call(
            contract_address,
            calldata_hash,
            counter,
            is_static_call,
        );

        self.public_teardown_call_request = PublicCallRequest {
            msg_sender: self.this_address(),
            contract_address,
            is_static_call,
            calldata_hash,
        };
    }

    fn next_counter(&mut self) -> u32 {
        let counter = self.side_effect_counter;
        self.side_effect_counter += 1;
        counter
    }
}

impl Empty for PrivateContext {
    fn empty() -> Self {
        PrivateContext {
            inputs: PrivateContextInputs::empty(),
            side_effect_counter: 0 as u32,
            min_revertible_side_effect_counter: 0 as u32,
            is_fee_payer: false,
            args_hash: 0,
            return_hash: 0,
            max_block_number: MaxBlockNumber::empty(),
            note_hash_read_requests: BoundedVec::new(),
            nullifier_read_requests: BoundedVec::new(),
            key_validation_requests_and_generators: BoundedVec::new(),
            note_hashes: BoundedVec::new(),
            nullifiers: BoundedVec::new(),
            private_call_requests: BoundedVec::new(),
            public_call_requests: BoundedVec::new(),
            public_teardown_call_request: PublicCallRequest::empty(),
            l2_to_l1_msgs: BoundedVec::new(),
            historical_header: BlockHeader::empty(),
            private_logs: BoundedVec::new(),
            contract_class_logs_hashes: BoundedVec::new(),
            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],
        }
    }
}
`},63:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/public_context.nr",source:`use crate::context::gas::GasOpts;
use crate::hash::{
    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,
};
use dep::protocol_types::abis::function_selector::FunctionSelector;
use dep::protocol_types::address::{AztecAddress, EthAddress};
use dep::protocol_types::constants::MAX_FIELD_VALUE;
use dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};

pub struct PublicContext {
    pub args_hash: Option<Field>,
    pub compute_args_hash: fn() -> Field,
}

impl PublicContext {
    pub fn new(compute_args_hash: fn() -> Field) -> Self {
        PublicContext { args_hash: Option::none(), compute_args_hash }
    }

    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)
    where
        T: Serialize<N>,
    {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };
    }

    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { note_hash_exists(note_hash, leaf_index) } == 1
    }

    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1
    }

    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1
    }

    pub fn consume_l1_to_l2_message(
        &mut self,
        content: Field,
        secret: Field,
        sender: EthAddress,
        leaf_index: Field,
    ) {
        let secret_hash = compute_secret_hash(secret);
        let message_hash = compute_l1_to_l2_message_hash(
            sender,
            self.chain_id(),
            /*recipient=*/
            self.this_address(),
            self.version(),
            content,
            secret_hash,
            leaf_index,
        );
        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);

        assert(
            !self.nullifier_exists(nullifier, self.this_address()),
            "L1-to-L2 message is already nullified",
        );
        assert(
            self.l1_to_l2_msg_exists(message_hash, leaf_index),
            "Tried to consume nonexistent L1-to-L2 message",
        );

        self.push_nullifier(nullifier);
    }

    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { send_l2_to_l1_msg(recipient, content) };
    }

    pub unconstrained fn call_public_function(
        _self: &mut Self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field],
        gas_opts: GasOpts,
    ) -> [Field] {
        let calldata = args.push_front(function_selector.to_field());

        call(
            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),
            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),
            contract_address,
            calldata,
        );
        // Use success_copy to determine whether the call succeeded
        let success = success_copy();

        let result_data = returndata_copy(0, returndata_size());
        if !success {
            // Rethrow the revert data.
            avm_revert(result_data);
        }
        result_data
    }

    pub unconstrained fn static_call_public_function(
        _self: &mut Self,
        contract_address: AztecAddress,
        function_selector: FunctionSelector,
        args: [Field],
        gas_opts: GasOpts,
    ) -> [Field] {
        let calldata = args.push_front(function_selector.to_field());

        call_static(
            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),
            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),
            contract_address,
            calldata,
        );
        // Use success_copy to determine whether the call succeeded
        let success = success_copy();

        let result_data = returndata_copy(0, returndata_size());
        if !success {
            // Rethrow the revert data.
            avm_revert(result_data);
        }
        result_data
    }

    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { emit_note_hash(note_hash) };
    }
    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { emit_nullifier(nullifier) };
    }

    pub fn this_address(_self: Self) -> AztecAddress {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            address()
        }
    }
    pub fn msg_sender(_self: Self) -> AztecAddress {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            sender()
        }
    }
    pub fn selector(_self: Self) -> FunctionSelector {
        // The selector is the first element of the calldata when calling a public function through dispatch.
        // Safety: AVM opcodes are constrained by the AVM itself
        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };
        FunctionSelector::from_field(raw_selector[0])
    }
    pub fn get_args_hash(mut self) -> Field {
        if !self.args_hash.is_some() {
            self.args_hash = Option::some((self.compute_args_hash)());
        }

        self.args_hash.unwrap_unchecked()
    }
    pub fn transaction_fee(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            transaction_fee()
        }
    }

    pub fn chain_id(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            chain_id()
        }
    }
    pub fn version(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            version()
        }
    }
    pub fn block_number(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            block_number()
        }
    }
    pub fn timestamp(_self: Self) -> u64 {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            timestamp()
        }
    }
    pub fn fee_per_l2_gas(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            fee_per_l2_gas()
        }
    }
    pub fn fee_per_da_gas(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            fee_per_da_gas()
        }
    }

    pub fn l2_gas_left(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            l2_gas_left()
        }
    }
    pub fn da_gas_left(_self: Self) -> Field {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe {
            da_gas_left()
        }
    }
    pub fn is_static_call(_self: Self) -> bool {
        // Safety: AVM opcodes are constrained by the AVM itself
        unsafe { is_static_call() } == 1
    }

    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {
        let mut out = [0; N];
        for i in 0..N {
            // Safety: AVM opcodes are constrained by the AVM itself
            out[i] = unsafe { storage_read(storage_slot + i as Field) };
        }
        out
    }

    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T
    where
        T: Packable<N>,
    {
        T::unpack(self.raw_storage_read(storage_slot))
    }

    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {
        for i in 0..N {
            // Safety: AVM opcodes are constrained by the AVM itself
            unsafe { storage_write(storage_slot + i as Field, values[i]) };
        }
    }

    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)
    where
        T: Packable<N>,
    {
        self.raw_storage_write(storage_slot, value.pack());
    }
}

// Unconstrained opcode wrappers (do not use directly).
unconstrained fn address() -> AztecAddress {
    address_opcode()
}
unconstrained fn sender() -> AztecAddress {
    sender_opcode()
}
unconstrained fn transaction_fee() -> Field {
    transaction_fee_opcode()
}
unconstrained fn chain_id() -> Field {
    chain_id_opcode()
}
unconstrained fn version() -> Field {
    version_opcode()
}
unconstrained fn block_number() -> Field {
    block_number_opcode()
}
unconstrained fn timestamp() -> u64 {
    timestamp_opcode()
}
unconstrained fn fee_per_l2_gas() -> Field {
    fee_per_l2_gas_opcode()
}
unconstrained fn fee_per_da_gas() -> Field {
    fee_per_da_gas_opcode()
}
unconstrained fn l2_gas_left() -> Field {
    l2_gas_left_opcode()
}
unconstrained fn da_gas_left() -> Field {
    da_gas_left_opcode()
}
unconstrained fn is_static_call() -> Field {
    is_static_call_opcode()
}
unconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {
    note_hash_exists_opcode(note_hash, leaf_index)
}
unconstrained fn emit_note_hash(note_hash: Field) {
    emit_note_hash_opcode(note_hash)
}
unconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {
    nullifier_exists_opcode(nullifier, address)
}
unconstrained fn emit_nullifier(nullifier: Field) {
    emit_nullifier_opcode(nullifier)
}
unconstrained fn emit_public_log(message: [Field]) {
    emit_public_log_opcode(message)
}
unconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {
    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)
}
unconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {
    send_l2_to_l1_msg_opcode(recipient, content)
}
unconstrained fn call(
    l2_gas_allocation: Field,
    da_gas_allocation: Field,
    address: AztecAddress,
    args: [Field],
) {
    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)
}

unconstrained fn call_static(
    l2_gas_allocation: Field,
    da_gas_allocation: Field,
    address: AztecAddress,
    args: [Field],
) {
    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)
}

pub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {
    calldata_copy_opcode(cdoffset, copy_size)
}

// \`success_copy\` is placed immediately after the CALL opcode to get the success value
unconstrained fn success_copy() -> bool {
    success_copy_opcode()
}

unconstrained fn returndata_size() -> u32 {
    returndata_size_opcode()
}

unconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {
    returndata_copy_opcode(rdoffset, copy_size)
}

pub unconstrained fn avm_return(returndata: [Field]) {
    return_opcode(returndata)
}

// This opcode reverts using the exact data given. In general it should only be used
// to do rethrows, where the revert data is the same as the original revert data.
// For normal reverts, use Noir's \`assert\` which, on top of reverting, will also add
// an error selector to the revert data.
unconstrained fn avm_revert(revertdata: [Field]) {
    revert_opcode(revertdata)
}

unconstrained fn storage_read(storage_slot: Field) -> Field {
    storage_read_opcode(storage_slot)
}

unconstrained fn storage_write(storage_slot: Field, value: Field) {
    storage_write_opcode(storage_slot, value);
}

impl Empty for PublicContext {
    fn empty() -> Self {
        PublicContext::new(|| 0)
    }
}

// AVM oracles (opcodes) follow, do not use directly.
#[oracle(avmOpcodeAddress)]
unconstrained fn address_opcode() -> AztecAddress {}

#[oracle(avmOpcodeSender)]
unconstrained fn sender_opcode() -> AztecAddress {}

#[oracle(avmOpcodeTransactionFee)]
unconstrained fn transaction_fee_opcode() -> Field {}

#[oracle(avmOpcodeChainId)]
unconstrained fn chain_id_opcode() -> Field {}

#[oracle(avmOpcodeVersion)]
unconstrained fn version_opcode() -> Field {}

#[oracle(avmOpcodeBlockNumber)]
unconstrained fn block_number_opcode() -> Field {}

#[oracle(avmOpcodeTimestamp)]
unconstrained fn timestamp_opcode() -> u64 {}

#[oracle(avmOpcodeFeePerL2Gas)]
unconstrained fn fee_per_l2_gas_opcode() -> Field {}

#[oracle(avmOpcodeFeePerDaGas)]
unconstrained fn fee_per_da_gas_opcode() -> Field {}

#[oracle(avmOpcodeL2GasLeft)]
unconstrained fn l2_gas_left_opcode() -> Field {}

#[oracle(avmOpcodeDaGasLeft)]
unconstrained fn da_gas_left_opcode() -> Field {}

#[oracle(avmOpcodeIsStaticCall)]
unconstrained fn is_static_call_opcode() -> Field {}

#[oracle(avmOpcodeNoteHashExists)]
unconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}

#[oracle(avmOpcodeEmitNoteHash)]
unconstrained fn emit_note_hash_opcode(note_hash: Field) {}

#[oracle(avmOpcodeNullifierExists)]
unconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}

#[oracle(avmOpcodeEmitNullifier)]
unconstrained fn emit_nullifier_opcode(nullifier: Field) {}

// TODO(#11124): rename unencrypted to public in avm
#[oracle(avmOpcodeEmitUnencryptedLog)]
unconstrained fn emit_public_log_opcode(message: [Field]) {}

#[oracle(avmOpcodeL1ToL2MsgExists)]
unconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}

#[oracle(avmOpcodeSendL2ToL1Msg)]
unconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}

#[oracle(avmOpcodeCalldataCopy)]
unconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}

#[oracle(avmOpcodeReturndataSize)]
unconstrained fn returndata_size_opcode() -> u32 {}

#[oracle(avmOpcodeReturndataCopy)]
unconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}

#[oracle(avmOpcodeReturn)]
unconstrained fn return_opcode(returndata: [Field]) {}

// This opcode reverts using the exact data given. In general it should only be used
// to do rethrows, where the revert data is the same as the original revert data.
// For normal reverts, use Noir's \`assert\` which, on top of reverting, will also add
// an error selector to the revert data.
#[oracle(avmOpcodeRevert)]
unconstrained fn revert_opcode(revertdata: [Field]) {}

#[oracle(avmOpcodeCall)]
unconstrained fn call_opcode(
    l2_gas_allocation: Field,
    da_gas_allocation: Field,
    address: AztecAddress,
    args: [Field],
) {}

#[oracle(avmOpcodeStaticCall)]
unconstrained fn call_static_opcode(
    l2_gas_allocation: Field,
    da_gas_allocation: Field,
    address: AztecAddress,
    args: [Field],
) {}

#[oracle(avmOpcodeSuccessCopy)]
unconstrained fn success_copy_opcode() -> bool {}

#[oracle(avmOpcodeStorageRead)]
unconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}

#[oracle(avmOpcodeStorageWrite)]
unconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}
`},65:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",source:`use crate::oracle::{
    execution::{get_block_number, get_chain_id, get_contract_address, get_version},
    storage::storage_read,
};
use dep::protocol_types::{address::AztecAddress, traits::Packable};

pub struct UtilityContext {
    block_number: u32,
    contract_address: AztecAddress,
    version: Field,
    chain_id: Field,
}

impl UtilityContext {
    pub unconstrained fn new() -> Self {
        // We could call these oracles on the getters instead of at creation, which makes sense given that they might
        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user
        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not
        // available.
        let block_number = get_block_number();
        let contract_address = get_contract_address();
        let chain_id = get_chain_id();
        let version = get_version();
        Self { block_number, contract_address, version, chain_id }
    }

    pub unconstrained fn at(contract_address: AztecAddress) -> Self {
        let block_number = get_block_number();
        let chain_id = get_chain_id();
        let version = get_version();
        Self { block_number, contract_address, version, chain_id }
    }

    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {
        let chain_id = get_chain_id();
        let version = get_version();
        Self { block_number, contract_address, version, chain_id }
    }

    pub fn block_number(self) -> u32 {
        self.block_number
    }

    pub fn this_address(self) -> AztecAddress {
        self.contract_address
    }

    pub fn version(self) -> Field {
        self.version
    }

    pub fn chain_id(self) -> Field {
        self.chain_id
    }

    pub unconstrained fn raw_storage_read<let N: u32>(
        self: Self,
        storage_slot: Field,
    ) -> [Field; N] {
        storage_read(self.this_address(), storage_slot, self.block_number())
    }

    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T
    where
        T: Packable<N>,
    {
        T::unpack(self.raw_storage_read(storage_slot))
    }
}
`},69:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/hash.nr",source:`use dep::protocol_types::{
    address::{AztecAddress, EthAddress},
    constants::{
        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,
        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,
    },
    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},
    point::Point,
    traits::{Hash, ToField},
};

pub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};

pub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {
    std::hash::pedersen_commitment_with_separator(inputs, hash_index)
}

pub fn compute_secret_hash(secret: Field) -> Field {
    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)
}

pub fn compute_l1_to_l2_message_hash(
    sender: EthAddress,
    chain_id: Field,
    recipient: AztecAddress,
    version: Field,
    content: Field,
    secret_hash: Field,
    leaf_index: Field,
) -> Field {
    let mut hash_bytes = [0 as u8; 224];
    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();
    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();
    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();
    let version_bytes: [u8; 32] = version.to_be_bytes();
    let content_bytes: [u8; 32] = content.to_be_bytes();
    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();
    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();

    for i in 0..32 {
        hash_bytes[i] = sender_bytes[i];
        hash_bytes[i + 32] = chain_id_bytes[i];
        hash_bytes[i + 64] = recipient_bytes[i];
        hash_bytes[i + 96] = version_bytes[i];
        hash_bytes[i + 128] = content_bytes[i];
        hash_bytes[i + 160] = secret_hash_bytes[i];
        hash_bytes[i + 192] = leaf_index_bytes[i];
    }

    sha256_to_field(hash_bytes)
}

// The nullifier of a l1 to l2 message is the hash of the message salted with the secret
pub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {
    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)
}

pub struct ArgsHasher {
    pub fields: [Field],
}

impl Hash for ArgsHasher {
    fn hash(self) -> Field {
        hash_args(self.fields)
    }
}

impl ArgsHasher {
    pub fn new() -> Self {
        Self { fields: [] }
    }

    pub fn add(&mut self, field: Field) {
        self.fields = self.fields.push_back(field);
    }

    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {
        for i in 0..N {
            self.fields = self.fields.push_back(fields[i]);
        }
    }
}

// Computes the hash of input arguments or return values for private functions, or for authwit creation.
pub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {
    if args.len() == 0 {
        0
    } else {
        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)
    }
}

// Same as \`hash_args_array\`, but takes a slice instead of an array.
pub fn hash_args(args: [Field]) -> Field {
    if args.len() == 0 {
        0
    } else {
        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)
    }
}

// Computes the hash of calldata for public functions.
pub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {
    if calldata.len() == 0 {
        0
    } else {
        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)
    }
}

// Same as \`hash_calldata_array\`, but takes a slice instead of an array.
pub fn hash_calldata(calldata: [Field]) -> Field {
    if calldata.len() == 0 {
        0
    } else {
        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)
    }
}

#[test]
unconstrained fn compute_var_args_hash() {
    let mut input = ArgsHasher::new();
    for i in 0..100 {
        input.add(i as Field);
    }
    let hash = input.hash();
    dep::std::println(hash);
    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);
}
`},86:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",source:`use crate::{
    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},
    oracle::{
        key_validation_request::get_key_validation_request,
        keys::get_public_keys_and_partial_address,
    },
};
use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};

mod test;

pub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {
    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app
}

// A helper function that gets app-siloed outgoing viewing key for a given \`ovpk_m_hash\`. This function is used
// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is \`request_ovsk_app\`
// function defined on \`PrivateContext\`.
pub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {
    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app
}

// Returns all public keys for a given account, applying proper constraints to the context. We read all
// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any
// read keys that are not required by the caller can simply be discarded.
pub fn get_public_keys(account: AztecAddress) -> PublicKeys {
    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.
    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };
    assert_eq(
        account,
        AztecAddress::compute(public_keys, partial_address),
        "Invalid public keys hint for address",
    );

    public_keys
}
`},90:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",source:`use crate::{
    macros::{
        dispatch::generate_public_dispatch,
        functions::{stub_registry, utils::check_each_fn_macroified},
        notes::{generate_note_export, NOTES},
        storage::STORAGE_LAYOUT_NAME,
        utils::{get_trait_impl_method, module_has_storage},
    },
    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,
};

/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting
/// the \`sync_private_state\` utility function.
/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.
pub comptime fn aztec(m: Module) -> Quoted {
    let interface = generate_contract_interface(m);

    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not
    // allowed in contracts.
    check_each_fn_macroified(m);

    let contract_library_method_compute_note_hash_and_nullifier =
        generate_contract_library_method_compute_note_hash_and_nullifier();
    let note_exports = generate_note_exports();
    let public_dispatch = generate_public_dispatch(m);
    let sync_private_state = generate_sync_private_state();

    quote {
        $note_exports
        $interface
        $contract_library_method_compute_note_hash_and_nullifier
        $public_dispatch
        $sync_private_state
    }
}

comptime fn generate_contract_interface(m: Module) -> Quoted {
    let module_name = m.name();
    let contract_stubs = stub_registry::get(m);
    let fn_stubs_quote = if contract_stubs.is_some() {
        contract_stubs.unwrap().join(quote {})
    } else {
        quote {}
    };

    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();
    let storage_layout_getter = if has_storage_layout {
        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();
        quote {
            pub fn storage_layout() -> StorageLayoutFields {
                $storage_layout_name.fields
            }
        }
    } else {
        quote {}
    };

    let library_storage_layout_getter = if has_storage_layout {
        quote {
            #[contract_library_method]
            $storage_layout_getter
        }
    } else {
        quote {}
    };

    quote {
        pub struct $module_name {
            pub target_contract: dep::aztec::protocol_types::address::AztecAddress
        }

        impl $module_name {
            $fn_stubs_quote

            pub fn at(
                addr: aztec::protocol_types::address::AztecAddress
            ) -> Self {
                Self { target_contract: addr }
            }

            pub fn interface() -> Self {
                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }
            }

            $storage_layout_getter
        }

        #[contract_library_method]
        pub fn at(
            addr: aztec::protocol_types::address::AztecAddress
        ) -> $module_name {
            $module_name { target_contract: addr }
        }

        #[contract_library_method]
        pub fn interface() -> $module_name {
            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }
        }

        $library_storage_layout_getter

    }
}

/// Generates a contract library method called \`_compute_note_hash_and_nullifier\` which is used for note
/// discovery (to create the \`aztec::messages::discovery::ComputeNoteHashAndNullifier\` function) and to implement the
/// \`compute_note_hash_and_nullifier\` unconstrained contract function.
comptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {
    let notes = NOTES.entries();

    if notes.len() > 0 {
        let max_note_packed_len = notes.fold(
            0,
            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {
                if len > acc {
                    len
                } else {
                    acc
                }
            },
        );

        if max_note_packed_len > MAX_NOTE_PACKED_LEN {
            panic(
                f"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}",
            );
        }

        // Contracts that do define notes produce an if-else chain where \`note_type_id\` is matched against the
        // \`get_note_type_id()\` function of each note type that we know of, in order to identify the note type. Once we
        // know it we call we correct \`unpack\` method from the \`Packable\` trait to obtain the underlying note type, and
        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).

        let mut if_note_type_id_match_statements_list = &[];
        for i in 0..notes.len() {
            let (typ, (_, packed_note_length, _, _)) = notes[i];

            let get_note_type_id = get_trait_impl_method(
                typ,
                quote { crate::note::note_interface::NoteType },
                quote { get_id },
            );
            let unpack = get_trait_impl_method(
                typ,
                quote { crate::protocol_types::traits::Packable<_> },
                quote { unpack },
            );

            let compute_note_hash = get_trait_impl_method(
                typ,
                quote { crate::note::note_interface::NoteHash },
                quote { compute_note_hash },
            );

            let compute_nullifier_unconstrained = get_trait_impl_method(
                typ,
                quote { crate::note::note_interface::NoteHash },
                quote { compute_nullifier_unconstrained },
            );

            let if_or_else_if = if i == 0 {
                quote { if }
            } else {
                quote { else if }
            };

            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(
                quote {
                    $if_or_else_if note_type_id == $get_note_type_id() {
                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected
                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the
                        // unpack function on it.
                        let expected_len = $packed_note_length;
                        let actual_len = packed_note.len();
                        assert(
                            actual_len == expected_len,
                            f"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}"
                        );

                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));

                        let note_hash = $compute_note_hash(note, storage_slot);
    
                        // The message discovery process finds settled notes, that is, notes that were created in prior
                        // transactions and are therefore already part of the note hash tree. We therefore compute the
                        // nullification note hash by treating the note as a settled note with the provided nonce.
                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(
                            aztec::note::retrieved_note::RetrievedNote{ 
                                note, 
                                contract_address, 
                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() 
                            }, 
                            storage_slot,
                        );

                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);

                        Option::some(
                            aztec::messages::discovery::NoteHashAndNullifier {
                                note_hash, inner_nullifier
                            }
                        )
                    }
                },
            );
        }

        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});

        quote {
            /// Unpacks an array into a note corresponding to \`note_type_id\` and then computes its note hash
            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash
            /// tree with \`nonce\`.
            ///
            /// The signature of this function notably matches the \`aztec::messages::discovery::ComputeNoteHashAndNullifier\` type,
            /// and so it can be used to call functions from that module such as \`discover_new_messages\`, 
            /// \`do_process_log\` and \`attempt_note_discovery\`.
            ///
            /// This function is automatically injected by the \`#[aztec]\` macro.
            #[contract_library_method]
            unconstrained fn _compute_note_hash_and_nullifier(
                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,
                storage_slot: Field,
                note_type_id: Field,
                contract_address: aztec::protocol_types::address::AztecAddress,
                nonce: Field,
            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {
                $if_note_type_id_match_statements
                else {
                    Option::none()
                }
            }
        }
    } else {
        // Contracts with no notes still implement this function to avoid having special-casing, the implementation
        // simply throws immediately.
        quote {
            /// This contract does not use private notes, so this function should never be called as it will
            /// unconditionally fail.
            ///
            /// This function is automatically injected by the \`#[aztec]\` macro.
            #[contract_library_method]
            unconstrained fn _compute_note_hash_and_nullifier(
                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,
                _storage_slot: Field,
                _note_type_id: Field,
                _contract_address: aztec::protocol_types::address::AztecAddress,
                _nonce: Field,
            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {
                panic(f"This contract does not use private notes")
            }
        }
    }
}

comptime fn generate_note_exports() -> Quoted {
    let notes = NOTES.values();
    // Second value in each tuple is \`note_packed_len\` and that is ignored here because it's only used when
    // generating partial note helper functions.
    notes
        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {
            generate_note_export(s, note_type_id, fields)
        })
        .join(quote {})
}

comptime fn generate_sync_private_state() -> Quoted {
    // We obtain the \`utility\` function on the next line instead of directly doing
    // \`#[aztec::macros::functions::utility]\` in the returned quote because the latter would result in the function
    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only
    // to determine whether a function is \`private\`, \`public\`, or \`utility\`.
    let utility = crate::macros::functions::utility;

    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't
    // need to do anything extra.
    quote {
        #[$utility]
        unconstrained fn sync_private_state() {
        }
    }
}
`},91:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",source:`use super::utils::compute_fn_selector;
use std::panic;

/// Returns an \`fn public_dispatch(...)\` function for the given module that's assumed to be an Aztec contract.
pub comptime fn generate_public_dispatch(m: Module) -> Quoted {
    let functions = m.functions();
    let functions =
        functions.filter(|function: FunctionDefinition| function.has_named_attribute("public"));

    let unit = get_type::<()>();

    let ifs = functions.map(|function: FunctionDefinition| {
        let parameters = function.parameters();
        let return_type = function.return_type();

        let selector: Field = compute_fn_selector(function);

        let mut parameters_size = 0;
        for param in parameters {
            parameters_size += size_in_fields(param.1);
        }

        let initial_read = if parameters.len() == 0 {
            quote {}
        } else {
            // The initial calldata_copy offset is 1 to skip the Field selector
            // The expected calldata is the serialization of
            // - FunctionSelector: the selector of the function intended to dispatch
            // - Parameters: the parameters of the function intended to dispatch
            // That is, exactly what is expected for a call to the target function,
            // but with a selector added at the beginning.
            quote {
                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);
                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);
            }
        };

        let parameter_index = &mut 0;
        let reads = parameters.map(|param: (Quoted, Type)| {
            let parameter_index_value = *parameter_index;
            let param_name = f"arg{parameter_index_value}".quoted_contents();
            let param_type = param.1;
            let read = quote {
                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);
            };
            *parameter_index += 1;
            quote { $read }
        });
        let read = reads.join(quote { });

        let mut args = &[];
        for parameter_index in 0..parameters.len() {
            let param_name = f"arg{parameter_index}".quoted_contents();
            args = args.push_back(quote { $param_name });
        }

        let args = args.join(quote { , });
        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.
        let name = function.name();
        let call = quote { $name($args) };

        let return_code = if return_type == unit {
            quote {
                $call;
                // Force early return.
                dep::aztec::context::public_context::avm_return([]);
            }
        } else {
            quote {
                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);
                dep::aztec::context::public_context::avm_return(return_value.as_slice());
            }
        };

        let if_ = quote {
            if selector == $selector {
                $initial_read
                $read
                $return_code
            }
        };
        if_
    });

    if ifs.len() == 0 {
        // No dispatch function if there are no public functions
        quote {}
    } else {
        let ifs = ifs.push_back(quote { panic(f"Unknown selector {selector}") });
        let dispatch = ifs.join(quote {  });

        let body = quote {
            // We mark this as public because our whole system depends on public
            // functions having this attribute. However, the public MACRO will
            // handle the public_dispatch function specially and do nothing.
            #[public]
            pub unconstrained fn public_dispatch(selector: Field) {
                $dispatch
            }
        };

        body
    }
}

comptime fn size_in_fields(typ: Type) -> u32 {
    let size = array_size_in_fields(typ);
    let size = size.or_else(|| bool_size_in_fields(typ));
    let size = size.or_else(|| constant_size_in_fields(typ));
    let size = size.or_else(|| field_size_in_fields(typ));
    let size = size.or_else(|| int_size_in_fields(typ));
    let size = size.or_else(|| str_size_in_fields(typ));
    let size = size.or_else(|| struct_size_in_fields(typ));
    let size = size.or_else(|| tuple_size_in_fields(typ));
    if size.is_some() {
        size.unwrap()
    } else {
        panic(f"Can't determine size in fields of {typ}")
    }
}

comptime fn array_size_in_fields(typ: Type) -> Option<u32> {
    typ.as_array().and_then(|typ: (Type, Type)| {
        let (typ, element_size) = typ;
        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))
    })
}

comptime fn bool_size_in_fields(typ: Type) -> Option<u32> {
    if typ.is_bool() {
        Option::some(1)
    } else {
        Option::none()
    }
}

comptime fn field_size_in_fields(typ: Type) -> Option<u32> {
    if typ.is_field() {
        Option::some(1)
    } else {
        Option::none()
    }
}

comptime fn int_size_in_fields(typ: Type) -> Option<u32> {
    if typ.as_integer().is_some() {
        Option::some(1)
    } else {
        Option::none()
    }
}

comptime fn constant_size_in_fields(typ: Type) -> Option<u32> {
    typ.as_constant()
}

comptime fn str_size_in_fields(typ: Type) -> Option<u32> {
    typ.as_str().map(|typ| size_in_fields(typ))
}

comptime fn struct_size_in_fields(typ: Type) -> Option<u32> {
    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {
        let struct_type = typ.0;
        let generics = typ.1;
        let mut size = 0;
        for field in struct_type.fields(generics) {
            size += size_in_fields(field.1);
        }
        size
    })
}

comptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {
    typ.as_tuple().map(|types: [Type]| {
        let mut size = 0;
        for typ in types {
            size += size_in_fields(typ);
        }
        size
    })
}

comptime fn get_type<T>() -> Type {
    let t: T = std::mem::zeroed();
    std::meta::type_of(t)
}
`},95:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",source:`use dep::protocol_types::{
    abis::function_selector::FunctionSelector, address::AztecAddress,
    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,
};

use crate::{
    context::{PrivateContext, PublicContext},
    oracle::get_contract_instance::{
        get_contract_instance, get_contract_instance_deployer_avm,
        get_contract_instance_initialization_hash_avm,
    },
};

pub fn mark_as_initialized_public(context: &mut PublicContext) {
    let init_nullifier =
        compute_unsiloed_contract_initialization_nullifier((*context).this_address());
    context.push_nullifier(init_nullifier);
}

pub fn mark_as_initialized_private(context: &mut PrivateContext) {
    let init_nullifier =
        compute_unsiloed_contract_initialization_nullifier((*context).this_address());
    context.push_nullifier(init_nullifier);
}

pub fn assert_is_initialized_public(context: &mut PublicContext) {
    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());
    assert(context.nullifier_exists(init_nullifier, context.this_address()), "Not initialized");
}

pub fn assert_is_initialized_private(context: &mut PrivateContext) {
    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());
    context.push_nullifier_read_request(init_nullifier);
}

fn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {
    address.to_field()
}

pub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {
    let address = context.this_address();
    let deployer = get_contract_instance_deployer_avm(address).unwrap();
    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();
    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());
    assert(initialization_hash == expected_init, "Initialization hash does not match");
    assert(
        (deployer.is_zero()) | (deployer == context.msg_sender()),
        "Initializer address is not the contract deployer",
    );
}

pub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {
    let address = context.this_address();
    let instance = get_contract_instance(address);
    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());
    assert(instance.initialization_hash == expected_init, "Initialization hash does not match");
    assert(
        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),
        "Initializer address is not the contract deployer",
    );
}

/// This function is not only used in macros but it's also used by external people to check that an instance has been
/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.
pub fn compute_initialization_hash(
    init_selector: FunctionSelector,
    init_args_hash: Field,
) -> Field {
    poseidon2_hash_with_separator(
        [init_selector.to_field(), init_args_hash],
        GENERATOR_INDEX__CONSTRUCTOR,
    )
}
`},98:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",source:`use crate::macros::{
    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},
    notes::NOTES,
    utils::{
        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,
        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,
        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,
    },
};
use protocol_types::meta::generate_serialize_to_fields;
use std::meta::type_of;

pub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {
    let fn_abi = create_fn_abi_export(f);
    let fn_stub = stub_fn(f);
    stub_registry::register(f.module(), fn_stub);

    // If a function is further modified as unconstrained, we throw an error
    if f.is_unconstrained() {
        let name = f.name();
        panic(
            f"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword",
        );
    }

    let module_has_initializer = module_has_initializer(f.module());
    let module_has_storage = module_has_storage(f.module());

    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the
    // Private Kernel Circuit.
    // First we change the function signature so that it also receives \`PrivateContextInputs\`, which contain information
    // about the execution context (e.g. the caller).
    let original_params = f.parameters();
    f.set_parameters(&[(
        quote { inputs },
        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),
    )]
        .append(original_params));

    let mut body = f.body().as_block().unwrap();

    // The original params are hashed and passed to the \`context\` object, so that the kernel can verify we've received
    // the correct values.
    // TODO: Optimize args_hasher for small number of arguments
    let args_hasher_name = quote { args_hasher };
    let args_hasher = original_params.fold(
        quote {
            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();
        },
        |args_hasher, param: (Quoted, Type)| {
            let (name, typ) = param;
            let appended_arg = add_to_hasher(args_hasher_name, name, typ);
            quote {
                $args_hasher
                $appended_arg
            }
        },
    );

    let context_creation = quote {
        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));
    };

    // Modifications introduced by the different marker attributes.
    let internal_check = if is_fn_internal(f) {
        create_internal_check(f)
    } else {
        quote {}
    };

    let view_check = if is_fn_view(f) {
        create_view_check(f)
    } else {
        quote {}
    };

    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {
        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))
    } else {
        (quote {}, quote {})
    };

    let storage_init = if module_has_storage {
        quote {
            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is
            // referenced. We instead ignore 'unused variable' warnings for it.
            #[allow(unused_variables)]
            let storage = Storage::init(&mut context);
        }
    } else {
        quote {}
    };

    // Initialization checks are not included in contracts that don't have initializers.
    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {
        create_init_check(f)
    } else {
        quote {}
    };

    // All private functions perform message discovery, since they may need to access notes. This is slightly
    // inefficient and could be improved by only doing it once we actually attempt to read any.
    let message_discovery_call = if NOTES.len() > 0 {
        create_message_discovery_call()
    } else {
        quote {}
    };

    // Finally, we need to change the return type to be \`PrivateCircuitPublicInputs\`, which is what the Private Kernel
    // circuit expects.
    let return_value_var_name = quote { macro__returned__values };

    let return_value_type = f.return_type();
    let return_value = if body.len() == 0 {
        quote {}
    } else if return_value_type != type_of(()) {
        // The original return value is passed to a second args hasher which the context receives.
        let (body_without_return, last_body_expr) = body.pop_back();
        let return_value = last_body_expr.quoted();
        let return_value_assignment =
            quote { let $return_value_var_name: $return_value_type = $return_value; };
        let return_hasher_name = quote { return_hasher };
        let return_value_into_hasher =
            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);

        body = body_without_return;

        quote {
            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();
            $return_value_assignment
            $return_value_into_hasher
            context.set_return_hash($return_hasher_name);
        }
    } else {
        let (body_without_return, last_body_expr) = body.pop_back();
        if !last_body_expr.has_semicolon()
            & last_body_expr.as_for().is_none()
            & last_body_expr.as_assert().is_none()
            & last_body_expr.as_for_range().is_none()
            & last_body_expr.as_assert_eq().is_none()
            & last_body_expr.as_let().is_none() {
            let unused_return_value_name = f"_{return_value_var_name}".quoted_contents();
            body = body_without_return.push_back(
                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),
            );
        }
        quote {}
    };

    let context_finish = quote { context.finish() };

    let to_prepend = quote {
        $args_hasher
        $context_creation
        $assert_initializer
        $init_check
        $internal_check
        $view_check
        $storage_init
        $message_discovery_call
    };

    let to_append = quote {
        $return_value
        $mark_as_initialized
        $context_finish
    };
    let modified_body = modify_fn_body(body, to_prepend, to_append);
    f.set_body(modified_body);
    f.set_return_type(
        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }
            .as_type(),
    );
    f.set_return_data();

    fn_abi
}

pub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {
    let fn_abi = create_fn_abi_export(f);
    let fn_stub = stub_fn(f);
    stub_registry::register(f.module(), fn_stub);

    // If a function is further modified as unconstrained, we throw an error
    if f.is_unconstrained() {
        let name = f.name();
        panic(
            f"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword",
        );
    }

    let module_has_initializer = module_has_initializer(f.module());
    let module_has_storage = module_has_storage(f.module());

    // Public functions undergo a lot of transformations from their Aztec.nr form.
    let original_params = f.parameters();
    let args_len = original_params
        .map(|(name, typ): (Quoted, Type)| {
            generate_serialize_to_fields(name, typ, false).0.len()
        })
        .fold(0, |acc: u32, val: u32| acc + val);

    // Unlike in the private case, in public the \`context\` does not need to receive the hash of the original params.
    let context_creation = quote {
        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {
        // We start from 1 because we skip the selector for the dispatch function.
        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);
        dep::aztec::hash::hash_args_array(serialized_args)
        });
    };

    // Modifications introduced by the different marker attributes.
    let internal_check = if is_fn_internal(f) {
        create_internal_check(f)
    } else {
        quote {}
    };

    let view_check = if is_fn_view(f) {
        create_view_check(f)
    } else {
        quote {}
    };

    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {
        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))
    } else {
        (quote {}, quote {})
    };

    let storage_init = if module_has_storage {
        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is
        // referenced. We instead ignore 'unused variable' warnings for it.
        quote {
            #[allow(unused_variables)]
            let storage = Storage::init(&mut context);
        }
    } else {
        quote {}
    };

    // Initialization checks are not included in contracts that don't have initializers.
    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {
        create_init_check(f)
    } else {
        quote {}
    };

    let to_prepend = quote {
        $context_creation
        $assert_initializer
        $init_check
        $internal_check
        $view_check
        $storage_init
    };

    let to_append = quote {
        $mark_as_initialized
    };

    let body = f.body().as_block().unwrap();
    let modified_body = modify_fn_body(body, to_prepend, to_append);
    f.set_body(modified_body);

    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because
    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM
    // bytecode.
    f.set_unconstrained(true);
    f.set_return_public(true);

    fn_abi
}

pub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {
    let fn_abi = create_fn_abi_export(f);
    let fn_stub = stub_fn(f);
    stub_registry::register(f.module(), fn_stub);

    // Check if function is marked as unconstrained
    if !f.is_unconstrained() {
        let name = f.name();
        panic(
            f"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword",
        );
    }

    // Create utility context
    let context_creation =
        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };
    let module_has_storage = module_has_storage(f.module());

    // Initialize Storage if module has storage
    let storage_init = if module_has_storage {
        quote {
            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is
            // referenced. We instead ignore 'unused variable' warnings for it.
            #[allow(unused_variables)]
            let storage = Storage::init(context);
        }
    } else {
        quote {}
    };

    // All utility functions perform message discovery, since they may need to access private notes that would be
    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually
    // attempt to read any.
    let message_discovery_call = if NOTES.len() > 0 {
        create_message_discovery_call()
    } else {
        quote {}
    };

    // Inject context creation, storage initialization, and message discovery call at the beginning of the function
    // body.
    let to_prepend = quote {
        $context_creation
        $storage_init
        $message_discovery_call
    };
    let body = f.body().as_block().unwrap();
    let modified_body = modify_fn_body(body, to_prepend, quote {});
    f.set_body(modified_body);

    f.set_return_public(true);

    fn_abi
}

comptime fn create_internal_check(f: FunctionDefinition) -> Quoted {
    let name = f.name();
    let assertion_message = f"Function {name} can only be called internally";
    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }
}

comptime fn create_view_check(f: FunctionDefinition) -> Quoted {
    let name = f.name();
    let assertion_message = f"Function {name} can only be called statically";
    if is_fn_private(f) {
        // Here \`context\` is of type context::PrivateContext
        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }
    } else {
        // Here \`context\` is of type context::PublicContext
        quote { assert(context.is_static_call(), $assertion_message); }
    }
}

comptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {
    let fn_visibility = get_fn_visibility(f);
    f"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);"
        .quoted_contents()
}

comptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {
    let fn_visibility = get_fn_visibility(f);
    f"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);"
        .quoted_contents()
}

comptime fn create_init_check(f: FunctionDefinition) -> Quoted {
    let fn_visibility = get_fn_visibility(f);
    f"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);"
        .quoted_contents()
}

/// Injects a call to \`aztec::messages::discovery::discover_new_messages\`, causing for new notes to be added to PXE and made
/// available for the current execution.
pub(crate) comptime fn create_message_discovery_call() -> Quoted {
    quote {
        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore
        /// always safe to call.
        unsafe {
            dep::aztec::messages::discovery::discover_new_messages(
                context.this_address(),
                _compute_note_hash_and_nullifier,
            );
        };
    }
}

/// Checks if each function in the module is marked with either #[private], #[public], #[utility],
/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.
pub(crate) comptime fn check_each_fn_macroified(m: Module) {
    for f in m.functions() {
        let name = f.name();
        if !is_fn_private(f)
            & !is_fn_public(f)
            & !is_fn_utility(f)
            & !is_fn_contract_library_method(f)
            & !is_fn_test(f) {
            panic(
                f"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]",
            );
        }
    }
}
`},100:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/notes.nr",source:`use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};
use poseidon::poseidon2::Poseidon2Hasher;
use protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};
use std::{
    collections::umap::UHashMap,
    hash::{BuildHasherDefault, Hash, Hasher},
    meta::{type_of, unquote},
};

/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).
/// \`fields\` is an array of tuples where each tuple contains the name of the field/struct member (e.g. \`amount\`
/// in \`TokenNote\`), the index of where the packed member starts in the packed note and a flag indicating
/// whether the field is nullable or not.
pub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =
    UHashMap::default();

pub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;

/// The note type id is set by enumerating the note types.
comptime fn get_next_note_type_id() -> Field {
    // We assert that the note type id fits within 7 bits
    assert(
        NOTE_TYPE_ID_COUNTER < 128 as u32,
        "A contract can contain at most 128 different note types",
    );

    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;
    NOTE_TYPE_ID_COUNTER += 1;
    note_type_id
}

/// Generates a quote that implements \`Packable\` for a given struct \`s\`.
/// If the note struct already implements \`Packable\`, we return an empty quote.
comptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {
    // We try to get the packed length of the note struct. If it does not implement \`Packable\`, we get Option::none()
    let packed_len_typ = std::meta::typ::fresh_type_variable();
    // We don't care about the result of the implements check. We just want the get the packed length.
    let _ = s.as_type().implements(
        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),
    );
    let maybe_packed_length = packed_len_typ.as_constant();

    if maybe_packed_length.is_some() {
        // We got some packed length meaning that the note struct implements \`Packable\`. For this reason we return
        // an empty quote for the implementation and the packed length.
        (quote {}, maybe_packed_length.unwrap())
    } else {
        // We didn't manage to get the packed length which means the note struct doesn't implement \`Packable\`
        // so we derive it and return it along with the packed length.
        derive_packable_and_get_packed_len(s)
    }
}

/// Generates default \`NoteType\` implementation for a given note struct \`s\` and returns it as a quote.
///
/// impl NoteType for NoteStruct {
///     fn get_id() -> Field {
///         ...
///     }
/// }
comptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {
    let name = s.name();

    quote {
        impl aztec::note::note_interface::NoteType for $name {
            fn get_id() -> Field {
                $note_type_id
            }
        }
    }
}

/// Generates default \`NoteHash\` trait implementation for a given note struct \`s\` and returns it as a quote.
///
/// # Generated Implementation
/// \`\`\`
/// impl NoteHash for NoteStruct {
///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }
///
///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }
///
///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }
/// }
/// \`\`\`
comptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {
    let name = s.name();

    quote {
        impl aztec::note::note_interface::NoteHash for $name {
            fn compute_note_hash(self, storage_slot: Field) -> Field {
                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);
                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)
            }

            fn compute_nullifier(
                self,
                context: &mut aztec::prelude::PrivateContext,
                note_hash_for_nullify: Field,
            ) -> Field {
                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;
                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly
                // in the quote to avoid "trait not in scope" compiler warnings.
                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);
                let secret = context.request_nsk_app(owner_npk_m_hash);
                aztec::protocol_types::hash::poseidon2_hash_with_separator(
                    [note_hash_for_nullify, secret],
                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,
                )
            }

            unconstrained fn compute_nullifier_unconstrained(
                self,
                note_hash_for_nullify: Field,
            ) -> Field {
                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;
                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly
                // in the quote to avoid "trait not in scope" compiler warnings.
                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);
                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);
                aztec::protocol_types::hash::poseidon2_hash_with_separator(
                    [note_hash_for_nullify, secret],
                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,
                )
            }
        }
    }
}

/// Generates note properties struct for a given note struct \`s\`.
///
/// Example:
/// \`\`\`
/// struct TokenNoteProperties {
///     amount: aztec::note::note_getter_options::PropertySelector,
///     npk_m_hash: aztec::note::note_getter_options::PropertySelector
///     randomness: aztec::note::note_getter_options::PropertySelector
/// }
///
/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {
///     fn properties() -> TokenNoteProperties {
///         Self {
///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },
///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },
///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }
///         }
///     }
/// }
/// \`\`\`
comptime fn generate_note_properties(s: TypeDefinition) -> Quoted {
    let name = s.name();

    let struct_name = f"{name}Properties".quoted_contents();

    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });

    let note_fields = s.fields_as_written();

    let properties_types = note_fields
        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })
        .join(quote {,});

    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694
    let mut properties_list = &[];
    for i in 0..note_fields.len() {
        let (name, _) = note_fields[i];
        properties_list = properties_list.push_back(
            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },
        );
    }

    let properties = properties_list.join(quote {,});

    quote {
        pub struct $struct_name {
            $properties_types
        }

        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {
            fn properties() -> $struct_name {
                $struct_name {
                    $properties
                }
            }
        }
    }
}

/// Generates note export for a given note struct \`s\`. The export is a global variable that contains note type id,
/// note name and information about note fields (field name, index and whether the field is nullable or not).
///
/// Example:
/// \`\`\`
/// struct TokenNoteFields_5695262104 {
///     amount: aztec::note::note_field::NoteField,
///     owner: aztec::note::note_field::NoteField
/// }
///
/// #[abi(notes)]
/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (
///     0,
///     "TokenNote",
///     TokenNoteFields_5695262104 {
///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },
///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }
///     }
/// );
///
/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included
/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.
pub(crate) comptime fn generate_note_export(
    s: TypeDefinition,
    note_type_id: Field,
    fields: [(Quoted, u32, bool)],
) -> Quoted {
    let name = s.name();
    let mut hasher = Poseidon2Hasher::default();
    s.as_type().hash(&mut hasher);
    let hash = hasher.finish() as u32;
    let global_export_name = f"{name}_EXPORTS_{hash}".quoted_contents();
    let note_fields_name = f"{name}Fields_{hash}".quoted_contents();
    let (note_name_as_str, _) = name.as_str_quote();
    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });

    let mut note_fields = &[];
    let mut note_field_constructors = &[];
    for field in fields {
        let (name, index, nullable) = field;
        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });
        note_field_constructors = note_field_constructors.push_back(
            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},
        );
    }

    let note_fields = note_fields.join(quote {,});
    let note_field_constructors = note_field_constructors.join(quote {,});

    quote {
        pub struct $note_fields_name {
            pub $note_fields
        }

        #[abi(notes)]
        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });
    }
}

/// Registers a note struct \`note\` with the given \`note_packed_len\`, \`note_type_id\`, \`fixed_fields\` and
/// \`nullable_fields\` in the global \`NOTES\` map.
comptime fn register_note(
    note: TypeDefinition,
    note_packed_len: u32,
    note_type_id: Field,
    fixed_fields: [(Quoted, Type, u32)],
    nullable_fields: [(Quoted, Type, u32)],
) {
    let mut fields = &[];
    for field in fixed_fields {
        let (name, _, index) = field;
        fields = fields.push_back((name, index, false));
    }
    for field in nullable_fields {
        let (name, _, index) = field;
        fields = fields.push_back((name, index, true));
    }

    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));
}

/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member
/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).
comptime fn index_note_fields(
    s: TypeDefinition,
    nullable_fields: [Quoted],
) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {
    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];
    let mut indexed_nullable_fields = &[];
    let mut counter: u32 = 0;
    for field in s.fields_as_written() {
        let (name, typ) = field;
        if nullable_fields.all(|field| field != name) {
            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));
        } else {
            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));
        }
        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);
        // Each struct member can occupy multiple fields so we need to increment the counter accordingly
        counter += serialization_fields.len();
    }
    (indexed_fixed_fields, indexed_nullable_fields)
}

/// Generates the following:
/// - NoteTypeProperties
/// - NoteType trait implementation
/// - NoteHash trait implementation
/// - Packable implementation
///
/// Registers the note in the global \`NOTES\` map.
///
/// For more details on the generated code, see the individual functions.
pub comptime fn note(s: TypeDefinition) -> Quoted {
    assert_has_owner(s);

    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);

    let note_properties = generate_note_properties(s);
    let note_type_id = get_next_note_type_id();
    let note_interface_impl = generate_note_interface(s, note_type_id);
    let note_hash_impl = generate_note_hash_trait_impl(s);
    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);

    register_note(
        s,
        note_packed_len,
        note_type_id,
        indexed_fixed_fields,
        indexed_nullable_fields,
    );

    quote {
        $note_properties
        $note_interface_impl
        $note_hash_impl
        $packable_impl
    }
}

/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.
///
/// # Generated Code
/// - NoteTypeProperties: Defines the structure and properties of note fields
/// - NoteType trait implementation: Provides the note type ID
/// - Packable implementation: Enables serialization/deserialization of the note
///
/// # Registration
/// Registers the note in the global \`NOTES\` map with:
/// - Note type ID
/// - Packed length
/// - Field indices and nullability
///
/// # Use Cases
/// Use this macro when implementing a note that needs custom:
/// - Note hash computation logic
/// - Nullifier computation logic
///
/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.
///
/// # Example
/// \`\`\`
/// #[custom_note]
/// struct CustomNote {
///     value: Field,
///     metadata: Field
/// }
///
/// impl NoteHash for CustomNote {
///     // Custom note hash computation...
///     fn compute_note_hash(...) -> Field { ... }
///
///     // Custom nullifier computation...
///     fn compute_nullifier(...) -> Field { ... }
///     fn compute_nullifier_unconstrained(...) -> Field { ... }
/// }
/// \`\`\`
pub comptime fn custom_note(s: TypeDefinition) -> Quoted {
    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);
    let note_type_id = get_next_note_type_id();

    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);
    register_note(
        s,
        note_packed_len,
        note_type_id,
        indexed_fixed_fields,
        indexed_nullable_fields,
    );

    let note_properties = generate_note_properties(s);
    let note_interface_impl = generate_note_interface(s, note_type_id);

    quote {
        $note_properties
        $note_interface_impl
        $packable_impl
    }
}

/// Asserts that the note has an 'owner' field.
///
/// We require notes implemented with #[note] macro macro to have an 'owner' field because our
/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.
comptime fn assert_has_owner(note: TypeDefinition) {
    let fields = note.fields_as_written();
    let mut has_owner = false;
    for i in 0..fields.len() {
        let (field_name, _) = fields[i];
        if field_name == quote { owner } {
            has_owner = true;
            break;
        }
    }
    assert(
        has_owner,
        "Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.",
    );
}
`},101:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/macros/storage.nr",source:`use poseidon::poseidon2::Poseidon2Hasher;
use std::{collections::umap::UHashMap, hash::BuildHasherDefault};

use super::utils::AsStrQuote;
use super::utils::get_storage_size;

/// Stores a map from a module to the name of the struct that describes its storage layout.
/// This is then used when generating a \`storage_layout()\` getter on the contract struct.
pub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =
    UHashMap::default();

/// Marks a struct as the one describing the storage layout of a contract.
///
/// The contract's storage is accessed via the \`storage\` variable, which will will automatically be made available in
/// all functions as an instance of the struct this macro was applied to.
///
/// Only a single struct in the entire contract should have this macro (or \`storage_no_init\`) applied to it, and the
/// struct has to be called 'Storage'.
pub comptime fn storage(s: TypeDefinition) -> Quoted {
    let struct_name = s.name();
    if struct_name != quote { Storage } {
        panic(
            f"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.",
        )
    }

    assert(
        !s.has_named_attribute("storage_no_init"),
        f"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.",
    );

    // This macro performs three things:
    //  - it marks the contract as having storage, so that \`macros::utils::module_has_storage\` will return true and
    //    functions will have the storage variable injected and initialized via the \`init\` function.
    //  - it implements said \`init\` function by allocating appropriate storage slots to each state variable.
    //  - it exposes the storage layout by creating a \`StorageLayout\` struct that is exposed via the \`abi(storage)\`
    //    macro.
    let mut slot: u32 = 1;
    let mut storage_vars_constructors = &[];
    let mut storage_layout_fields = &[];
    let mut storage_layout_constructors = &[];

    // TODO(#8658): uncomment the code below to inject the Context type parameter.
    //let mut new_storage_fields = &[];
    //let context_generic = s.add_generic("Context");
    for field in s.fields_as_written() {
        // FIXME: This doesn't handle field types with generics
        let (name, typ) = field;
        let (storage_field_constructor, storage_size) =
            generate_storage_field_constructor(typ, quote { $slot });
        storage_vars_constructors =
            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });
        // We have \`Storable\` in a separate \`.nr\` file instead of defining it in the last quote of this function
        // because that way a dev gets a more reasonable error if he defines a struct with the same name in
        // a contract.
        storage_layout_fields =
            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });
        storage_layout_constructors = storage_layout_constructors.push_back(
            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },
        );
        //let with_context_generic = add_context_generic(typ, context_generic);
        //println(with_context_generic);
        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));
        slot += storage_size;
    }

    //s.set_fields(new_storage_fields);
    let storage_vars_constructors = storage_vars_constructors.join(quote {,});
    let storage_impl = quote {
        impl<Context> Storage<Context> {
            fn init(context: Context) -> Self {
                Self {
                    $storage_vars_constructors
                }
            }
        }
    };

    let storage_layout_fields = storage_layout_fields.join(quote {,});
    let storage_layout_constructors = storage_layout_constructors.join(quote {,});

    let module = s.module();
    let module_name = module.name();
    let storage_layout_name = f"STORAGE_LAYOUT_{module_name}".quoted_contents();
    let (module_name_str, module_name_len) = module_name.as_str_quote();
    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);

    quote {
        $storage_impl

        pub struct StorageLayoutFields {
            $storage_layout_fields
        }

        pub struct StorageLayout<let N: u32> {
            pub contract_name: str<N>,
            pub fields: StorageLayoutFields
        }

        #[abi(storage)]
        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {
            contract_name: $module_name_str,
            fields: StorageLayoutFields { $storage_layout_constructors }
        };
    }
}

/// Same as \`storage\`, except the user is in charge of providing an implementation of the \`init\` constructor function
/// with signature \`fn init<Context>(context: Context) -> Self\`, which allows for manual control of storage slot
/// allocation. Similarly, no \`StorageLayout\` struct will be created.
///
/// The contract's storage is accessed via the \`storage\` variable, which will will automatically be made available in
/// all functions as an instance of the struct this macro was applied to.
///
/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct
/// has to be called 'Storage'.
pub comptime fn storage_no_init(s: TypeDefinition) {
    // All \`storage\` does is provide the \`init\` implementation, so we don't need to do anything here. Applying this
    // macro however will cause for \`macros::utils::module_has_storage\` to return true, resulting in the injection of
    // the \`storage\` variable.

    // We do need to make sure that the type is called Storage, since we'll do \`Storage::init\` later on.

    if s.name() != quote { Storage } {
        let name = s.name();
        panic(
            f"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.",
        )
    }

    assert(
        !s.has_named_attribute("storage"),
        f"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.",
    );
}

/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,
/// i.e. how many contiguous storage slots the variable requires.
comptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {
    assert(
        typ.as_data_type().is_some(),
        "Storage containers must be generic structs of the form \`Container<_, Context>\`, or Map<Key, _, Context>",
    );
    let (container_struct, generics) = typ.as_data_type().unwrap();
    let struct_name = container_struct.name();

    let constructor = if is_storage_map(typ) {
        // Map state variables recursively initialize their contents - this includes nested maps.
        let (value_constructor, _) =
            generate_storage_field_constructor(generics[1], quote { slot });

        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }
    } else {
        // We assume below that all state variables implement \`fn new<Context>(context: Context, slot: Field) -> Self\`.
        quote { $struct_name::new(context, $slot)}
    };

    (constructor, get_storage_size(typ))
}

/// Returns true if \`typ\` is \`state_vars::map::Map\`.
comptime fn is_storage_map(typ: Type) -> bool {
    if typ.as_data_type().is_some() {
        let (def, generics) = typ.as_data_type().unwrap();
        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {
            let maybe_key = generics[0];
            let maybe_value = generics[1];
            let maybe_context = generics[2];
            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()
        } else {
            quote {()}.as_type()
        };
        typ == maybe_map
    } else {
        false
    }
}

comptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {
    let (def, mut generics) = typ.as_data_type().expect(
        f"Storage containers must be generic structs of the form \`Container<..., Context>\`",
    );
    let name = def.name();

    if is_storage_map(typ) {
        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);
        generics[generics.len() - 1] = context_generic;
    } else {
        generics[generics.len() - 1] = context_generic;
    }

    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});
    quote { $name<$generics> }.as_type()
}
`},103:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",source:`use protocol_types::{address::AztecAddress, debug_log::debug_log};

pub mod nonce_discovery;
pub mod partial_notes;
pub mod pending_tagged_log;
pub mod private_logs;
pub mod private_notes;

use private_notes::MAX_NOTE_PACKED_LEN;

pub struct NoteHashAndNullifier {
    /// The result of NoteHash::compute_note_hash
    pub note_hash: Field,
    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)
    pub inner_nullifier: Field,
}

/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type
/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by
/// address).
///
/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a
/// contract. The \`#[aztec]\` macro automatically creates such a contract library method called
/// \`_compute_note_hash_and_nullifier\`, which looks something like this:
///
/// \`\`\`
/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {
///     if note_type_id == MyNoteType::get_id() {
///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);
///
///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));
///
///         let note_hash = note.compute_note_hash(storage_slot);
///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(
///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },
///             storage_slot
///         );
///
///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);
///
///         Option::some(
///             aztec::messages::discovery::NoteHashAndNullifier {
///                 note_hash, inner_nullifier
///             }
///         )
///     } else if note_type_id == MyOtherNoteType::get_id() {
///           ... // Similar to above but calling MyOtherNoteType::unpack_content
///     } else {
///         Option::none() // Unknown note type ID
///     };
/// }
/// \`\`\`
type ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;

/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,
/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.
/// This is the mechanism via which a contract updates its knowledge of its private state.
///
/// Receives the address of the contract on which discovery is performed along with its
/// \`compute_note_hash_and_nullifier\` function.
pub unconstrained fn discover_new_messages<Env>(
    contract_address: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
) {
    debug_log("Performing message discovery");

    private_logs::fetch_and_process_private_tagged_logs(
        contract_address,
        compute_note_hash_and_nullifier,
    );

    partial_notes::fetch_and_process_public_partial_note_completion_logs(
        contract_address,
        compute_note_hash_and_nullifier,
    );
}
`},104:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",source:`use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};

use dep::protocol_types::{
    address::AztecAddress,
    constants::MAX_NOTE_HASHES_PER_TX,
    debug_log::debug_log_format,
    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},
    traits::ToField,
};

/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*
/// the complete note information, since it does not include content, storage slot, etc.
pub struct DiscoveredNoteInfo {
    pub nonce: Field,
    pub note_hash: Field,
    pub inner_nullifier: Field,
}

/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible
/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in
/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most
/// cases it will contain a single element.
///
/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,
/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.
pub unconstrained fn attempt_note_nonce_discovery<Env>(
    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,
    first_nullifier_in_tx: Field,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
    contract_address: AztecAddress,
    storage_slot: Field,
    note_type_id: Field,
    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,
) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {
    let discovered_notes = &mut BoundedVec::new();

    debug_log_format(
        "Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}",
        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],
    );

    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,
    // is one of the note hashes created by the transaction.
    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {
        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the
        // new note hashes array. We therefore know for each note in every transaction what its nonce is.
        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);

        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches
        // the note hash at the array index we're currently processing.
        // TODO(#11157): handle failed note_hash_and_nullifier computation
        let hashes = compute_note_hash_and_nullifier(
            packed_note,
            storage_slot,
            note_type_id,
            contract_address,
            candidate_nonce,
        )
            .expect(f"Failed to compute a note hash for note type {note_type_id}");

        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);
        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);

        if unique_note_hash == expected_unique_note_hash {
            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we
            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows
            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then
            // PXE may fail to realize that a given note has been nullified already, and calls to the application
            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an
            // application already has more direct means of making a call to it fail the transaction.
            discovered_notes.push(
                DiscoveredNoteInfo {
                    nonce: candidate_nonce,
                    note_hash: hashes.note_hash,
                    inner_nullifier: hashes.inner_nullifier,
                },
            );

            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present
            // multiple times in the same transaction with different nonces. This typically doesn't happen due to
            // notes containing random values in order to hide their contents.
        }
    });

    debug_log_format(
        "Discovered a total of {0} notes",
        [discovered_notes.len() as Field],
    );

    *discovered_notes
}

mod test {
    use crate::{
        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},
        note::{
            note_interface::{NoteHash, NoteType},
            note_metadata::SettledNoteMetadata,
            retrieved_note::RetrievedNote,
            utils::compute_note_hash_for_nullify,
        },
        oracle::random::random,
        test::mocks::mock_note::MockNote,
        utils::array,
    };

    use dep::protocol_types::{
        address::AztecAddress,
        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},
        traits::{FromField, Packable},
    };

    use super::attempt_note_nonce_discovery;

    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real
    // implementation, and as a sanity check that the interface is sufficient.
    unconstrained fn compute_note_hash_and_nullifier(
        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,
        storage_slot: Field,
        note_type_id: Field,
        contract_address: AztecAddress,
        nonce: Field,
    ) -> Option<NoteHashAndNullifier> {
        if note_type_id == MockNote::get_id() {
            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));
            let note_hash = note.compute_note_hash(storage_slot);

            let note_hash_for_nullify = compute_note_hash_for_nullify(
                RetrievedNote {
                    note,
                    contract_address,
                    metadata: SettledNoteMetadata::new(nonce).into(),
                },
                storage_slot,
            );

            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);

            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })
        } else {
            Option::none()
        }
    }

    global VALUE: Field = 7;
    global FIRST_NULLIFIER_IN_TX: Field = 47;
    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);
    global STORAGE_SLOT: Field = 99;

    #[test]
    unconstrained fn no_note_hashes() {
        let unique_note_hashes_in_tx = BoundedVec::new();
        let packed_note = BoundedVec::new();

        let discovered_notes = attempt_note_nonce_discovery(
            unique_note_hashes_in_tx,
            FIRST_NULLIFIER_IN_TX,
            compute_note_hash_and_nullifier,
            CONTRACT_ADDRESS,
            STORAGE_SLOT,
            MockNote::get_id(),
            packed_note,
        );

        assert_eq(discovered_notes.len(), 0);
    }

    #[test(should_fail_with = "Failed to compute a note hash")]
    unconstrained fn failed_hash_computation() {
        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);
        let packed_note = BoundedVec::new();
        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier

        let discovered_notes = attempt_note_nonce_discovery(
            unique_note_hashes_in_tx,
            FIRST_NULLIFIER_IN_TX,
            compute_note_hash_and_nullifier,
            CONTRACT_ADDRESS,
            STORAGE_SLOT,
            note_type_id,
            packed_note,
        );

        assert_eq(discovered_notes.len(), 0);
    }

    struct NoteAndData {
        note: MockNote,
        nonce: Field,
        note_hash: Field,
        unique_note_hash: Field,
        inner_nullifier: Field,
    }

    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {
        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);

        let retrieved_note = MockNote::new(value)
            .contract_address(CONTRACT_ADDRESS)
            .note_metadata(SettledNoteMetadata::new(nonce).into())
            .build_retrieved_note();
        let note = retrieved_note.note;

        let note_hash = note.compute_note_hash(STORAGE_SLOT);
        let unique_note_hash =
            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));
        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(
            retrieved_note,
            STORAGE_SLOT,
        ));

        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }
    }

    #[test]
    unconstrained fn single_note() {
        let note_index_in_tx = 2;
        let note_and_data = construct_note(VALUE, note_index_in_tx);

        let mut unique_note_hashes_in_tx = BoundedVec::from_array([
            random(), random(), random(), random(), random(), random(), random(),
        ]);
        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);

        let discovered_notes = attempt_note_nonce_discovery(
            unique_note_hashes_in_tx,
            FIRST_NULLIFIER_IN_TX,
            compute_note_hash_and_nullifier,
            CONTRACT_ADDRESS,
            STORAGE_SLOT,
            MockNote::get_id(),
            BoundedVec::from_array(note_and_data.note.pack()),
        );

        assert_eq(discovered_notes.len(), 1);
        let discovered_note = discovered_notes.get(0);

        assert_eq(discovered_note.nonce, note_and_data.nonce);
        assert_eq(discovered_note.note_hash, note_and_data.note_hash);
        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);
    }

    #[test]
    unconstrained fn multiple_notes_same_preimage() {
        let first_note_index_in_tx = 3;
        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);

        let second_note_index_in_tx = 5;
        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);

        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same
        // call.
        assert_eq(first_note_and_data.note, second_note_and_data.note);
        let packed_note = first_note_and_data.note.pack();

        let mut unique_note_hashes_in_tx = BoundedVec::from_array([
            random(), random(), random(), random(), random(), random(), random(),
        ]);
        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);
        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);

        let discovered_notes = attempt_note_nonce_discovery(
            unique_note_hashes_in_tx,
            FIRST_NULLIFIER_IN_TX,
            compute_note_hash_and_nullifier,
            CONTRACT_ADDRESS,
            STORAGE_SLOT,
            MockNote::get_id(),
            BoundedVec::from_array(packed_note),
        );

        assert_eq(discovered_notes.len(), 2);

        assert(discovered_notes.any(|discovered_note| {
            (discovered_note.nonce == first_note_and_data.nonce)
                & (discovered_note.note_hash == first_note_and_data.note_hash)
                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)
        }));

        assert(discovered_notes.any(|discovered_note| {
            (discovered_note.nonce == second_note_and_data.nonce)
                & (discovered_note.note_hash == second_note_and_data.note_hash)
                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)
        }));
    }
}
`},105:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",source:`use crate::{
    capsules::CapsuleArray,
    messages::{
        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},
        encoding::MAX_MESSAGE_CONTENT_LEN,
    },
    oracle::message_discovery::{deliver_note, get_log_by_tag},
    utils::array,
};

use dep::protocol_types::{
    address::AztecAddress,
    constants::PUBLIC_LOG_SIZE_IN_FIELDS,
    debug_log::debug_log_format,
    hash::sha256_to_field,
    traits::{Deserialize, Serialize, ToField},
};

global PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;

/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message
/// (e.g. the storage slot, note completion log tag, etc.).
pub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =
    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;

/// The slot in the PXE capsules where we store a \`CapsuleArray\` of \`DeliveredPendingPartialNote\`.
pub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(
    "AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT".as_bytes(),
);

/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial
/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of
/// the packed public content.
// TODO(#10273): improve how contract log siloing is handled
pub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;

/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log
/// size and extra fields in the log (e.g. the tag).
pub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =
    PUBLIC_LOG_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;

/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the
/// log that will complete it and lead to a note being discovered and delivered.
#[derive(Serialize, Deserialize)]
pub(crate) struct DeliveredPendingPartialNote {
    pub(crate) note_completion_log_tag: Field,
    pub(crate) storage_slot: Field,
    pub(crate) note_type_id: Field,
    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,
    pub(crate) recipient: AztecAddress,
}

pub unconstrained fn process_partial_note_private_msg(
    contract_address: AztecAddress,
    recipient: AztecAddress,
    msg_metadata: u64,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
) {
    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =
        decode_partial_note_private_msg(msg_metadata, msg_content);

    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search
    // for the public log that will complete it.
    let pending = DeliveredPendingPartialNote {
        note_completion_log_tag,
        storage_slot,
        note_type_id,
        packed_private_note_content,
        recipient,
    };

    CapsuleArray::at(
        contract_address,
        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,
    )
        .push(pending);
}

/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the
/// notes being delivered to PXE if completed.
pub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(
    contract_address: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
) {
    let pending_partial_notes = CapsuleArray::at(
        contract_address,
        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,
    );

    debug_log_format(
        "{} pending partial notes",
        [pending_partial_notes.len() as Field],
    );

    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {
        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);
        if maybe_log.is_none() {
            debug_log_format(
                "Found no completion logs for partial note with tag {}",
                [pending_partial_note.note_completion_log_tag],
            );

            // Note that we're not removing the pending partial note from the capsule array, so we will continue
            // searching for this tagged log when performing message discovery in the future until we either find it or
            // the entry is somehow removed from the array.
        } else {
            debug_log_format(
                "Completion log found for partial note with tag {}",
                [pending_partial_note.note_completion_log_tag],
            );
            let log = maybe_log.unwrap();

            // Public logs have an extra field at the beginning with the contract address, which we use to verify
            // that we're getting the logs from the expected contract.
            // TODO(#10273): improve how contract log siloing is handled
            assert_eq(
                log.log_content.get(0),
                contract_address.to_field(),
                "Got a public log emitted by a different contract",
            );

            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the
            // private and public packed fields (i.e. the contents of the private message and public log sans the extra
            // fields) to get the complete packed content.
            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =
                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);
            let complete_packed_note = array::append(
                pending_partial_note.packed_private_note_content,
                packed_public_note_content,
            );

            let discovered_notes = attempt_note_nonce_discovery(
                log.unique_note_hashes_in_tx,
                log.first_nullifier_in_tx,
                compute_note_hash_and_nullifier,
                contract_address,
                pending_partial_note.storage_slot,
                pending_partial_note.note_type_id,
                complete_packed_note,
            );

            debug_log_format(
                "Discovered {0} notes for partial note with tag {1}",
                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],
            );

            discovered_notes.for_each(|discovered_note| {
                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a
                // temporary node connectivity issue - is simply throwing good enough here?
                assert(
                    deliver_note(
                        contract_address,
                        pending_partial_note.storage_slot,
                        discovered_note.nonce,
                        complete_packed_note,
                        discovered_note.note_hash,
                        discovered_note.inner_nullifier,
                        log.tx_hash,
                        pending_partial_note.recipient,
                    ),
                    "Failed to deliver note",
                );
            });

            // Because there is only a single log for a given tag, once we've processed the tagged log then we
            // simply delete the pending work entry, regardless of whether it was actually completed or not.
            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note
            // being completed.
            pending_partial_notes.remove(i);
        }
    });
}

fn decode_partial_note_private_msg(
    msg_metadata: u64,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {
    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field

    assert(
        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,
        f"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields",
    );

    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the
    // destructuring of the partial note private message encoding below must be updated as well.
    std::static_assert(
        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,
        "unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN",
    );

    // We currently have two fields that are not the partial note's packed representation, which are the storage slot
    // and the note completion log tag.
    let storage_slot = msg_content.get(0);
    let note_completion_log_tag = msg_content.get(1);

    let packed_private_note_content = array::subbvec(msg_content, 2);

    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)
}
`},107:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",source:`use crate::{
    capsules::CapsuleArray,
    messages::{
        discovery::{
            ComputeNoteHashAndNullifier,
            partial_notes::process_partial_note_private_msg,
            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},
            private_notes::process_private_note_msg,
        },
        encoding::decode_message,
        encryption::{aes128::AES128, log_encryption::LogEncryption},
        msg_type::{
            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,
        },
    },
    oracle::{logs::store_private_event_log, message_discovery::fetch_tagged_logs},
    utils::array,
};

use protocol_types::{
    abis::event_selector::EventSelector,
    address::AztecAddress,
    debug_log::{debug_log, debug_log_format},
    traits::FromField,
};

/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that
/// are stored in the PXE capsules so that \`fetch_and_process_public_partial_note_completion_logs\` can later search for
/// public logs that will complete them.
pub unconstrained fn fetch_and_process_private_tagged_logs<Env>(
    contract_address: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
) {
    // We will eventually perform log discovery via tagging here, but for now we simply call the \`fetchTaggedLogs\` oracle.
    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then
    // retrieved and processed here.
    fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);

    // Get the logs from the capsule array and process them one by one
    let logs =
        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);
    logs.for_each(|i, log: PendingTaggedLog| {
        process_log(contract_address, compute_note_hash_and_nullifier, log);
        logs.remove(i);
    });
}

/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.
///
/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the
/// transaction hash in which the notes would've been created (typically the same transaction in which the log was
/// emitted), along with the list of unique note hashes in said transaction and the \`compute_note_hash_and_nullifier\`
/// function.
///
/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to
/// search for the note's completion public log.
unconstrained fn process_log<Env>(
    contract_address: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
    pending_tagged_log: PendingTaggedLog,
) {
    debug_log_format(
        "Processing log with tag {0}",
        [pending_tagged_log.log.get(0)],
    );

    // The tag is ignored for now.
    let ciphertext = array::subbvec(pending_tagged_log.log, 1);

    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);

    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We
    // have 3 log types: private note logs, partial note logs and event logs.

    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);

    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {
        debug_log("Processing private note msg");

        process_private_note_msg(
            contract_address,
            pending_tagged_log.tx_hash,
            pending_tagged_log.unique_note_hashes_in_tx,
            pending_tagged_log.first_nullifier_in_tx,
            pending_tagged_log.recipient,
            compute_note_hash_and_nullifier,
            msg_metadata,
            msg_content,
        );
    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {
        debug_log("Processing partial note private msg");

        process_partial_note_private_msg(
            contract_address,
            pending_tagged_log.recipient,
            msg_metadata,
            msg_content,
        );
    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {
        debug_log("Processing private event msg");

        // In the case of events, the msg metadata is the event selector.
        let event_selector = EventSelector::from_field(msg_metadata as Field);

        store_private_event_log(
            contract_address,
            pending_tagged_log.recipient,
            event_selector,
            msg_content,
            pending_tagged_log.tx_hash,
            pending_tagged_log.log_index_in_tx,
            pending_tagged_log.tx_index_in_block,
        );
    } else {
        debug_log_format("Unknown msg type id {0}", [msg_type_id as Field]);
    }
}
`},108:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",source:`use crate::{
    messages::{
        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},
        encoding::MAX_MESSAGE_CONTENT_LEN,
    },
    oracle,
    utils::array,
};
use protocol_types::{
    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,
};

/// The number of fields in a private note message content that are not the note's packed representation.
global PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;

/// The maximum length of the packed representation of a note's contents. This is limited by private log size,
/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).
pub global MAX_NOTE_PACKED_LEN: u32 =
    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;

pub unconstrained fn process_private_note_msg<Env>(
    contract_address: AztecAddress,
    tx_hash: Field,
    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,
    first_nullifier_in_tx: Field,
    recipient: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
    msg_metadata: u64,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
) {
    let (note_type_id, storage_slot, packed_note) =
        decode_private_note_msg(msg_metadata, msg_content);

    attempt_note_discovery(
        contract_address,
        tx_hash,
        unique_note_hashes_in_tx,
        first_nullifier_in_tx,
        recipient,
        compute_note_hash_and_nullifier,
        storage_slot,
        note_type_id,
        packed_note,
    );
}

/// Attempts discovery of a note given information about its contents and the transaction in which it is
/// suspected the note was created.
pub unconstrained fn attempt_note_discovery<Env>(
    contract_address: AztecAddress,
    tx_hash: Field,
    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,
    first_nullifier_in_tx: Field,
    recipient: AztecAddress,
    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,
    storage_slot: Field,
    note_type_id: Field,
    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,
) {
    let discovered_notes = attempt_note_nonce_discovery(
        unique_note_hashes_in_tx,
        first_nullifier_in_tx,
        compute_note_hash_and_nullifier,
        contract_address,
        storage_slot,
        note_type_id,
        packed_note,
    );

    debug_log_format(
        "Discovered {0} notes from a private message",
        [discovered_notes.len() as Field],
    );

    discovered_notes.for_each(|discovered_note| {
        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity
        // issue, and we should perhaps not have marked the tag index as taken.
        assert(
            oracle::message_discovery::deliver_note(
                contract_address,
                storage_slot,
                discovered_note.nonce,
                packed_note,
                discovered_note.note_hash,
                discovered_note.inner_nullifier,
                tx_hash,
                recipient,
            ),
            "Failed to deliver note",
        );
    });
}

fn decode_private_note_msg(
    msg_metadata: u64,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {
    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field

    assert(
        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,
        f"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields",
    );

    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the
    // destructuring of the private note message encoding below must be updated as well.
    std::static_assert(
        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,
        "unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN",
    );

    // We currently have a single field that is not the note's packed representation, which is the storage slot.
    let storage_slot = msg_content.get(0);
    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);

    (note_type_id, storage_slot, packed_note)
}
`},109:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",source:`// TODO(#12750): don't make these values assume we're using AES.
use crate::{
    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,
};

global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;

global MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;

// The standard message layout is composed of:
//  - an initial field called the 'expanded metadata'
//  - an arbitrary number of fields following that called the 'message content'
//
// \`\`\`
// message: [ msg_expanded_metadata, ...msg_content ]
// \`\`\`
//
// The expanded metadata itself is interpreted as a u128, of which:
//  - the upper 64 bits are the message type id
//  - the lower 64 bits are called the 'message metadata'
//
// \`\`\`
// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]
//                        <---  64 bits --->|<--- 64 bits --->
// \`\`\`
//
// The meaning of the message metadata and message content depend on the value of the message type id. Note that there
// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different
// name to make it distinct from the message content given that it is not a full field.

/// The maximum length of a message's content, i.e. not including the expanded message metadata.
pub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;

/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with
/// \`decode_message\` to retrieve the original values.
///
/// - The \`msg_type\` is an identifier that groups types of messages that are all processed the same way, e.g. private
/// notes or events. Possible values are defined in \`aztec::messages::msg_type\`.
/// - The \`msg_metadata\` and \`msg_content\` are the values stored in the message, whose meaning depends on the
///  \`msg_type\`. The only special thing about \`msg_metadata\` that separates it from \`msg_content\` is that it is a u64
/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into
/// this smaller variable to achieve higher data efficiency.
pub fn encode_message<let N: u32>(
    msg_type: u64,
    msg_metadata: u64,
    msg_content: [Field; N],
) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {
    std::static_assert(
        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,
        "Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN",
    );

    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of
    // the message encoding below must be updated as well.
    std::static_assert(
        MESSAGE_EXPANDED_METADATA_LEN == 1,
        "unexpected value for MESSAGE_EXPANDED_METADATA_LEN",
    );
    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();

    message[0] = to_expanded_metadata(msg_type, msg_metadata);
    for i in 0..msg_content.len() {
        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];
    }

    message
}

/// Decodes a standard aztec-nr message, i.e. one created via \`encode_message\`, returning the original encoded values.
///
/// Note that \`encode_message\` returns a fixed size array while this function takes a \`BoundedVec\`: this is because
/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with
/// fixed-size messages, consider using \`BoundedVec::from_array\` to convert them.
pub unconstrained fn decode_message(
    message: BoundedVec<Field, MAX_MESSAGE_LEN>,
) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {
    assert(
        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,
        f"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields",
    );

    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of
    // the message encoding below must be updated as well.
    std::static_assert(
        MESSAGE_EXPANDED_METADATA_LEN == 1,
        "unexpected value for MESSAGE_EXPANDED_METADATA_LEN",
    );

    let msg_expanded_metadata = message.get(0);
    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);
    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);

    (msg_type_id, msg_metadata, msg_content)
}

global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);

fn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {
    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are
    // expensive in circuits.
    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;
    let msg_metadata_field = msg_metadata as Field;

    type_field + msg_metadata_field
}

fn from_expanded_metadata(input: Field) -> (u64, u64) {
    input.assert_max_bit_size::<128>();
    let msg_metadata = (input as u64);
    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;
    // Use division instead of bit shift since bit shifts are expensive in circuits
    (msg_type, msg_metadata)
}

mod tests {
    use crate::utils::array::subarray::subarray;
    use super::{
        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,
        to_expanded_metadata,
    };

    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;
    global U128_MAX: Field = (2.pow_32(128) - 1);

    #[test]
    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {
        let encoded = encode_message(msg_type, msg_metadata, []);
        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =
            decode_message(BoundedVec::from_array(encoded));

        assert_eq(decoded_msg_type, msg_type);
        assert_eq(decoded_msg_metadata, msg_metadata);
        assert_eq(decoded_msg_content.len(), 0);
    }

    #[test]
    unconstrained fn encode_decode_short_message(
        msg_type: u64,
        msg_metadata: u64,
        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],
    ) {
        let encoded = encode_message(msg_type, msg_metadata, msg_content);
        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =
            decode_message(BoundedVec::from_array(encoded));

        assert_eq(decoded_msg_type, msg_type);
        assert_eq(decoded_msg_metadata, msg_metadata);
        assert_eq(decoded_msg_content.len(), msg_content.len());
        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);
    }

    #[test]
    unconstrained fn encode_decode_full_message(
        msg_type: u64,
        msg_metadata: u64,
        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],
    ) {
        let encoded = encode_message(msg_type, msg_metadata, msg_content);
        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =
            decode_message(BoundedVec::from_array(encoded));

        assert_eq(decoded_msg_type, msg_type);
        assert_eq(decoded_msg_metadata, msg_metadata);
        assert_eq(decoded_msg_content.len(), msg_content.len());
        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);
    }

    #[test]
    unconstrained fn to_expanded_metadata_packing() {
        // Test case 1: All bits set
        let packed = to_expanded_metadata(U64_MAX, U64_MAX);
        let (msg_type, msg_metadata) = from_expanded_metadata(packed);
        assert_eq(msg_type, U64_MAX);
        assert_eq(msg_metadata, U64_MAX);

        // Test case 2: Only log type bits set
        let packed = to_expanded_metadata(U64_MAX, 0);
        let (msg_type, msg_metadata) = from_expanded_metadata(packed);
        assert_eq(msg_type, U64_MAX);
        assert_eq(msg_metadata, 0);

        // Test case 3: Only msg_metadata bits set
        let packed = to_expanded_metadata(0, U64_MAX);
        let (msg_type, msg_metadata) = from_expanded_metadata(packed);
        assert_eq(msg_type, 0);
        assert_eq(msg_metadata, U64_MAX);

        // Test case 4: No bits set
        let packed = to_expanded_metadata(0, 0);
        let (msg_type, msg_metadata) = from_expanded_metadata(packed);
        assert_eq(msg_type, 0);
        assert_eq(msg_metadata, 0);
    }

    #[test]
    unconstrained fn from_expanded_metadata_packing() {
        // Test case 1: All bits set
        let input = U128_MAX as Field;
        let (msg_type, msg_metadata) = from_expanded_metadata(input);
        assert_eq(msg_type, U64_MAX);
        assert_eq(msg_metadata, U64_MAX);

        // Test case 2: Only log type bits set
        let input = (U128_MAX - U64_MAX as Field);
        let (msg_type, msg_metadata) = from_expanded_metadata(input);
        assert_eq(msg_type, U64_MAX);
        assert_eq(msg_metadata, 0);

        // Test case 3: Only msg_metadata bits set
        let input = U64_MAX as Field;
        let (msg_type, msg_metadata) = from_expanded_metadata(input);
        assert_eq(msg_type, 0);
        assert_eq(msg_metadata, U64_MAX);

        // Test case 4: No bits set
        let input = 0;
        let (msg_type, msg_metadata) = from_expanded_metadata(input);
        assert_eq(msg_type, 0);
        assert_eq(msg_metadata, 0);
    }

    #[test]
    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {
        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);
        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);

        assert_eq(original_msg_type, unpacked_msg_type);
        assert_eq(original_msg_metadata, unpacked_msg_metadata);
    }
}
`},110:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",source:`use dep::protocol_types::{
    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},
    hash::poseidon2_hash_with_separator,
    point::Point,
};

use crate::{
    keys::{
        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,
        ephemeral::generate_ephemeral_key_pair,
    },
    messages::{
        encryption::log_encryption::{
            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,
            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,
            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,
        },
        logs::arithmetic_generics_utils::{
            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,
        },
    },
    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},
    prelude::AztecAddress,
    utils::{
        array,
        conversion::{
            bytes_to_fields::{bytes_from_fields, bytes_to_fields},
            fields_to_bytes::{fields_from_bytes, fields_to_bytes},
        },
        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},
        random::get_random_bytes,
    },
};

use std::aes128::aes128_encrypt;

fn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(
    shared_secret: Point,
) -> [u8; 32] {
    let rand1: Field = poseidon2_hash_with_separator(
        [shared_secret.x, shared_secret.y],
        GENERATOR_INDEX__SYMMETRIC_KEY,
    );
    let rand2: Field = poseidon2_hash_with_separator(
        [shared_secret.x, shared_secret.y],
        GENERATOR_INDEX__SYMMETRIC_KEY_2,
    );
    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();
    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();
    let mut bytes: [u8; 32] = [0; 32];
    for i in 0..16 {
        bytes[i] = rand1_bytes[i];
        bytes[i + 1] = rand2_bytes[i];
    }
    bytes
}

// TODO(#10537): Consider nuking this function.
fn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(
    shared_secret: Point,
) -> [u8; 32] {
    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);

    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();
    for i in 0..shared_secret_bytes.len() {
        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];
    }
    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;

    sha256::digest(shared_secret_bytes_with_separator)
}

fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(
    shared_secret: Point,
    randomness_extraction_fn: fn(Point) -> [u8; 32],
) -> ([u8; 16], [u8; 16]) {
    let random_256_bits = randomness_extraction_fn(shared_secret);
    let mut sym_key = [0; 16];
    let mut iv = [0; 16];
    for i in 0..16 {
        sym_key[i] = random_256_bits[i];
        iv[i] = random_256_bits[i + 16];
    }
    (sym_key, iv)
}

// TODO(#10537): Consider nuking this function.
pub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
    shared_secret: Point,
) -> ([u8; 16], [u8; 16]) {
    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(
        shared_secret,
        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,
    )
}

// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.
pub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(
    shared_secret: Point,
) -> ([u8; 16], [u8; 16]) {
    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(
        shared_secret,
        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,
    )
}

pub struct AES128 {}

impl LogEncryption for AES128 {
    fn encrypt_log<let PLAINTEXT_LEN: u32>(
        plaintext: [Field; PLAINTEXT_LEN],
        recipient: AztecAddress,
    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {
        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.
        // (This process is then reversed when processing the log in \`do_process_log\`)
        let plaintext_bytes = fields_to_bytes(plaintext);

        // *****************************************************************************
        // Compute the shared secret
        // *****************************************************************************

        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();

        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;

        // (not to be confused with the tagging shared secret)
        let ciphertext_shared_secret =
            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);

        // TODO: also use this shared secret for deriving note randomness.

        // *****************************************************************************
        // Convert the plaintext into whatever format the encryption function expects
        // *****************************************************************************

        // Already done for this strategy: AES expects bytes.

        // *****************************************************************************
        // Encrypt the plaintext
        // *****************************************************************************

        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
            ciphertext_shared_secret,
        );

        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);

        // |full_pt| = |pt_length| + |pt|
        // |pt_aes_padding| = 16 - (|full_pt| % 16)
        // or... since a % b is the same as a - b * (a // b) (integer division), so:
        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))
        // |ct| = |full_pt| + |pt_aes_padding|
        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))
        //      = 16 + 16 * (|full_pt| // 16)
        //      = 16 * (1 + |full_pt| // 16)
        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));

        // *****************************************************************************
        // Compute the header ciphertext
        // *****************************************************************************

        // Header contains only the length of the ciphertext stored in 2 bytes.
        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.
        // This would be more costly constraint-wise but cheaper DA-wise.
        let mut header_plaintext: [u8; 2] = [0 as u8; 2];
        let ciphertext_bytes_length = ciphertext_bytes.len();
        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;
        header_plaintext[1] = ciphertext_bytes_length as u8;

        // TODO: this is insecure and wasteful:
        // "Insecure", because the esk shouldn't be used twice (once for the header,
        // and again for the proper ciphertext) (at least, I never got the
        // "go ahead" that this would be safe, unfortunately).
        // "Wasteful", because the exact same computation is happening further down.
        // I'm leaving that 2nd computation where it is, because this 1st computation
        // will be imminently deleted, when the header logic is deleted.
        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
            ciphertext_shared_secret,
        );

        // Note: the aes128_encrypt builtin fn automatically appends bytes to the
        // input, according to pkcs#7; hence why the output \`header_ciphertext_bytes\` is 16
        // bytes larger than the input in this case.
        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);
        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:
        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);

        // *****************************************************************************
        // Prepend / append more bytes of data to the ciphertext, before converting back
        // to fields.
        // *****************************************************************************

        let mut log_bytes_padding_to_mult_31 =
            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();
        // Safety: this randomness won't be constrained to be random. It's in the
        // interest of the executor of this fn to encrypt with random bytes.
        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };

        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();

        assert(
            log_bytes.len() % 31 == 0,
            "Unexpected error: log_bytes.len() should be divisible by 31, by construction.",
        );

        log_bytes[0] = eph_pk_sign_byte;
        let mut offset = 1;
        for i in 0..header_ciphertext_bytes.len() {
            log_bytes[offset + i] = header_ciphertext_bytes[i];
        }
        offset += header_ciphertext_bytes.len();

        for i in 0..ciphertext_bytes.len() {
            log_bytes[offset + i] = ciphertext_bytes[i];
        }
        offset += ciphertext_bytes.len();

        for i in 0..log_bytes_padding_to_mult_31.len() {
            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];
        }

        assert(
            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),
            "Something has gone wrong",
        );

        // *****************************************************************************
        // Convert bytes back to fields
        // *****************************************************************************

        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes
        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function
        // should cover a full field.
        let log_bytes_as_fields = bytes_to_fields(log_bytes);

        // *****************************************************************************
        // Prepend / append fields, to create the final log
        // *****************************************************************************

        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];

        ciphertext[0] = eph_pk.x;

        let mut offset = 1;
        for i in 0..log_bytes_as_fields.len() {
            ciphertext[offset + i] = log_bytes_as_fields[i];
        }
        offset += log_bytes_as_fields.len();

        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {
            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log
            // (all the "real" log fields contain at most 31 bytes because of the way we convert the bytes to fields).
            // TODO(#12749): Long term, this is not a good solution.

            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its
            // contents publicly. It is therefore fine to trust the sender to provide random padding.
            let field_bytes = unsafe { get_random_bytes::<31>() };
            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);
        }

        ciphertext
    }

    unconstrained fn decrypt_log(
        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,
        recipient: AztecAddress,
    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {
        let eph_pk_x = ciphertext.get(0);

        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(
            ciphertext,
            EPH_PK_X_SIZE_IN_FIELDS,
        );

        // Convert the ciphertext represented as fields to a byte representation (its original format)
        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);

        // First byte of the ciphertext represents the ephemeral public key sign
        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;
        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point
        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);

        // Derive shared secret and symmetric key
        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);
        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(
            ciphertext_shared_secret,
        );

        // Extract the header ciphertext
        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte
        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =
            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);
        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work
        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length
        // is fixed. But we do it anyway to not have to have duplicate oracles.
        let header_ciphertext_bvec =
            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);

        // Decrypt header
        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);

        // Extract ciphertext length from header (2 bytes, big-endian)
        let ciphertext_length =
            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);

        // Extract and decrypt main ciphertext
        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;
        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =
            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);
        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =
            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);

        // Decrypt main ciphertext and return it
        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);

        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.
        fields_from_bytes(plaintext_bytes)
    }
}

mod test {
    use crate::{
        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,
        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},
        test::helpers::test_environment::TestEnvironment,
    };
    use super::AES128;
    use protocol_types::{
        address::AztecAddress,
        indexed_tagging_secret::IndexedTaggingSecret,
        traits::{Deserialize, FromField},
    };
    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};

    #[test]
    unconstrained fn encrypt_decrypt_log() {
        let mut env = TestEnvironment::new();
        // Advance 1 block so we can read historic state from private
        env.advance_block_by(1);

        let plaintext = [1, 2, 3];

        let recipient = AztecAddress::from_field(
            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,
        );

        // Mock random values for deterministic test
        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;
        let _ = OracleMock::mock("getRandomField").returns(eph_sk).times(1);

        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;
        let _ = OracleMock::mock("getRandomField").returns(randomness).times(1000000);

        let _ = OracleMock::mock("getIndexedTaggingSecretAsSender").returns(
            IndexedTaggingSecret::deserialize([69420, 1337]),
        );
        let _ = OracleMock::mock("incrementAppTaggingSecretIndexAsSender").returns(());

        // Encrypt the log
        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));

        // Mock shared secret for deterministic test
        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(
            EmbeddedCurveScalar::from_field(eph_sk),
            recipient,
        );
        let _ = OracleMock::mock("getSharedSecret").returns(shared_secret);

        // Decrypt the log
        let decrypted = AES128::decrypt_log(encrypted_log, recipient);

        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length
        // at compile time. For this reason we need to convert the original input to a BoundedVec.
        let plaintext_bvec =
            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);

        // Verify decryption matches original plaintext
        assert_eq(decrypted, plaintext_bvec, "Decrypted bytes should match original plaintext");

        // The following is a workaround of "struct is never constructed" Noir compilation error (we only ever use
        // static methods of the struct).
        let _ = AES128 {};
    }
}
`},131:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",source:`use protocol_types::traits::Serialize;

// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will
// eventually be simplified into something closer to:
//
// pub enum NoteMetadata {
//   PendingSamePhase{ note_hash_counter: u32 },
//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },
//   Settled{ nonce: Field },
// }
//
// For now, we have \`NoteMetadata\` acting as a sort of tagged union.

struct NoteStageEnum {
    /// A note that was created in the transaction that is currently being executed, during the current execution phase,
    /// i.e. non-revertible or revertible.
    ///
    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction
    /// (becoming a transient note).
    PENDING_SAME_PHASE: u8,
    /// A note that was created in the transaction that is currently being executed, during the previous execution
    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then
    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is
    /// the revertible phase.
    ///
    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this
    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)
    /// in order to avoid double spends once they become settled.
    PENDING_PREVIOUS_PHASE: u8,
    /// A note that was created in a prior transaction and is therefore already in the note hash tree.
    SETTLED: u8,
}

global NoteStage: NoteStageEnum =
    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };

/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel
/// read requests, as well as the correct nullifier to avoid double-spends.
///
/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In
/// order to access the underlying fields callers must first find the appropriate stage (e.g. via \`is_settled()\`) and
/// then convert this into the appropriate type (e.g. via \`to_settled()\`).
#[derive(Eq, Serialize)]
pub struct NoteMetadata {
    stage: u8,
    maybe_nonce: Field,
}

impl NoteMetadata {
    /// Constructs a \`NoteMetadata\` object from optional note hash counter and nonce. Both a zero note hash counter and
    /// a zero nonce are invalid, so those are used to signal non-existent values.
    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {
        if nonzero_note_hash_counter {
            if maybe_nonce == 0 {
                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }
            } else {
                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }
            }
        } else if maybe_nonce != 0 {
            Self { stage: NoteStage.SETTLED, maybe_nonce }
        } else {
            panic(
                f"Note has a zero note hash counter and no nonce - existence cannot be proven",
            )
        }
    }

    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current
    /// transaction during the current execution phase (either non-revertible or revertible).
    pub fn is_pending_same_phase(self) -> bool {
        self.stage == NoteStage.PENDING_SAME_PHASE
    }

    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current
    /// transaction during an execution phase prior to the current one. Because private execution only has two phases
    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current
    /// phase is the revertible phase.
    pub fn is_pending_previous_phase(self) -> bool {
        self.stage == NoteStage.PENDING_PREVIOUS_PHASE
    }

    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already
    /// in the note hash tree.
    pub fn is_settled(self) -> bool {
        self.stage == NoteStage.SETTLED
    }

    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.
    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {
        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);
        PendingSamePhaseNoteMetadata::new()
    }

    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.
    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {
        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);
        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)
    }

    /// Asserts that the metadata is that of a settled note and converts it accordingly.
    pub fn to_settled(self) -> SettledNoteMetadata {
        assert_eq(self.stage, NoteStage.SETTLED);
        SettledNoteMetadata::new(self.maybe_nonce)
    }
}

impl From<PendingSamePhaseNoteMetadata> for NoteMetadata {
    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {
        NoteMetadata::from_raw_data(true, std::mem::zeroed())
    }
}

impl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {
    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {
        NoteMetadata::from_raw_data(true, value.nonce())
    }
}

impl From<SettledNoteMetadata> for NoteMetadata {
    fn from(value: SettledNoteMetadata) -> Self {
        NoteMetadata::from_raw_data(false, value.nonce())
    }
}

/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel
/// read requests, as well as the correct nullifier to avoid double-spends.
///
/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being
/// executed during the current execution phase (either non-revertible or revertible).
pub struct PendingSamePhaseNoteMetadata {
    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no
    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash
    // counter we cannot constrain its value (and don't need to - only that it is non-zero).
}

impl PendingSamePhaseNoteMetadata {
    pub fn new() -> Self {
        Self {}
    }
}

/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel
/// read requests, as well as the correct nullifier to avoid double-spends.
///
/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently
/// being executed, during the previous execution phase. Because there are only two phases and their order is always the
/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,
/// and that the current phase is the revertible phase.
pub struct PendingPreviousPhaseNoteMetadata {
    nonce: Field,
    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot
    // constrain its value (and don't need to - only that it is non-zero).
}

impl PendingPreviousPhaseNoteMetadata {
    pub fn new(nonce: Field) -> Self {
        Self { nonce }
    }

    pub fn nonce(self) -> Field {
        self.nonce
    }
}

/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel
/// read requests, as well as the correct nullifier to avoid double-spends.
///
/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the
/// note hash tree.
pub struct SettledNoteMetadata {
    nonce: Field,
}

impl SettledNoteMetadata {
    pub fn new(nonce: Field) -> Self {
        Self { nonce }
    }

    pub fn nonce(self) -> Field {
        self.nonce
    }
}
`},134:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/note/utils.nr",source:`use crate::{
    context::PrivateContext,
    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},
};

use dep::protocol_types::hash::{
    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,
};

/// Returns the note hash that must be used to issue a private kernel read request for a note.
pub fn compute_note_hash_for_read_request<Note>(
    retrieved_note: RetrievedNote<Note>,
    storage_slot: Field,
) -> Field
where
    Note: NoteHash,
{
    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);

    if retrieved_note.metadata.is_settled() {
        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,
        // which is already in the note hash tree).
        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);
        compute_unique_note_hash(
            retrieved_note.metadata.to_settled().nonce(),
            siloed_note_hash,
        )
    } else {
        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by
        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash
        // counter).
        note_hash
    }
}

/// Returns the note hash that must be used to compute a note's nullifier when calling \`NoteHash::compute_nullifier\` or
/// \`NoteHash::compute_nullifier_unconstrained\`.
pub fn compute_note_hash_for_nullify<Note>(
    retrieved_note: RetrievedNote<Note>,
    storage_slot: Field,
) -> Field
where
    Note: NoteHash,
{
    compute_note_hash_for_nullify_from_read_request(
        retrieved_note,
        compute_note_hash_for_read_request(retrieved_note, storage_slot),
    )
}

/// Same as \`compute_note_hash_for_nullify\`, except it takes the note hash used in a read request (i.e. what
/// \`compute_note_hash_for_read_request\` would return). This is useful in scenarios where that hash has already been
/// computed to reduce constraints by reusing this value.
pub fn compute_note_hash_for_nullify_from_read_request<Note>(
    retrieved_note: RetrievedNote<Note>,
    note_hash_for_read_request: Field,
) -> Field {
    // There is just one instance in which the note hash for nullification does not match the note hash used for a read
    // request, which is when dealing with pending previous phase notes. These had their existence proven using their
    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be
    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the
    // *unique* note hash.
    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,
    // once the note is settled, resulting in a double spend.

    if retrieved_note.metadata.is_pending_previous_phase() {
        let siloed_note_hash =
            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);
        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();

        compute_unique_note_hash(nonce, siloed_note_hash)
    } else {
        note_hash_for_read_request
    }
}

/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.
pub fn compute_siloed_note_nullifier<Note>(
    retrieved_note: RetrievedNote<Note>,
    storage_slot: Field,
    context: &mut PrivateContext,
) -> Field
where
    Note: NoteHash,
{
    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);
    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);

    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)
}
`},138:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",source:`use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};

/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with \`load\`. If
/// data was already stored at this slot, it is overwritten.
pub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)
where
    T: Serialize<N>,
{
    let serialized = value.serialize();
    store_oracle(contract_address, slot, serialized);
}

/// Returns data previously stored via \`storeCapsule\` in the per-contract non-volatile database. Returns Option::none() if
/// nothing was stored at the given slot.
pub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>
where
    T: Deserialize<N>,
{
    let serialized_option = load_oracle::<N>(contract_address, slot, N);
    serialized_option.map(|arr| Deserialize::deserialize(arr))
}

/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.
pub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {
    delete_oracle(contract_address, slot);
}

/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data
/// structures by avoiding repeated calls to \`loadCapsule\` and \`storeCapsule\`.
/// Supports overlapping source and destination regions (which will result in the overlapped source values being
/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)
pub unconstrained fn copy(
    contract_address: AztecAddress,
    src_slot: Field,
    dst_slot: Field,
    num_entries: u32,
) {
    copy_oracle(contract_address, src_slot, dst_slot, num_entries);
}

#[oracle(storeCapsule)]
unconstrained fn store_oracle<let N: u32>(
    contract_address: AztecAddress,
    slot: Field,
    values: [Field; N],
) {}

/// We need to pass in \`array_len\` (the value of N) as a parameter to tell the oracle how many fields the response must
/// have.
///
/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would
/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected
/// response shape would be 3 single items, whereas it were a struct containing \`u32, [Field;10], u32\` then the expected
/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.
#[oracle(loadCapsule)]
unconstrained fn load_oracle<let N: u32>(
    contract_address: AztecAddress,
    slot: Field,
    array_len: u32,
) -> Option<[Field; N]> {}

#[oracle(deleteCapsule)]
unconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}

#[oracle(copyCapsule)]
unconstrained fn copy_oracle(
    contract_address: AztecAddress,
    src_slot: Field,
    dst_slot: Field,
    num_entries: u32,
) {}

mod test {
    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but
    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir
    // oracles are hooked up correctly.

    use crate::{
        oracle::capsules::{copy, delete, load, store},
        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},
    };
    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};

    unconstrained fn setup() -> AztecAddress {
        let env = TestEnvironment::new();
        env.contract_address()
    }

    global SLOT: Field = 1;

    #[test]
    unconstrained fn stores_and_loads() {
        let contract_address = setup();

        let value = MockStruct::new(5, 6);
        store(contract_address, SLOT, value);

        assert_eq(load(contract_address, SLOT).unwrap(), value);
    }

    #[test]
    unconstrained fn store_overwrites() {
        let contract_address = setup();

        let value = MockStruct::new(5, 6);
        store(contract_address, SLOT, value);

        let new_value = MockStruct::new(7, 8);
        store(contract_address, SLOT, new_value);

        assert_eq(load(contract_address, SLOT).unwrap(), new_value);
    }

    #[test]
    unconstrained fn loads_empty_slot() {
        let contract_address = setup();

        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);
        assert_eq(loaded_value, Option::none());
    }

    #[test]
    unconstrained fn deletes_stored_value() {
        let contract_address = setup();

        let value = MockStruct::new(5, 6);
        store(contract_address, SLOT, value);
        delete(contract_address, SLOT);

        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);
        assert_eq(loaded_value, Option::none());
    }

    #[test]
    unconstrained fn deletes_empty_slot() {
        let contract_address = setup();

        delete(contract_address, SLOT);
        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);
        assert_eq(loaded_value, Option::none());
    }

    #[test]
    unconstrained fn copies_non_overlapping_values() {
        let contract_address = setup();

        let src = 5;

        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];
        store(contract_address, src, values[0]);
        store(contract_address, src + 1, values[1]);
        store(contract_address, src + 2, values[2]);

        let dst = 10;
        copy(contract_address, src, dst, 3);

        assert_eq(load(contract_address, dst).unwrap(), values[0]);
        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);
        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);
    }

    #[test]
    unconstrained fn copies_overlapping_values_with_src_ahead() {
        let contract_address = setup();

        let src = 1;

        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];
        store(contract_address, src, values[0]);
        store(contract_address, src + 1, values[1]);
        store(contract_address, src + 2, values[2]);

        let dst = 2;
        copy(contract_address, src, dst, 3);

        assert_eq(load(contract_address, dst).unwrap(), values[0]);
        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);
        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);

        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]
        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)
        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]
        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]
    }

    #[test]
    unconstrained fn copies_overlapping_values_with_dst_ahead() {
        let contract_address = setup();

        let src = 2;

        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];
        store(contract_address, src, values[0]);
        store(contract_address, src + 1, values[1]);
        store(contract_address, src + 2, values[2]);

        let dst = 1;
        copy(contract_address, src, dst, 3);

        assert_eq(load(contract_address, dst).unwrap(), values[0]);
        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);
        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);

        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]
        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]
        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]
        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)
    }

    #[test(should_fail_with = "copy empty slot")]
    unconstrained fn cannot_copy_empty_values() {
        let contract_address = setup();

        copy(contract_address, SLOT, SLOT, 1);
    }

    #[test(should_fail_with = "not allowed to access")]
    unconstrained fn cannot_store_other_contract() {
        let contract_address = setup();
        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);

        let value = MockStruct::new(5, 6);
        store(other_contract_address, SLOT, value);
    }

    #[test(should_fail_with = "not allowed to access")]
    unconstrained fn cannot_load_other_contract() {
        let contract_address = setup();
        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);

        let _: Option<MockStruct> = load(other_contract_address, SLOT);
    }

    #[test(should_fail_with = "not allowed to access")]
    unconstrained fn cannot_delete_other_contract() {
        let contract_address = setup();
        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);

        delete(other_contract_address, SLOT);
    }

    #[test(should_fail_with = "not allowed to access")]
    unconstrained fn cannot_copy_other_contract() {
        let contract_address = setup();
        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);

        copy(other_contract_address, SLOT, SLOT, 0);
    }
}
`},139:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",source:`use dep::protocol_types::address::AztecAddress;

#[oracle(notifyEnqueuedPublicFunctionCall)]
unconstrained fn notify_enqueued_public_function_call_oracle(
    _contract_address: AztecAddress,
    _calldata_hash: Field,
    _side_effect_counter: u32,
    _is_static_call: bool,
) {}

unconstrained fn notify_enqueued_public_function_call_wrapper(
    contract_address: AztecAddress,
    calldata_hash: Field,
    side_effect_counter: u32,
    is_static_call: bool,
) {
    notify_enqueued_public_function_call_oracle(
        contract_address,
        calldata_hash,
        side_effect_counter,
        is_static_call,
    )
}

pub fn notify_enqueued_public_function_call(
    contract_address: AztecAddress,
    calldata_hash: Field,
    side_effect_counter: u32,
    is_static_call: bool,
) {
    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.
    unsafe {
        notify_enqueued_public_function_call_wrapper(
            contract_address,
            calldata_hash,
            side_effect_counter,
            is_static_call,
        )
    }
}

#[oracle(notifySetPublicTeardownFunctionCall)]
unconstrained fn notify_set_public_teardown_function_call_oracle(
    _contract_address: AztecAddress,
    _calldata_hash: Field,
    _side_effect_counter: u32,
    _is_static_call: bool,
) {}

unconstrained fn notify_set_public_teardown_function_call_wrapper(
    contract_address: AztecAddress,
    calldata_hash: Field,
    side_effect_counter: u32,
    is_static_call: bool,
) {
    notify_set_public_teardown_function_call_oracle(
        contract_address,
        calldata_hash,
        side_effect_counter,
        is_static_call,
    )
}

pub fn notify_set_public_teardown_function_call(
    contract_address: AztecAddress,
    calldata_hash: Field,
    side_effect_counter: u32,
    is_static_call: bool,
) {
    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.
    unsafe {
        notify_set_public_teardown_function_call_wrapper(
            contract_address,
            calldata_hash,
            side_effect_counter,
            is_static_call,
        )
    }
}

pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe
    // to call.
    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };
}

pub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {
    notify_set_min_revertible_side_effect_counter_oracle(counter);
}

#[oracle(notifySetMinRevertibleSideEffectCounter)]
unconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}
`},140:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",source:`use dep::protocol_types::address::AztecAddress;

#[oracle(getContractAddress)]
unconstrained fn get_contract_address_oracle() -> AztecAddress {}

#[oracle(getBlockNumber)]
unconstrained fn get_block_number_oracle() -> u32 {}

#[oracle(getChainId)]
unconstrained fn get_chain_id_oracle() -> Field {}

#[oracle(getVersion)]
unconstrained fn get_version_oracle() -> Field {}

pub unconstrained fn get_contract_address() -> AztecAddress {
    get_contract_address_oracle()
}

pub unconstrained fn get_block_number() -> u32 {
    get_block_number_oracle()
}

pub unconstrained fn get_chain_id() -> Field {
    get_chain_id_oracle()
}

pub unconstrained fn get_version() -> Field {
    get_version_oracle()
}
`},141:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",source:`/// Stores values represented as slice in execution cache to be later obtained by its hash.
pub fn store(values: [Field], hash: Field) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe
    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.
    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };
}

unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {
    store_in_execution_cache_oracle(values, hash);
}

pub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {
    load_from_execution_cache_oracle(hash)
}

#[oracle(storeInExecutionCache)]
unconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}

#[oracle(loadFromExecutionCache)]
unconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}
`},142:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",source:`use protocol_types::{
    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,
    traits::FromField,
};

// NOTE: this is for use in private only
#[oracle(getContractInstance)]
unconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}

// NOTE: this is for use in private only
unconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {
    get_contract_instance_oracle(address)
}

// NOTE: this is for use in private only
pub fn get_contract_instance(address: AztecAddress) -> ContractInstance {
    // Safety: The to_address function combines all values in the instance object to produce an address,
    // so by checking that we get the expected address we validate the entire struct.
    let instance = unsafe { get_contract_instance_internal(address) };
    assert_eq(instance.to_address(), address);

    instance
}

struct GetContractInstanceResult {
    exists: bool,
    member: Field,
}

// These oracles each return a ContractInstance member
// plus a boolean indicating whether the instance was found.
#[oracle(avmOpcodeGetContractInstanceDeployer)]
unconstrained fn get_contract_instance_deployer_oracle_avm(
    _address: AztecAddress,
) -> [GetContractInstanceResult; 1] {}
#[oracle(avmOpcodeGetContractInstanceClassId)]
unconstrained fn get_contract_instance_class_id_oracle_avm(
    _address: AztecAddress,
) -> [GetContractInstanceResult; 1] {}
#[oracle(avmOpcodeGetContractInstanceInitializationHash)]
unconstrained fn get_contract_instance_initialization_hash_oracle_avm(
    _address: AztecAddress,
) -> [GetContractInstanceResult; 1] {}

unconstrained fn get_contract_instance_deployer_internal_avm(
    address: AztecAddress,
) -> [GetContractInstanceResult; 1] {
    get_contract_instance_deployer_oracle_avm(address)
}
unconstrained fn get_contract_instance_class_id_internal_avm(
    address: AztecAddress,
) -> [GetContractInstanceResult; 1] {
    get_contract_instance_class_id_oracle_avm(address)
}
unconstrained fn get_contract_instance_initialization_hash_internal_avm(
    address: AztecAddress,
) -> [GetContractInstanceResult; 1] {
    get_contract_instance_initialization_hash_oracle_avm(address)
}

pub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {
    // Safety: AVM opcodes are constrained by the AVM itself
    let GetContractInstanceResult { exists, member } =
        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };
    if exists {
        Option::some(AztecAddress::from_field(member))
    } else {
        Option::none()
    }
}
pub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {
    // Safety: AVM opcodes are constrained by the AVM itself
    let GetContractInstanceResult { exists, member } =
        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };
    if exists {
        Option::some(ContractClassId::from_field(member))
    } else {
        Option::none()
    }
}
pub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {
    // Safety: AVM opcodes are constrained by the AVM itself
    let GetContractInstanceResult { exists, member } =
        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };
    if exists {
        Option::some(member)
    } else {
        Option::none()
    }
}
`},147:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",source:`use protocol_types::abis::validation_requests::KeyValidationRequest;

#[oracle(getKeyValidationRequest)]
unconstrained fn get_key_validation_request_oracle(
    _pk_m_hash: Field,
    _key_index: Field,
) -> KeyValidationRequest {}

pub unconstrained fn get_key_validation_request(
    pk_m_hash: Field,
    key_index: Field,
) -> KeyValidationRequest {
    get_key_validation_request_oracle(pk_m_hash, key_index)
}
`},148:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",source:`use dep::protocol_types::{
    address::{AztecAddress, PartialAddress},
    point::Point,
    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},
};

#[oracle(getPublicKeysAndPartialAddress)]
unconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}

pub unconstrained fn get_public_keys_and_partial_address(
    address: AztecAddress,
) -> (PublicKeys, PartialAddress) {
    let result = get_public_keys_and_partial_address_oracle(address);

    let keys = PublicKeys {
        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },
        ivpk_m: IvpkM {
            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },
        },
        ovpk_m: OvpkM {
            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },
        },
        tpk_m: TpkM {
            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },
        },
    };

    let partial_address = PartialAddress::from_field(result[12]);

    (keys, partial_address)
}
`},149:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",source:`use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;
use protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};

/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.
pub unconstrained fn notify_created_contract_class_log<let N: u32>(
    contract_address: AztecAddress,
    message: [Field; N],
    length: u32,
    counter: u32,
) {
    notify_created_contract_class_log_private_oracle(contract_address, message, length, counter)
}

#[oracle(notifyCreatedContractClassLog)]
unconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(
    contract_address: AztecAddress,
    message: [Field; N],
    length: u32,
    counter: u32,
) {}

pub unconstrained fn store_private_event_log(
    contract_address: AztecAddress,
    recipient: AztecAddress,
    event_selector: EventSelector,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
    tx_hash: Field,
    log_index_in_tx: Field,
    tx_index_in_block: Field,
) {
    store_private_event_log_oracle(
        contract_address,
        recipient,
        event_selector,
        msg_content,
        tx_hash,
        log_index_in_tx,
        tx_index_in_block,
    )
}

#[oracle(storePrivateEventLog)]
unconstrained fn store_private_event_log_oracle(
    contract_address: AztecAddress,
    recipient: AztecAddress,
    event_selector: EventSelector,
    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,
    tx_hash: Field,
    log_index_in_tx: Field,
    tx_index_in_block: Field,
) {}
`},150:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",source:`use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;
use dep::protocol_types::{
    address::AztecAddress,
    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_SIZE_IN_FIELDS},
};

/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes
/// them available for later processing in Noir by storing them in a capsule array.
pub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {
    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);
}

#[oracle(fetchTaggedLogs)]
unconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}

/// Informs PXE of a note's existence so that it can later be retrieved by the \`getNotes\` oracle. The note will be
/// scoped to \`contract_address\`, meaning other contracts will not be able to access it unless authorized.
///
/// The packed note is what \`getNotes\` will later return. PXE indexes notes by \`storage_slot\`, so this value
/// is typically used to filter notes that correspond to different state variables. \`note_hash\` and \`nullifier\` are
/// the inner hashes, i.e. the raw hashes returned by \`NoteHash::compute_note_hash\` and
/// \`NoteHash::compute_nullifier\`. PXE will verify that the siloed unique note hash was inserted into the tree
/// at \`tx_hash\`, and will store the nullifier to later check for nullification.
///
/// \`recipient\` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.
/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.
///
/// Returns true if the note was successfully delivered and added to PXE's database.
pub unconstrained fn deliver_note(
    contract_address: AztecAddress,
    storage_slot: Field,
    nonce: Field,
    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,
    note_hash: Field,
    nullifier: Field,
    tx_hash: Field,
    recipient: AztecAddress,
) -> bool {
    deliver_note_oracle(
        contract_address,
        storage_slot,
        nonce,
        packed_note,
        note_hash,
        nullifier,
        tx_hash,
        recipient,
    )
}

/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This
/// is the data required in order to discover notes that are being delivered in a log.
// TODO(#11639): this could also be used to fetch private logs, but the \`BoundedVec\` maximum length is that of a public
// log.
pub struct LogWithTxData {
    // The log fields length is PUBLIC_LOG_SIZE_IN_FIELDS. + 1 because the contract address is prepended to the content.
    pub log_content: BoundedVec<Field, PUBLIC_LOG_SIZE_IN_FIELDS + 1>,
    pub tx_hash: Field,
    /// The array of new note hashes created by \`tx_hash\`
    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,
    /// The first nullifier created by \`tx_hash\`
    pub first_nullifier_in_tx: Field,
}

/// Fetches a log from the node that has the corresponding \`tag\`. The log can be either a public or a private log, and
/// the tag is the first field in the log's content. Returns \`Option::none\` if no such log exists. Throws if more than
/// one log with that tag exists.
/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.
// TODO(#11627): handle multiple logs with the same tag.
// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.
pub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {
    get_log_by_tag_oracle(tag)
}

#[oracle(deliverNote)]
unconstrained fn deliver_note_oracle(
    contract_address: AztecAddress,
    storage_slot: Field,
    nonce: Field,
    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,
    note_hash: Field,
    nullifier: Field,
    tx_hash: Field,
    recipient: AztecAddress,
) -> bool {}

#[oracle(getLogByTag)]
unconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}
`},152:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",source:`use crate::note::{
    note_interface::NoteType,
    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},
};

use dep::protocol_types::{
    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,
};

/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same
/// transaction. This note should only be added to the non-volatile database if found in an actual block.
pub fn notify_created_note<let N: u32>(
    storage_slot: Field,
    note_type_id: Field,
    packed_note: [Field; N],
    note_hash: Field,
    counter: u32,
) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe
    // to call.
    unsafe {
        notify_created_note_oracle_wrapper(
            storage_slot,
            note_type_id,
            packed_note,
            note_hash,
            counter,
        )
    };
}

/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in
/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an
/// actual block.
pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to
    // call.
    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };
}

/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.
pub fn notify_created_nullifier(nullifier: Field) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to
    // call.
    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };
}

unconstrained fn notify_created_note_oracle_wrapper<let N: u32>(
    storage_slot: Field,
    note_type_id: Field,
    packed_note: [Field; N],
    note_hash: Field,
    counter: u32,
) {
    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);
}

#[oracle(notifyCreatedNote)]
unconstrained fn notify_created_note_oracle<let N: u32>(
    _storage_slot: Field,
    _note_type_id: Field,
    _packed_note: [Field; N],
    _note_hash: Field,
    _counter: u32,
) {}

unconstrained fn notify_nullified_note_oracle_wrapper(
    nullifier: Field,
    note_hash: Field,
    counter: u32,
) {
    notify_nullified_note_oracle(nullifier, note_hash, counter);
}

#[oracle(notifyNullifiedNote)]
unconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}

unconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {
    notify_created_nullifier_oracle(nullifier);
}

#[oracle(notifyCreatedNullifier)]
unconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}

#[oracle(getNotes)]
unconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(
    _storage_slot: Field,
    _num_selects: u8,
    _select_by_indexes: [u8; M],
    _select_by_offsets: [u8; M],
    _select_by_lengths: [u8; M],
    _select_values: [Field; M],
    _select_comparators: [u8; M],
    _sort_by_indexes: [u8; M],
    _sort_by_offsets: [u8; M],
    _sort_by_lengths: [u8; M],
    _sort_order: [u8; M],
    _limit: u32,
    _offset: u32,
    _status: u8,
    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec
    _max_notes: u32,
    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to
    // correctly construct the BoundedVec there.
    _packed_retrieved_note_length: u32,
) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}

pub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(
    storage_slot: Field,
    num_selects: u8,
    select_by_indexes: [u8; M],
    select_by_offsets: [u8; M],
    select_by_lengths: [u8; M],
    select_values: [Field; M],
    select_comparators: [u8; M],
    sort_by_indexes: [u8; M],
    sort_by_offsets: [u8; M],
    sort_by_lengths: [u8; M],
    sort_order: [u8; M],
    limit: u32,
    offset: u32,
    status: u8,
) -> [Option<RetrievedNote<Note>>; MAX_NOTES]
where
    Note: NoteType + Packable<NOTE_PCKD_LEN>,
{
    // N + 3 because of the contract address, nonce, and note_hash_counter that are stored out of the packed note.
    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(
        storage_slot,
        num_selects,
        select_by_indexes,
        select_by_offsets,
        select_by_lengths,
        select_values,
        select_comparators,
        sort_by_indexes,
        sort_by_offsets,
        sort_by_lengths,
        sort_order,
        limit,
        offset,
        status,
        MAX_NOTES,
        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,
    );

    let mut notes = BoundedVec::<_, MAX_NOTES>::new();
    for i in 0..packed_retrieved_notes.len() {
        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));
        notes.push(retrieved_note);
    }

    // At last we convert the bounded vector to an array of options. We do this because that is what the filter
    // function needs to have on the output and we've decided to have the same type on the input and output of
    // the filter and preprocessor functions.
    //
    // We have decided to have the same type on the input and output of the filter and preprocessor functions because
    // it allows us to chain multiple filters and preprocessors together.
    //
    // So why do we want the array of options on the output of the filter function?
    //
    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options
    // allows setting values at known indices in the output array which is much more efficient than pushing to a
    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted
    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic
    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor
    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in
    // an unconstrained context. We, however, use the same return value type to be able to use the same function as
    // both a preprocessor and a filter.
    let mut notes_array = [Option::none(); MAX_NOTES];
    for i in 0..notes.len() {
        if i < notes.len() {
            notes_array[i] = Option::some(notes.get_unchecked(i));
        }
    }

    notes_array
}

/// Returns true if the nullifier exists. Note that a \`true\` value can be constrained by proving existence of the
/// nullifier, but a \`false\` value should not be relied upon since other transactions may emit this nullifier before the
/// current transaction is included in a block. While this might seem of little use at first, certain design patterns
/// benefit from this abstraction (see e.g. \`PrivateMutable\`).
pub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {
    check_nullifier_exists_oracle(inner_nullifier)
}

#[oracle(checkNullifierExists)]
unconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}

/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,
/// siloed for the current contract address.
pub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {
    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)
}

#[oracle(getIndexedTaggingSecretAsSender)]
unconstrained fn get_indexed_tagging_secret_as_sender_oracle(
    _sender: AztecAddress,
    _recipient: AztecAddress,
) -> IndexedTaggingSecret {}

/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that
/// future notes get a different tag and can be discovered by the recipient.
/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -
/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes
/// that are not found by the recipient.
pub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe
    // to call.
    unsafe {
        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);
    }
}

unconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(
    sender: AztecAddress,
    recipient: AztecAddress,
) {
    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);
}

#[oracle(incrementAppTaggingSecretIndexAsSender)]
unconstrained fn increment_app_tagging_secret_index_as_sender_oracle(
    _sender: AztecAddress,
    _recipient: AztecAddress,
) {}
`},154:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",source:`use protocol_types::{address::aztec_address::AztecAddress, point::Point};

// TODO(#12656): return an app-siloed secret + document this
#[oracle(getSharedSecret)]
unconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}

/// Returns an app-siloed shared secret between \`address\` and someone who knows the secret key behind an
/// ephemeral public key \`ephPk\`. The app-siloing means that contracts cannot retrieve secrets that belong to
/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration
/// given that both the \`address\` and \`ephPk\` are public information.
///
/// The shared secret \`S\` is computed as:
/// \`let S =  (ivsk + h) * ephPk\`
/// where \`ivsk + h\` is the 'preaddress' i.e. the preimage of the address, also called the address secret.
/// TODO(#12656): app-silo this secret
pub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {
    get_shared_secret_oracle(address, ephPk)
}
`},158:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",source:`use crate::state_vars::storage::Storage;
use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};

// docs:start:map
pub struct Map<K, V, Context> {
    context: Context,
    storage_slot: Field,
    state_var_constructor: fn(Context, Field) -> V,
}
// docs:end:map

// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only
// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots
// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.
impl<K, T, Context> Storage<1> for Map<K, T, Context> {
    fn get_storage_slot(self) -> Field {
        self.storage_slot
    }
}

impl<K, V, Context> Map<K, V, Context> {
    // docs:start:new
    pub fn new(
        context: Context,
        storage_slot: Field,
        state_var_constructor: fn(Context, Field) -> V,
    ) -> Self {
        assert(storage_slot != 0, "Storage slot 0 not allowed. Storage slots must start from 1.");
        Map { context, storage_slot, state_var_constructor }
    }
    // docs:end:new

    // docs:start:at
    pub fn at(self, key: K) -> V
    where
        K: ToField,
    {
        // TODO(#1204): use a generator index for the storage slot
        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);

        let state_var_constructor = self.state_var_constructor;
        state_var_constructor(self.context, derived_storage_slot)
    }
    // docs:end:at
}
`},167:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",source:`use crate::context::{PublicContext, UtilityContext};
use crate::state_vars::storage::Storage;
use dep::protocol_types::traits::Packable;

// docs:start:public_mutable_struct
pub struct PublicMutable<T, Context> {
    context: Context,
    storage_slot: Field,
}
// docs:end:public_mutable_struct

impl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>
where
    T: Packable<N>,
{
    fn get_storage_slot(self) -> Field {
        self.storage_slot
    }
}

impl<T, Context> PublicMutable<T, Context> {
    // docs:start:public_mutable_struct_new
    pub fn new(
        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.
        context: Context,
        storage_slot: Field,
    ) -> Self {
        assert(storage_slot != 0, "Storage slot 0 not allowed. Storage slots must start from 1.");
        PublicMutable { context, storage_slot }
    }
    // docs:end:public_mutable_struct_new
}

impl<T> PublicMutable<T, &mut PublicContext> {
    // docs:start:public_mutable_struct_read
    pub fn read<let T_PACKED_LEN: u32>(self) -> T
    where
        T: Packable<T_PACKED_LEN>,
    {
        self.context.storage_read(self.storage_slot)
    }
    // docs:end:public_mutable_struct_read

    // docs:start:public_mutable_struct_write
    pub fn write<let T_PACKED_LEN: u32>(self, value: T)
    where
        T: Packable<T_PACKED_LEN>,
    {
        self.context.storage_write(self.storage_slot, value);
    }
    // docs:end:public_mutable_struct_write
}

impl<T> PublicMutable<T, UtilityContext> {
    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T
    where
        T: Packable<T_PACKED_LEN>,
    {
        self.context.storage_read(self.storage_slot)
    }
}
`},181:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",source:`/// Appends two \`BoundedVec\`s together, returning one that contains all of the elements of the first one followed by all
/// of the elements of the second one. The resulting \`BoundedVec\` can have any arbitrary maximum length, but it must be
/// large enough to fit all of the elements of both the first and second vectors.
pub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(
    a: BoundedVec<T, A_LEN>,
    b: BoundedVec<T, B_LEN>,
) -> BoundedVec<T, DST_LEN> {
    let mut dst = BoundedVec::new();

    dst.extend_from_bounded_vec(a);
    dst.extend_from_bounded_vec(b);

    dst
}

mod test {
    use super::append;

    #[test]
    unconstrained fn append_empty_vecs() {
        let a: BoundedVec<_, 3> = BoundedVec::new();
        let b: BoundedVec<_, 14> = BoundedVec::new();

        let result: BoundedVec<Field, 5> = append(a, b);

        assert_eq(result.len(), 0);
        assert_eq(result.storage(), std::mem::zeroed());
    }

    #[test]
    unconstrained fn append_non_empty_vecs() {
        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);
        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);

        let result: BoundedVec<Field, 8> = append(a, b);

        assert_eq(result.len(), 6);
        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);
    }

    #[test(should_fail_with = "out of bounds")]
    unconstrained fn append_non_empty_vecs_insufficient_max_len() {
        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);
        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);

        let _: BoundedVec<Field, 5> = append(a, b);
    }
}
`},184:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",source:`/// Returns \`DST_LEN\` elements from a source array, starting at \`offset\`. \`DST_LEN\` must not be larger than the number
/// of elements past \`offset\`.
///
/// Examples:
/// \`\`\`
/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);
/// assert_eq(foo, [3, 4]);
///
/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain
/// \`\`\`
pub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(
    src: [T; SRC_LEN],
    offset: u32,
) -> [T; DST_LEN] {
    assert(offset + DST_LEN <= SRC_LEN, "DST_LEN too large for offset");

    let mut dst: [T; DST_LEN] = std::mem::zeroed();
    for i in 0..DST_LEN {
        dst[i] = src[i + offset];
    }

    dst
}

mod test {
    use super::subarray;

    #[test]
    unconstrained fn subarray_into_empty() {
        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.
        assert_eq(subarray::<Field, _, _>([], 0), []);
        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);
        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);
    }

    #[test]
    unconstrained fn subarray_complete() {
        assert_eq(subarray::<Field, _, _>([], 0), []);
        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);
    }

    #[test]
    unconstrained fn subarray_different_end_sizes() {
        // We implicitly select how many values to read in the size of the return array
        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);
        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);
        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);
        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);
    }

    #[test(should_fail_with = "DST_LEN too large for offset")]
    unconstrained fn subarray_offset_too_large() {
        // With an offset of 1 we can only request up to 4 elements
        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);
    }

    #[test(should_fail)]
    unconstrained fn subarray_bad_return_value() {
        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);
    }
}
`},185:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",source:`use crate::utils::array;

/// Returns \`DST_MAX_LEN\` elements from a source BoundedVec, starting at \`offset\`. \`offset\` must not be larger than the
/// original length, and \`DST_LEN\` must not be larger than the total number of elements past \`offset\` (including the
/// zeroed elements past \`len()\`).
///
/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end
/// of the vector by passing a value for \`DST_LEN\` that is smaller than \`len() - offset\`.
///
/// Examples:
/// \`\`\`
/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);
/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));
///
/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain
/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain
/// \`\`\`
pub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(
    bvec: BoundedVec<T, SRC_MAX_LEN>,
    offset: u32,
) -> BoundedVec<T, DST_MAX_LEN> {
    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case
    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed
    // storage past len), guaranteeing correctness. This is because \`subarray\` does not allow extending arrays past
    // their original length.
    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)
}

mod test {
    use super::subbvec;

    #[test]
    unconstrained fn subbvec_empty() {
        let bvec = BoundedVec::<Field, 0>::from_array([]);
        assert_eq(subbvec(bvec, 0), bvec);
    }

    #[test]
    unconstrained fn subbvec_complete() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);
        assert_eq(subbvec(bvec, 0), bvec);

        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);
        assert_eq(subbvec(bvec, 0), smaller_capacity);
    }

    #[test]
    unconstrained fn subbvec_partial() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);

        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));
        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));
    }

    #[test]
    unconstrained fn subbvec_into_empty() {
        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);
        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));
    }

    #[test(should_fail)]
    unconstrained fn subbvec_offset_past_len() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);
        let _: BoundedVec<_, 1> = subbvec(bvec, 6);
    }

    #[test(should_fail)]
    unconstrained fn subbvec_insufficient_dst_len() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);

        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause
        // for the capacity to reduce, but not the length (other than by len - offset).
        let _: BoundedVec<_, 1> = subbvec(bvec, 2);
    }

    #[test(should_fail_with = "DST_LEN too large for offset")]
    unconstrained fn subbvec_dst_len_causes_enlarge() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);

        // subbvec does not supprt capacity increases
        let _: BoundedVec<_, 11> = subbvec(bvec, 0);
    }

    #[test(should_fail_with = "DST_LEN too large for offset")]
    unconstrained fn subbvec_dst_len_too_large_for_offset() {
        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);

        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,
        // which is less than 7.
        let _: BoundedVec<_, 7> = subbvec(bvec, 4);
    }
}
`},187:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",source:`use std::static_assert;

// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.
//
// \`bytes_to_fields\` uses fixed-size arrays since encryption contexts have compile-time size information.
// \`bytes_from_fields\` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.
//
// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.

/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole
/// bytes. Use \`bytes_from_fields\` to obtain the original bytes array.
///
/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted
/// into a Field.
/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]
/// Note: N must be a multiple of 31 bytes
pub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {
    // Assert that N is a multiple of 31
    static_assert(N % 31 == 0, "N must be a multiple of 31");

    let mut fields = [0; N / 31];

    // Since N is a multiple of 31, we can simply process all chunks fully
    for i in 0..N / 31 {
        let mut field = 0;
        for j in 0..31 {
            // Shift the existing value left by 8 bits and add the new byte
            field = field * 256 + bytes[i * 31 + j] as Field;
        }
        fields[i] = field;
    }

    fields
}

/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays
/// are not allowed: this is assumed to be an array obtained via \`bytes_to_fields\`, i.e. one that actually represents
/// bytes. To convert a Field array into bytes, use \`fields_to_bytes\`.
///
/// Each input field must contain at most 31 bytes (this is constrained to be so).
/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated
/// back together in the order of the original fields.
pub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {
    let mut bytes = BoundedVec::new();

    for i in 0..fields.len() {
        let field = fields.get(i);

        // We expect that the field contains at most 31 bytes of information.
        field.assert_max_bit_size::<248>();

        // Now we can safely convert the field to 31 bytes.
        let field_as_bytes: [u8; 31] = field.to_be_bytes();

        for j in 0..31 {
            bytes.push(field_as_bytes[j]);
        }
    }

    bytes
}

mod tests {
    use crate::utils::array::subarray;
    use super::{bytes_from_fields, bytes_to_fields};

    #[test]
    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {
        let fields = bytes_to_fields(input);

        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.
        // So we need to convert the field array to a BoundedVec to be able to feed it to the \`bytes_from_fields\`
        // function.
        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);

        let bytes_back = bytes_from_fields(fields_as_bounded_vec);

        // Compare the original input with the round-tripped result
        assert_eq(bytes_back.len(), input.len());
        assert_eq(subarray(bytes_back.storage(), 0), input);
    }

    #[test(should_fail_with = "N must be a multiple of 31")]
    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {
        // Try to convert 32 bytes (not a multiple of 31) to fields
        let _fields = bytes_to_fields([0; 32]);
    }

}
`},188:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",source:`// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.
//
// \`fields_to_bytes\` uses fixed-size arrays since encryption contexts have compile-time size information.
// \`fields_from_bytes\` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.
//
// Together they provide bidirectional conversion between fields and bytes.

/// Converts an input array of fields into a single array of bytes. Use \`fields_from_bytes\` to obtain the original
/// field array.
/// Each field is converted to a 32-byte big-endian array.
///
/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:
/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)
///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)
///
/// Since a field is ~254 bits, you'll end up with a subtle 2-bit "gap" at the big end, every 32 bytes. Be careful
/// that such a gap doesn't leak information! This could happen if you for example expected the output to be
/// indistinguishable from random bytes.
pub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {
    let mut bytes = [0; 32 * N];

    for i in 0..N {
        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();

        for j in 0..32 {
            bytes[i * 32 + j] = field_as_bytes[j];
        }
    }

    bytes
}

/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this
/// is assumed to be an array obtained via \`fields_to_bytes\`, i.e. one that actually represents fields. To convert
/// a byte array into Fields, use \`bytes_to_fields\`.
///
/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted
/// into a Field.
/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]
/// Note 1: N must be a multiple of 32 bytes
/// Note 2: The max value check code was taken from std::field::to_be_bytes function.
pub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {
    // Assert that input length is a multiple of 32
    assert(bytes.len() % 32 == 0, "Input length must be a multiple of 32");

    let mut fields = BoundedVec::new();

    let p = std::field::modulus_be_bytes();

    // Since input length is a multiple of 32, we can simply process all chunks fully
    for i in 0..bytes.len() / 32 {
        let mut field = 0;

        // Process each byte in the 32-byte chunk
        let mut ok = false;

        for j in 0..32 {
            let next_byte = bytes.get(i * 32 + j);
            field = field * 256 + next_byte as Field;

            if !ok {
                if next_byte != p[j] {
                    assert(next_byte < p[j], "Value does not fit in field");
                    ok = true;
                }
            }
        }
        assert(ok, "Value does not fit in field");

        fields.push(field);
    }

    fields
}

mod tests {
    use crate::utils::array::subarray;
    use super::{fields_from_bytes, fields_to_bytes};

    #[test]
    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {
        // Convert to bytes
        let bytes = fields_to_bytes(input);

        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.
        // So we need to convert the field array to a BoundedVec to be able to feed it to the \`fields_from_bytes\`
        // function.
        // 113 is an arbitrary max length that is larger than the input length of 96.
        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);

        // Convert back to fields
        let fields_back = fields_from_bytes(bytes_as_bounded_vec);

        // Compare the original input with the round-tripped result
        assert_eq(fields_back.len(), input.len());
        assert_eq(subarray(fields_back.storage(), 0), input);
    }

    #[test(should_fail_with = "Input length must be a multiple of 32")]
    unconstrained fn to_fields_assert() {
        // 143 is an arbitrary max length that is larger than 33
        let input = BoundedVec::<_, 143>::from_array([
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
            25, 26, 27, 28, 29, 30, 31, 32, 33,
        ]);

        // This should fail since 33 is not a multiple of 32
        let _fields = fields_from_bytes(input);
    }

    #[test]
    unconstrained fn fields_from_bytes_max_value() {
        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();
        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);

        let fields = fields_from_bytes(input);

        // The result should be a largest value storable in a field (-1 since we are modulo-ing)
        assert_eq(fields.get(0), -1);
    }

    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte
    // and then feeding it to \`fields_from_bytes\` as input.
    #[test(should_fail_with = "Value does not fit in field")]
    unconstrained fn fields_from_bytes_overflow(random_value: u8) {
        let index_of_byte_to_bump = random_value % 32;

        // Obtain the byte representation of the maximum field value
        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();

        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];

        // Skip test execution if the selected byte is already at maximum value (255).
        // This is acceptable since we are using fuzz testing to generate many test cases.
        if byte_to_bump != 255 {
            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);

            // Increment the selected byte to exceed the field's maximum value
            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);

            // Attempt the conversion, which should fail due to the value exceeding the field's capacity
            let _fields = fields_from_bytes(input);
        }
    }

}
`},190:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/field.nr",source:`use std::option::Option;

global KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.

global C1: u32 = 28;
global C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;
global C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;

// Power function of two Field arguments of arbitrary size.
// Adapted from std::field::pow_32.
pub fn pow(x: Field, y: Field) -> Field {
    let mut r = 1 as Field;
    let b: [u1; 254] = y.to_le_bits();

    for i in 0..254 {
        r *= r;
        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);
    }

    r
}

// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.
unconstrained fn is_square(x: Field) -> bool {
    let v = pow(x, -1 / 2);
    v * (v - 1) == 0
}

// Tonelli-Shanks algorithm for computing the square root of a Field element.
// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field
// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),
// and C5 = ZETA^C2, where ZETA is a non-square element of Field.
// These are pre-computed above as globals.
unconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {
    let mut z = pow(x, C3);
    let mut t = z * z * x;
    z *= x;
    let mut b = t;
    let mut c = C5;

    for i in 0..(C1 - 1) {
        for _j in 1..(C1 - i - 1) {
            b *= b;
        }

        z *= if b == 1 { 1 } else { c };

        c *= c;

        t *= if b == 1 { 1 } else { c };

        b = t;
    }

    z
}

// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.
pub unconstrained fn __sqrt(x: Field) -> (bool, Field) {
    let is_sq = is_square(x);
    if is_sq {
        let sqrt = tonelli_shanks_sqrt(x);
        (true, sqrt)
    } else {
        // Demonstrate that x is not a square (a.k.a. a "quadratic non-residue").
        // Facts:
        // The Legendre symbol ("LS") of x, is x^((p-1)/2) (mod p).
        // - If x is a square, LS(x) = 1
        // - If x is not a square, LS(x) = -1
        // - If x = 0, LS(x) = 0.
        //
        // Hence:
        // sq * sq = sq // 1 * 1 = 1
        // non-sq * non-sq = sq // -1 * -1 = 1
        // sq * non-sq = non-sq // -1 * 1 = -1
        //
        // See: https://en.wikipedia.org/wiki/Legendre_symbol
        let demo_x_not_square = x * KNOWN_NON_RESIDUE;
        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);
        (false, not_sqrt)
    }
}

// Returns (false, 0) if there is no square root.
// Returns (true, sqrt) if there is a square root.
pub fn sqrt(x: Field) -> Option<Field> {
    // Safety: if the hint returns the square root of x, then we simply square it
    // check the result equals x. If x is not square, we return a value that
    // enables us to prove that fact (see the \`else\` clause below).
    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };

    if is_sq {
        let sqrt = maybe_sqrt;
        validate_sqrt_hint(x, sqrt);
        Option::some(sqrt)
    } else {
        let not_sqrt_hint = maybe_sqrt;
        validate_not_sqrt_hint(x, not_sqrt_hint);
        Option::none()
    }
}

fn validate_sqrt_hint(x: Field, hint: Field) {
    assert(hint * hint == x, f"The claimed_sqrt {hint} is not the sqrt of x {x}");
}

fn validate_not_sqrt_hint(x: Field, hint: Field) {
    // We need this assertion, because x = 0 would pass the other assertions in this
    // function, and we don't want people to be able to prove that 0 is not square!
    assert(x != 0, "0 has a square root; you cannot claim it is not square");
    // Demonstrate that x is not a square (a.k.a. a "quadratic non-residue").
    //
    // Facts:
    // The Legendre symbol ("LS") of x, is x^((p-1)/2) (mod p).
    // - If x is a square, LS(x) = 1
    // - If x is not a square, LS(x) = -1
    // - If x = 0, LS(x) = 0.
    //
    // Hence:
    // 1. sq * sq = sq // 1 * 1 = 1
    // 2. non-sq * non-sq = sq // -1 * -1 = 1
    // 3. sq * non-sq = non-sq // -1 * 1 = -1
    //
    // See: https://en.wikipedia.org/wiki/Legendre_symbol
    //
    // We want to demonstrate that this below multiplication falls under bullet-point (2):
    let demo_x_not_square = x * KNOWN_NON_RESIDUE;
    // I.e. we want to demonstrate that \`demo_x_not_square\` has Legendre symbol 1
    // (i.e. that it is a square), so we prove that it is square below.
    // Why do we want to prove that it has LS 1?
    // Well, since it was computed with a known-non-residue, its squareness implies we're
    // in case 2 (something multiplied by a known-non-residue yielding a result which
    // has a LS of 1), which implies that x must be a non-square. The unconstrained
    // function gave us the sqrt of demo_x_not_square, so all we need to do is
    // assert its squareness:
    assert(
        hint * hint == demo_x_not_square,
        f"The hint {hint} does not demonstrate that {x} is not a square",
    );
}

#[test]
fn test_sqrt() {
    let x = 9;
    let maybe_sqrt = sqrt(x);
    assert(maybe_sqrt.is_some());
    let sqrt = maybe_sqrt.unwrap_unchecked();
    assert((sqrt == 3) | (sqrt == -3));
}

#[test]
fn test_non_square() {
    let x = 5;
    let maybe_sqrt = sqrt(x);
    assert(maybe_sqrt.is_none());
}

#[test]
unconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {
    assert(!is_square(KNOWN_NON_RESIDUE));
}

#[test]
fn test_sqrt_0() {
    let x = 0;
    let sqrt = sqrt(x).unwrap();
    assert(sqrt == 0);
}

#[test]
fn test_sqrt_1() {
    let x = 1;
    let sqrt = sqrt(x).unwrap();
    assert((sqrt == 1) | (sqrt == -1));
}

#[test(should_fail_with = "The claimed_sqrt 0x04 is not the sqrt of x 0x09")]
fn test_bad_sqrt_hint_fails() {
    validate_sqrt_hint(9, 4);
}

#[test(should_fail_with = "The hint 0x04 does not demonstrate that 0x0a is not a square")]
fn test_bad_not_sqrt_hint_fails() {
    validate_not_sqrt_hint(10, 4);
}

#[test(should_fail_with = "0 has a square root; you cannot claim it is not square")]
fn test_0_not_sqrt_hint_fails() {
    validate_not_sqrt_hint(0, 0);
}

#[test]
unconstrained fn test_is_square() {
    assert(is_square(25));
}

#[test]
unconstrained fn test_is_not_square() {
    assert(!is_square(10));
}
`},192:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/aztec-nr/aztec/src/utils/point.nr",source:`use crate::utils::field::sqrt;
use dep::protocol_types::point::Point;

// I am storing the modulus minus 1 divided by 2 here because full modulus would throw "String literal too large" error
// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617
global BN254_FR_MODULUS_DIV_2: Field =
    10944121435919637611123202872628637544274182200208017171849102093287904247808;

/// Converts a point to a byte array.
///
/// We don't serialize the point at infinity flag because this function is used in situations where we do not want
/// to waste the extra byte (encrypted log).
pub fn point_to_bytes(p: Point) -> [u8; 32] {
    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for
    // the "sign") so it's possible to use that last bit as an "is_infinite" flag if desired in the future.
    assert(!p.is_infinite, "Cannot serialize point at infinity as bytes.");

    let mut result: [u8; 32] = p.x.to_be_bytes();

    if get_sign_of_point(p) {
        // y is <= (modulus - 1) / 2 so we set the sign bit to 1
        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32
        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of
        // the bits as a sign bit.
        result[0] += 128;
    }

    result
}

/**
 * Returns: true if p.y <= MOD_DIV_2, else false.
 */
pub fn get_sign_of_point(p: Point) -> bool {
    // We store only a "sign" of the y coordinate because the rest can be derived from the x coordinate. To get
    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.
    // Ideally we'd do \`y <= MOD_DIV_2\`, but there's no \`lte\` function, so instead we do \`!(y > MOD_DIV_2)\`, which is
    // equivalent, and then rewrite that as \`!(MOD_DIV_2 < y)\`, since we also have no \`gt\` function.
    !BN254_FR_MODULUS_DIV_2.lt(p.y)
}

pub fn point_from_x_coord(x: Field) -> Point {
    // y ^ 2 = x ^ 3 - 17
    let rhs = x * x * x - 17;
    let y = sqrt(rhs).unwrap();
    Point { x, y, is_infinite: false }
}

/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.
/// The y coordinate can be derived from the x coordinate and the "sign" flag by solving the grumpkin curve
/// equation for y.
/// @param x - The x coordinate of the point
/// @param sign - The "sign" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2
pub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {
    // y ^ 2 = x ^ 3 - 17
    let rhs = x * x * x - 17;
    let y = sqrt(rhs).unwrap();

    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y
    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);
    let final_y = if y_is_positive == sign { y } else { -y };

    Point { x, y: final_y, is_infinite: false }
}

mod test {
    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};
    use dep::protocol_types::point::Point;

    #[test]
    unconstrained fn test_point_to_bytes_positive_sign() {
        let p = Point {
            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,
            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,
            is_infinite: false,
        };

        let compressed_point = point_to_bytes(p);

        let expected_compressed_point_positive_sign = [
            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,
            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,
        ];
        assert_eq(expected_compressed_point_positive_sign, compressed_point);
    }

    #[test]
    unconstrained fn test_point_to_bytes_negative_sign() {
        let p = Point {
            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,
            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,
            is_infinite: false,
        };

        let compressed_point = point_to_bytes(p);

        let expected_compressed_point_negative_sign = [
            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,
            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,
        ];

        assert_eq(expected_compressed_point_negative_sign, compressed_point);
    }

    #[test]
    unconstrained fn test_point_from_x_coord_and_sign() {
        // Test positive y coordinate
        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;
        let sign = true;
        let p = point_from_x_coord_and_sign(x, sign);

        assert_eq(p.x, x);
        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);
        assert_eq(p.is_infinite, false);

        // Test negative y coordinate
        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;
        let sign2 = false;
        let p2 = point_from_x_coord_and_sign(x2, sign2);

        assert_eq(p2.x, x2);
        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);
        assert_eq(p2.is_infinite, false);
    }
}
`},203:{path:"/Users/gabrielantonyxaviour/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",source:`use std::default::Default;
use std::hash::Hasher;

comptime global RATE: u32 = 3;

pub struct Poseidon2 {
    cache: [Field; 3],
    state: [Field; 4],
    cache_size: u32,
    squeeze_mode: bool, // 0 => absorb, 1 => squeeze
}

impl Poseidon2 {
    #[no_predicates]
    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {
        Poseidon2::hash_internal(input, message_size, message_size != N)
    }

    pub(crate) fn new(iv: Field) -> Poseidon2 {
        let mut result =
            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };
        result.state[RATE] = iv;
        result
    }

    fn perform_duplex(&mut self) {
        // add the cache into sponge state
        for i in 0..RATE {
            // We effectively zero-pad the cache by only adding to the state
            // cache that is less than the specified \`cache_size\`
            if i < self.cache_size {
                self.state[i] += self.cache[i];
            }
        }
        self.state = crate::poseidon2_permutation(self.state, 4);
    }

    fn absorb(&mut self, input: Field) {
        assert(!self.squeeze_mode);
        if self.cache_size == RATE {
            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache
            self.perform_duplex();
            self.cache[0] = input;
            self.cache_size = 1;
        } else {
            // If we're absorbing, and the cache is not full, add the input into the cache
            self.cache[self.cache_size] = input;
            self.cache_size += 1;
        }
    }

    fn squeeze(&mut self) -> Field {
        assert(!self.squeeze_mode);
        // If we're in absorb mode, apply sponge permutation to compress the cache.
        self.perform_duplex();
        self.squeeze_mode = true;

        // Pop one item off the top of the permutation and return it.
        self.state[0]
    }

    fn hash_internal<let N: u32>(
        input: [Field; N],
        in_len: u32,
        is_variable_length: bool,
    ) -> Field {
        let two_pow_64 = 18446744073709551616;
        let iv: Field = (in_len as Field) * two_pow_64;
        let mut sponge = Poseidon2::new(iv);
        for i in 0..input.len() {
            if i < in_len {
                sponge.absorb(input[i]);
            }
        }

        // In the case where the hash preimage is variable-length, we append \`1\` to the end of the input, to distinguish
        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures
        // fixed-length and variable-length hashes do not collide)
        if is_variable_length {
            sponge.absorb(1);
        }
        sponge.squeeze()
    }
}

pub struct Poseidon2Hasher {
    _state: [Field],
}

impl Hasher for Poseidon2Hasher {
    fn finish(self) -> Field {
        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)
        let mut sponge = Poseidon2::new(iv);
        for i in 0..self._state.len() {
            sponge.absorb(self._state[i]);
        }
        sponge.squeeze()
    }

    fn write(&mut self, input: Field) {
        self._state = self._state.push_back(input);
    }
}

impl Default for Poseidon2Hasher {
    fn default() -> Self {
        Poseidon2Hasher { _state: &[] }
    }
}
`},220:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",source:`use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};

pub struct EventSelector {
    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.
    inner: u32,
}

impl Eq for EventSelector {
    fn eq(self, other: EventSelector) -> bool {
        other.inner == self.inner
    }
}

impl Serialize<1> for EventSelector {
    fn serialize(self: Self) -> [Field; 1] {
        [self.inner as Field]
    }
}

impl Deserialize<1> for EventSelector {
    fn deserialize(fields: [Field; 1]) -> Self {
        Self { inner: fields[0] as u32 }
    }
}

impl FromField for EventSelector {
    fn from_field(field: Field) -> Self {
        Self { inner: field as u32 }
    }
}

impl ToField for EventSelector {
    fn to_field(self) -> Field {
        self.inner as Field
    }
}

impl Empty for EventSelector {
    fn empty() -> Self {
        Self { inner: 0 as u32 }
    }
}

impl EventSelector {
    pub fn from_u32(value: u32) -> Self {
        Self { inner: value }
    }

    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {
        let bytes = signature.as_bytes();
        let hash = crate::hash::poseidon2_hash_bytes(bytes);

        // \`hash\` is automatically truncated to fit within 32 bits.
        EventSelector::from_field(hash)
    }

    pub fn zero() -> Self {
        Self { inner: 0 }
    }
}
`},222:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",source:`use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};

pub struct FunctionSelector {
    // 1st 4-bytes of abi-encoding of function.
    pub inner: u32,
}

impl Eq for FunctionSelector {
    fn eq(self, function_selector: FunctionSelector) -> bool {
        function_selector.inner == self.inner
    }
}

impl Serialize<1> for FunctionSelector {
    fn serialize(self: Self) -> [Field; 1] {
        [self.inner as Field]
    }
}

impl Deserialize<1> for FunctionSelector {
    fn deserialize(fields: [Field; 1]) -> Self {
        Self { inner: fields[0] as u32 }
    }
}

impl FromField for FunctionSelector {
    fn from_field(field: Field) -> Self {
        Self { inner: field as u32 }
    }
}

impl ToField for FunctionSelector {
    fn to_field(self) -> Field {
        self.inner as Field
    }
}

impl Empty for FunctionSelector {
    fn empty() -> Self {
        Self { inner: 0 as u32 }
    }
}

impl FunctionSelector {
    pub fn from_u32(value: u32) -> Self {
        Self { inner: value }
    }

    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {
        let bytes = signature.as_bytes();
        let hash = crate::hash::poseidon2_hash_bytes(bytes);

        // \`hash\` is automatically truncated to fit within 32 bits.
        FunctionSelector::from_field(hash)
    }

    pub fn zero() -> Self {
        Self { inner: 0 }
    }
}

#[test]
fn test_is_valid_selector() {
    let selector = FunctionSelector::from_signature("IS_VALID()");
    assert_eq(selector.to_field(), 0x73cdda47);
}

#[test]
fn test_long_selector() {
    let selector =
        FunctionSelector::from_signature("foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo");
    assert_eq(selector.to_field(), 0x7590a997);
}
`},265:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",source:`use crate::{
    address::{
        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,
    },
    constants::{
        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,
        MAX_PROTOCOL_CONTRACTS,
    },
    contract_class_id::ContractClassId,
    hash::poseidon2_hash_with_separator,
    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},
    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},
    utils::field::{pow, sqrt},
};

// We do below because \`use crate::point::Point;\` does not work
use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;

use crate::public_keys::AddressPoint;
use std::{
    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},
    ops::Add,
};

// Aztec address
pub struct AztecAddress {
    pub inner: Field,
}

impl Eq for AztecAddress {
    fn eq(self, other: Self) -> bool {
        self.to_field() == other.to_field()
    }
}

impl Empty for AztecAddress {
    fn empty() -> Self {
        Self { inner: 0 }
    }
}

impl ToField for AztecAddress {
    fn to_field(self) -> Field {
        self.inner
    }
}

impl FromField for AztecAddress {
    fn from_field(value: Field) -> AztecAddress {
        AztecAddress { inner: value }
    }
}

impl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {
    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {
        [self.to_field()]
    }
}

impl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {
    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {
        FromField::from_field(fields[0])
    }
}

/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there
/// the implementation of Packable is required).
impl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {
    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {
        self.serialize()
    }

    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {
        Self::deserialize(fields)
    }
}

impl AztecAddress {
    pub fn zero() -> Self {
        Self { inner: 0 }
    }

    pub fn to_address_point(self) -> AddressPoint {
        // We compute the address point by taking our address, setting it to x, and then solving for y in the
        // equation which defines our bn curve:
        // y^2 = x^3 - 17; x = address
        let x = self.inner;
        let y_squared = pow(x, 3) - 17;

        // TODO (#8970): Handle cases where we cannot recover a point from an address
        let mut y = sqrt(y_squared);

        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the
        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus
        // note: The field modulus is MAX_FIELD_VALUE + 1
        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {
            y = (MAX_FIELD_VALUE + 1) - y;
        }

        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }
    }

    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {
        let public_keys_hash = public_keys.hash();

        let pre_address = poseidon2_hash_with_separator(
            [public_keys_hash.to_field(), partial_address.to_field()],
            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,
        );

        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(
            public_keys.ivpk_m.to_point(),
        );

        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us
        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.
        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or
        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one
        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.
        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,
        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.
        AztecAddress::from_field(address_point.x)
    }

    pub fn compute_from_class_id(
        contract_class_id: ContractClassId,
        salted_initialization_hash: SaltedInitializationHash,
        public_keys: PublicKeys,
    ) -> Self {
        let partial_address = PartialAddress::compute_from_salted_initialization_hash(
            contract_class_id,
            salted_initialization_hash,
        );

        AztecAddress::compute(public_keys, partial_address)
    }

    pub fn is_protocol_contract(self) -> bool {
        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)
    }

    pub fn is_zero(self) -> bool {
        self.inner == 0
    }

    pub fn assert_is_zero(self) {
        assert(self.to_field() == 0);
    }
}

#[test]
fn compute_address_from_partial_and_pub_keys() {
    let public_keys = PublicKeys {
        npk_m: NpkM {
            inner: Point {
                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,
                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,
                is_infinite: false,
            },
        },
        ivpk_m: IvpkM {
            inner: Point {
                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,
                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,
                is_infinite: false,
            },
        },
        ovpk_m: OvpkM {
            inner: Point {
                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,
                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,
                is_infinite: false,
            },
        },
        tpk_m: TpkM {
            inner: Point {
                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,
                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,
                is_infinite: false,
            },
        },
    };

    let partial_address = PartialAddress::from_field(
        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,
    );

    let address = AztecAddress::compute(public_keys, partial_address);

    // The following value was generated by \`derivation.test.ts\`.
    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.
    let expected_computed_address_from_partial_and_pubkeys =
        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;
    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);
}

#[test]
fn compute_preaddress_from_partial_and_pub_keys() {
    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);
    let expected_computed_preaddress_from_partial_and_pubkey =
        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;
    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);
}

#[test]
fn from_field_to_field() {
    let address = AztecAddress { inner: 37 };
    assert_eq(FromField::from_field(address.to_field()), address);
}

#[test]
fn serde() {
    let address = AztecAddress { inner: 37 };
    assert_eq(Deserialize::deserialize(address.serialize()), address);
}
`},282:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",source:`/// Utility function to console.log data in the acir simulator.
/// Example:
///   debug_log("blah blah this is a debug string");
pub fn debug_log<let N: u32>(msg: str<N>) {
    debug_log_format(msg, []);
}

/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the
/// \`\${k}\` tokens will be replaced with the k-eth value in the \`args\` array.
/// Examples:
///   debug_log_format("get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}", [storage_slot, note0_hash, note1_hash]);
///   debug_log_format("whole array: {}", [e1, e2, e3, e4]);
pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {
    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe
    // to call.
    unsafe { debug_log_oracle_wrapper(msg, args) };
}

pub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(
    msg: str<M>,
    args: [Field; N],
) {
    debug_log_oracle(msg, args.as_slice());
}

// WARNING: sometimes when using debug logs the ACVM errors with: \`thrown: "solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155"\`
#[oracle(debugLog)]
unconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}
`},283:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",source:`use crate::{
    abis::{
        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,
        contract_class_log::ContractClassLog,
        function_selector::FunctionSelector,
        note_hash::ScopedNoteHash,
        nullifier::ScopedNullifier,
        private_log::{PrivateLog, PrivateLogData},
        side_effect::{OrderedValue, scoped::Scoped},
    },
    address::{AztecAddress, EthAddress},
    constants::{
        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,
        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,
        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,
    },
    merkle_tree::root::root_from_sibling_path,
    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},
    poseidon2::Poseidon2Sponge,
    traits::{FromField, Hash, ToField},
    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},
};

pub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {
    let sha256_hashed = sha256::digest(bytes_to_hash);
    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);

    hash_in_a_field
}

pub fn private_functions_root_from_siblings(
    selector: FunctionSelector,
    vk_hash: Field,
    function_leaf_index: Field,
    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],
) -> Field {
    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };
    let function_leaf = function_leaf_preimage.hash();
    root_from_sibling_path(
        function_leaf,
        function_leaf_index,
        function_leaf_sibling_path,
    )
}

pub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {
    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also
    // unique).
    poseidon2_hash_with_separator(
        [first_nullifier_in_tx, note_index_in_tx as Field],
        GENERATOR_INDEX__NOTE_HASH_NONCE,
    )
}

pub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {
    let inputs = [nonce, siloed_note_hash];
    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)
}

pub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {
    poseidon2_hash_with_separator(
        [app.to_field(), note_hash],
        GENERATOR_INDEX__SILOED_NOTE_HASH,
    )
}

/// Computes unique note hashes from siloed note hashes
pub fn compute_unique_siloed_note_hash(
    siloed_note_hash: Field,
    first_nullifier: Field,
    note_index_in_tx: u32,
) -> Field {
    if siloed_note_hash == 0 {
        0
    } else {
        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);
        compute_unique_note_hash(nonce, siloed_note_hash)
    }
}

/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way
/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.
pub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {
    if note_hash.contract_address.is_zero() {
        0
    } else {
        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())
    }
}

pub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {
    poseidon2_hash_with_separator(
        [app.to_field(), nullifier],
        GENERATOR_INDEX__OUTER_NULLIFIER,
    )
}

pub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {
    if nullifier.contract_address.is_zero() {
        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.
    } else {
        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())
    }
}

pub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {
    poseidon2_hash([contract_address.to_field(), field])
}

pub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {
    if private_log.contract_address.is_zero() {
        private_log.inner.log
    } else {
        let mut fields = private_log.inner.log.fields;
        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);
        PrivateLog::new(fields, private_log.inner.log.length)
    }
}

pub fn compute_siloed_contract_class_log_field(
    contract_address: AztecAddress,
    first_field: Field,
) -> Field {
    poseidon2_hash([contract_address.to_field(), first_field])
}

pub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {
    if contract_class_log.contract_address.is_zero() {
        contract_class_log
    } else {
        let mut log = contract_class_log;
        log.log.fields[0] = compute_siloed_contract_class_log_field(
            contract_class_log.contract_address,
            log.log.fields[0],
        );
        log
    }
}

pub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {
    poseidon2_hash(log)
}

pub fn merkle_hash(left: Field, right: Field) -> Field {
    poseidon2_hash([left, right])
}

pub fn compute_l2_to_l1_hash(
    contract_address: AztecAddress,
    recipient: EthAddress,
    content: Field,
    rollup_version_id: Field,
    chain_id: Field,
) -> Field {
    let mut bytes: [u8; 160] = std::mem::zeroed();

    let inputs =
        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];
    for i in 0..5 {
        // TODO are bytes be in fr.to_buffer() ?
        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();
        for j in 0..32 {
            bytes[32 * i + j] = item_bytes[j];
        }
    }

    sha256_to_field(bytes)
}

pub fn silo_l2_to_l1_message(
    msg: ScopedL2ToL1Message,
    rollup_version_id: Field,
    chain_id: Field,
) -> Field {
    if msg.contract_address.is_zero() {
        0
    } else {
        compute_l2_to_l1_hash(
            msg.contract_address,
            msg.message.recipient,
            msg.message.content,
            rollup_version_id,
            chain_id,
        )
    }
}

// Computes sha256 hash of 2 input hashes.
//
// NB: This method now takes in two 31 byte fields - it assumes that any input
// is the result of a sha_to_field hash and => is truncated
//
// TODO(Jan and David): This is used for the encrypted_log hashes.
// Can we check to see if we can just use hash_to_field or pedersen_compress here?
//
pub fn accumulate_sha256(input: [Field; 2]) -> Field {
    // This is a note about the cpp code, since it takes an array of Fields
    // instead of a u128.
    // 4 Field elements when converted to bytes will usually
    // occupy 4 * 32 = 128 bytes.
    // However, this function is making the assumption that each Field
    // only occupies 128 bits.
    //
    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?
    // Concatentate two fields into 32x2 = 64 bytes
    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers
    let mut hash_input_flattened = [0; 64];
    for offset in 0..input.len() {
        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();
        for byte_index in 0..32 {
            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];
        }
    }

    sha256_to_field(hash_input_flattened)
}

pub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {
    crate::hash::poseidon2_hash(key)
}

#[inline_always]
pub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {
    std::hash::pedersen_hash_with_separator(inputs, hash_index)
}

pub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {
    poseidon::poseidon2::Poseidon2::hash(inputs, N)
}

#[no_predicates]
pub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field
where
    T: ToField,
{
    let inputs_with_separator = array_concat([separator.to_field()], inputs);
    poseidon2_hash(inputs_with_separator)
}

// Performs a fixed length hash with a subarray of the given input.
// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.
// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()
// or any ts implementation. Also checks that any remaining elts not hashed are empty.
#[no_predicates]
pub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {
    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);
    sponge.squeeze()
}

// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,
// and absorbing in chunks of 3 below.
#[no_predicates]
pub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {
    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);
    // In the case where the hash preimage is variable-length, we append \`1\` to the end of the input, to distinguish
    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures
    // fixed-length and variable-length hashes do not collide)
    if in_len != N {
        sponge.absorb(1);
    }
    sponge.squeeze()
}

// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)
// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know
// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.
// The below code forces the compiler to:
//  - absorb normally up to 2 times to set cache_size to 1
//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb
//  - absorb normally up to 2 times to add any remaining values to the hash
// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.
// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.

#[no_predicates]
fn poseidon2_absorb_chunks<let N: u32>(
    input: [Field; N],
    in_len: u32,
    variable: bool,
) -> Poseidon2Sponge {
    let iv: Field = (in_len as Field) * TWO_POW_64;
    let mut sponge = Poseidon2Sponge::new(iv);
    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow
    // since we cannot isolate computation branches. The below is just to avoid that.
    let shift = if in_len == 0 { 0 } else { 1 };
    if in_len != 0 {
        // cache_size = 0, init absorb
        sponge.cache[0] = input[0];
        sponge.cache_size = 1;
        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge
        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)
        // max_remainder = (N - 1) % 3;
        // max_chunks = (N - 1 - max_remainder) / 3;
        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(
            sponge,
            input,
            in_len,
            variable,
            shift,
        );
    }
    sponge
}

// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true
#[no_predicates]
pub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(
    in_sponge: Poseidon2Sponge,
    input: [Field; N],
    in_len: u32,
    skip_0_check: bool,
) -> Poseidon2Sponge {
    let mut sponge = in_sponge;
    // 'shift' is to account for already added inputs
    let mut shift = 0;
    // 'stop' is to avoid an underflow when inputting in_len = 0
    let mut stop = false;
    for i in 0..3 {
        if shift == in_len {
            stop = true;
        }
        if (sponge.cache_size != 1) & (!stop) {
            sponge.absorb(input[i]);
            shift += 1;
        }
    }
    sponge = if stop {
        sponge
    } else {
        // max_chunks = (N - (N % 3)) / 3;
        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(
            sponge,
            input,
            in_len,
            skip_0_check,
            shift,
        )
    };
    sponge
}

// The below is the loop to absorb elts into a poseidon sponge in chunks of 3
// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1
// M - the max number of chunks required to absorb N things (must be comptime to compile)
// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check
// for 0s costs 3N gates. Current approach is approx 2N gates.
#[no_predicates]
fn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(
    in_sponge: Poseidon2Sponge,
    input: [Field; N],
    in_len: u32,
    variable: bool,
    shift: u32,
) -> Poseidon2Sponge {
    assert(in_len <= N, "Given in_len to absorb is larger than the input array len");
    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N
    // The below avoids an overflow
    let skip_last = 3 * M == N;
    // Writing in_sponge: &mut does not compile
    let mut sponge = in_sponge;
    let mut should_add = true;
    // The num of things left over after absorbing in 3s
    let remainder = (in_len - shift) % 3;
    // The num of chunks of 3 to absorb (maximum M)
    let chunks = (in_len - shift - remainder) / 3;
    for i in 0..M {
        // Now we loop through cache size = 1 -> 3
        should_add &= i != chunks;
        // This is the index at the start of the chunk (for readability)
        let k = 3 * i + shift;
        if should_add {
            // cache_size = 1, 2 => just assign
            sponge.cache[1] = input[k];
            sponge.cache[2] = input[k + 1];
            // cache_size = 3 => duplex + perm
            for j in 0..3 {
                sponge.state[j] += sponge.cache[j];
            }
            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);
            sponge.cache[0] = input[k + 2];
            // cache_size is now 1 again, repeat loop
        } else if (!variable) & (i != chunks) {
            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0
            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below
            let last_0 = if (i == M - 1) & (skip_last) {
                0
            } else {
                input[k + 2]
            };
            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);
            assert(all_0, "Found non-zero field after breakpoint");
        }
    }
    // we have 'remainder' num of items left to absorb
    should_add = true;
    // below is to avoid overflows (i.e. if inlen is close to N)
    let mut should_check = !variable;
    for i in 0..3 {
        should_add &= i != remainder;
        should_check &= in_len - remainder + i != N;
        if should_add {
            // we want to absorb the final 'remainder' items
            sponge.absorb(input[in_len - remainder + i]);
        } else if should_check {
            assert(input[in_len - remainder + i] == 0, "Found non-zero field after breakpoint");
        }
    }
    sponge
}

pub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field
where
    T: ToField,
{
    let in_len = inputs.len() + 1;
    let iv: Field = (in_len as Field) * TWO_POW_64;
    let mut sponge = Poseidon2Sponge::new(iv);
    sponge.absorb(separator.to_field());

    for i in 0..inputs.len() {
        sponge.absorb(inputs[i]);
    }

    sponge.squeeze()
}

#[no_predicates]
pub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {
    let mut fields = [0; (N + 30) / 31];
    let mut field_index = 0;
    let mut current_field = [0; 31];
    for i in 0..inputs.len() {
        let index = i % 31;
        current_field[index] = inputs[i];
        if index == 30 {
            fields[field_index] = field_from_bytes(current_field, false);
            current_field = [0; 31];
            field_index += 1;
        }
    }
    if field_index != fields.len() {
        fields[field_index] = field_from_bytes(current_field, false);
    }
    poseidon2_hash(fields)
}

#[test]
fn poseidon_chunks_matches_fixed() {
    let in_len = 501;
    let mut input: [Field; 4096] = [0; 4096];
    let mut fixed_input = [3; 501];
    assert(in_len == fixed_input.len()); // sanity check
    for i in 0..in_len {
        input[i] = 3;
    }
    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);
    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());
    assert(sub_chunk_hash == fixed_len_hash);
}

#[test]
fn poseidon_chunks_matches_variable() {
    let in_len = 501;
    let mut input: [Field; 4096] = [0; 4096];
    for i in 0..in_len {
        input[i] = 3;
    }
    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);
    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);
    assert(variable_chunk_hash == variable_len_hash);
}

#[test]
fn existing_sponge_poseidon_chunks_matches_fixed() {
    let in_len = 501;
    let mut input: [Field; 4096] = [0; 4096];
    let mut fixed_input = [3; 501];
    assert(in_len == fixed_input.len()); // sanity check
    for i in 0..in_len {
        input[i] = 3;
    }
    // absorb 250 of the 501 things
    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);
    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);
    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)
    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);
    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());
    assert(final_sponge.squeeze() == fixed_len_hash);
}

#[test]
fn poseidon_chunks_empty_inputs() {
    let in_len = 0;
    let mut input: [Field; 4096] = [0; 4096];
    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);
    let mut first_sponge =
        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);
    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());
}

#[test]
fn smoke_sha256_to_field() {
    let full_buffer = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
    ];
    let result = sha256_to_field(full_buffer);

    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);

    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):
    let result_bytes = sha256::digest(full_buffer);
    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);
    assert(truncated_field == result);
    let mod_res = result + (result_bytes[31] as Field);
    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);
}

#[test]
fn compute_l2_l1_hash() {
    // All zeroes
    let hash_result =
        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);
    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);

    // Non-zero case
    let hash_result = compute_l2_to_l1_hash(
        AztecAddress::from_field(1),
        EthAddress::from_field(3),
        5,
        2,
        4,
    );
    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);
}

#[test]
fn silo_l2_to_l1_message_matches_typescript() {
    let version = 4;
    let chainId = 5;

    let hash = silo_l2_to_l1_message(
        ScopedL2ToL1Message {
            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },
            contract_address: AztecAddress::from_field(3),
        },
        version,
        chainId,
    );

    // The following value was generated by \`l2_to_l1_message.test.ts\`
    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;

    assert_eq(hash, hash_from_typescript);
}
`},297:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",source:`use super::traits::{Deserialize, Packable, Serialize};

/// Returns the typed expression of a trait method implementation.
///
/// This helper function is preferred over directly inlining with \`$typ::target_method()\` in a quote,
/// as direct inlining would result in missing import warnings in the generated code (specifically,
/// warnings that the trait implementation is not in scope).
///
/// # Note
/// A copy of this function exists in \`aztec-nr/aztec/src/macros/utils.nr\`. We maintain separate copies
/// because importing it there from here would cause the \`target_trait\` to be interpreted in the context
/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).
comptime fn get_trait_impl_method(
    typ: Type,
    target_trait: Quoted,
    target_method: Quoted,
) -> TypedExpr {
    let trait_constraint = target_trait.as_trait_constraint();
    typ
        .get_trait_impl(trait_constraint)
        .expect(f"Could not find impl for {target_trait} for type {typ}")
        .methods()
        .filter(|m| m.name() == target_method)[0]
        .as_typed_expr()
}

/// Generates code that deserializes a struct, primitive type, array or string from a field array.
///
/// # Parameters
/// - \`name\`: The name of the current field being processed, used to identify fields for replacement.
/// - \`typ\`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).
/// - \`field_array_name\`: The name of the field array containing serialized field data (e.g., \`"values"\`).
/// - \`num_already_consumed\`: The number of fields already processed in previous recursion calls.
/// - \`should_unpack\`: A boolean indicating whether the type should be unpacked (see description of \`Packable\`
/// and \`Serialize\` trait for more information about the difference between packing and serialization).
///
/// # Returns
/// A tuple containing:
/// - \`Quoted\`: A code that deserializes a given struct, primitive type, array, or string from the field array.
/// - \`u32\`: The total number of fields consumed during deserialization (used for recursion).
///
/// # Nested Struct Example
/// Given the following setup:
/// \`\`\`
/// struct UintNote {
///     value: u128,
///     owner: AztecAddress,
///     randomness: Field,
/// }
///
/// struct AztecAddress {
///     inner: Field,
/// }
/// \`\`\`
///
/// If \`UintNote\` is the input type, the function will generate the following deserialization code:
/// \`\`\`
/// UintNote {
///     value: fields[0] as u128,
///     owner: AztecAddress {
///         inner: fields[1],
///     },
///     randomness: fields[2],
/// }
/// \`\`\`
/// # Nested Struct Example with Unpacking
/// - given the same setup as above and given that u128, AztecAddress and Field implement the \`Packable\` trait
///   the result we get is:
/// \`\`\`
/// UintNote {
///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),
///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),
///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),
/// }
/// \`\`\`
///
/// # Panics
/// - If the deserialization logic encounters a type it does not support.
/// - If an incorrect number of fields are consumed when deserializing a string.
pub comptime fn generate_deserialize_from_fields(
    name: Quoted,
    typ: Type,
    field_array_name: Quoted,
    num_already_consumed: u32,
    should_unpack: bool,
) -> (Quoted, u32) {
    let mut result = quote {};
    // Counter for the number of fields consumed
    let mut consumed_counter: u32 = 0;

    // If the type implements \`Packable\`, its length will be assigned to the \`maybe_packed_len_typ\` variable.
    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();
    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();

    if (should_unpack & typ.implements(packable_constraint)) {
        // Unpacking is enabled and the given type implements the \`Packable\` trait so we call the \`unpack()\`
        // method, add the resulting field array to \`aux_vars\` and each field to \`fields\`.
        let packed_len = maybe_packed_len_typ.as_constant().unwrap();

        // We copy the packed fields into a new array and pass that to the unpack function in a quote
        let mut packed_fields_quotes = &[];
        for i in 0..packed_len {
            let index_in_field_array = i + num_already_consumed;
            packed_fields_quotes =
                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });
        }
        let packed_fields = packed_fields_quotes.join(quote {,});

        // Now we call unpack on the type
        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });
        result = quote { $unpack_method([ $packed_fields ]) };

        consumed_counter = packed_len;
    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {
        // The field is a primitive so we just reference it in the field array
        result = quote { $field_array_name[$num_already_consumed] as $typ };
        consumed_counter = 1;
    } else if typ.as_data_type().is_some() {
        // The field is a struct so we iterate over each struct field and recursively call
        // \`generate_deserialize_from_fields\`
        let (nested_def, generics) = typ.as_data_type().unwrap();
        let nested_name = nested_def.name();
        let mut deserialized_fields_list = &[];

        // Iterate over each field in the struct
        for field in nested_def.fields(generics) {
            let (field_name, field_type) = field;
            // Recursively call \`generate_deserialize_from_fields\` for each field in the struct
            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(
                field_name,
                field_type,
                field_array_name,
                consumed_counter + num_already_consumed,
                should_unpack,
            );
            // We increment the consumed counter by the number of fields consumed in the recursion
            consumed_counter += num_consumed_in_recursion;
            // We add the deserialized field to the list of deserialized fields.
            // E.g. \`value: u128 { lo: fields[0], hi: fields[1] }\`
            deserialized_fields_list =
                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });
        }

        // We can construct the struct from the deserialized fields
        let deserialized_fields = deserialized_fields_list.join(quote {,});
        result = quote {
                $nested_name {
                    $deserialized_fields
                }
            };
    } else if typ.as_array().is_some() {
        // The field is an array so we iterate over each element and recursively call
        // \`generate_deserialize_from_fields\`
        let (element_type, array_len) = typ.as_array().unwrap();
        let array_len = array_len.as_constant().unwrap();
        let mut array_fields_list = &[];

        // Iterate over each element in the array
        for _ in 0..array_len {
            // Recursively call \`generate_deserialize_from_fields\` for each element in the array
            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(
                name,
                element_type,
                field_array_name,
                consumed_counter + num_already_consumed,
                should_unpack,
            );
            // We increment the consumed counter by the number of fields consumed in the recursion
            consumed_counter += num_consumed_in_recursion;
            // We add the deserialized field to the list of deserialized fields.
            array_fields_list = array_fields_list.push_back(deserialized_field);
        }

        // We can construct the array from the deserialized fields
        let array_fields = array_fields_list.join(quote {,});
        result = quote { [ $array_fields ] };
    } else if typ.as_str().is_some() {
        // The field is a string and we expect each byte of the string to be represented as 1 field in the field
        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call
        // to \`generate_deserialize_from_fields\`.
        let length_type = typ.as_str().unwrap();
        let str_len = length_type.as_constant().unwrap();
        let mut byte_list = &[];

        // Iterate over each character in the string
        for _ in 0..str_len {
            // Recursively call \`generate_deserialize_from_fields\` for each character in the string
            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(
                name,
                quote {u8}.as_type(),
                field_array_name,
                consumed_counter + num_already_consumed,
                should_unpack,
            );

            // We should consume just one field in the recursion so we sanity check that
            assert_eq(
                num_consumed_in_recursion,
                1,
                "Incorrect number of fields consumed in string deserialization",
            );

            // We increment the consumed counter by 1 as we have consumed one field
            consumed_counter += 1;

            // We add the deserialized field to the list of deserialized fields.
            // E.g. \`fields[6] as u8\`
            byte_list = byte_list.push_back(deserialized_field);
        }

        // We construct the string from the deserialized fields
        let bytes = byte_list.join(quote {,});
        result = quote { [ $bytes ].as_str_unchecked() };
    } else {
        panic(
            f"Unsupported type for serialization of argument {name} and type {typ}",
        )
    }

    (result, consumed_counter)
}

/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary
/// for serialization. If \`should_pack\` is true, we check if the type implements the \`Packable\` trait and pack it
/// if it does.
///
/// # Parameters
/// - \`name\`: The base identifier (e.g., \`self\`, \`some_var\`).
/// - \`typ\`: The type being serialized (e.g., a custom struct, array, or primitive type).
/// - \`should_pack\`: A boolean indicating whether the type should be packed.
///
/// # Returns
/// A tuple containing:
/// - A flattened array of \`Quoted\` field references representing the serialized fields.
/// - An array of \`Quoted\` auxiliary variables needed for serialization, such as byte arrays for strings.
///
/// # Examples
///
/// ## Struct
/// Given the following struct:
/// \`\`\`rust
/// struct MockStruct {
///     a: Field,
///     b: Field,
/// }
/// \`\`\`
///
/// Serializing the struct:
/// \`\`\`rust
/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)
/// // Returns:
/// // ([\`my_mock_struct.a\`, \`my_mock_struct.b\`], [])
/// \`\`\`
///
/// ## Nested Struct
/// For a more complex struct:
/// \`\`\`rust
/// struct NestedStruct {
///     m1: MockStruct,
///     m2: MockStruct,
/// }
/// \`\`\`
///
/// Serialization output:
/// \`\`\`rust
/// generate_serialize_to_fields(quote { self }, NestedStruct, false)
/// // Returns:
/// // ([\`self.m1.a\`, \`self.m1.b\`, \`self.m2.a\`, \`self.m2.b\`], [])
/// \`\`\`
///
/// ## Array
/// For an array type:
/// \`\`\`rust
/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)
/// // Returns:
/// // ([\`my_array[0]\`, \`my_array[1]\`, \`my_array[2]\`], [])
/// \`\`\`
///
/// ## String
/// For a string field, where each character is serialized as a \`Field\`:
/// \`\`\`rust
/// generate_serialize_to_fields(quote { my_string }, StringType, false)
/// // Returns:
/// // ([\`my_string_as_bytes[0] as Field\`, \`my_string_as_bytes[1] as Field\`, ...],
/// // [\`let my_string_as_bytes = my_string.as_bytes()\`])
/// \`\`\`
///
/// ## Nested Struct with packing enabled
/// - u128 has a \`Packable\` implementation hence it will be packed.
///
/// For a more complex struct:
/// \`\`\`rust
/// struct MyStruct {
///     value: u128,
///     value2: Field,
/// }
/// \`\`\`
///
/// # Panics
/// - If the type is unsupported for serialization.
/// - If the provided \`typ\` contains invalid constants or incompatible structures.
pub comptime fn generate_serialize_to_fields(
    name: Quoted,
    typ: Type,
    should_pack: bool,
) -> ([Quoted], [Quoted]) {
    let mut fields = &[];
    let mut aux_vars = &[];

    // If the type implements \`Packable\`, its length will be assigned to the \`maybe_packed_len_typ\` variable.
    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();
    let packable_constraint =
        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();

    if (should_pack & typ.implements(packable_constraint)) {
        // Packing is enabled and the given type implements the \`Packable\` trait so we call the \`pack()\`
        // method, add the resulting field array to \`aux_vars\` and each field to \`fields\`.
        let packed_len = maybe_packed_len_typ.as_constant().unwrap();

        // We collapse the name to a one that gets tokenized as a single token (e.g. "self.value" -> "self_value").
        let name_at_one_token = collapse_to_one_token(name);
        let packed_struct_name = f"{name_at_one_token}_aux_var".quoted_contents();

        // We add the individual fields to the fields array
        let pack_method = get_trait_impl_method(
            typ,
            quote { crate::traits::Packable<$packed_len> },
            quote { pack },
        );
        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };
        for i in 0..packed_len {
            fields = fields.push_back(quote { $packed_struct_name[$i] });
        }

        // We add the new auxiliary variable to the aux_vars array
        aux_vars = aux_vars.push_back(packed_struct);
    } else if typ.is_field() {
        // For field we just add the value to fields
        fields = fields.push_back(name);
    } else if typ.as_integer().is_some() | typ.is_bool() {
        // For integer and bool we just cast to Field and add the value to fields
        fields = fields.push_back(quote { $name as Field });
    } else if typ.as_data_type().is_some() {
        // For struct we pref
        let nested_struct = typ.as_data_type().unwrap();
        let params = nested_struct.0.fields(nested_struct.1);
        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {
            let maybe_prefixed_name = if name == quote {} {
                // Triggered when the param name is of a value available in the current scope (e.g. a function
                // argument) --> then we don't prefix the name with anything.
                param_name
            } else {
                // Triggered when we want to prefix the param name with the \`name\` from function input. This
                // can typically be \`self\` when implementing a method on a struct.
                quote { $name.$param_name }
            };
            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)
        });
        let struct_flattened_fields = struct_flattened.fold(
            &[],
            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),
        );
        let struct_flattened_aux_vars = struct_flattened.fold(
            &[],
            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),
        );
        fields = fields.append(struct_flattened_fields);
        aux_vars = aux_vars.append(struct_flattened_aux_vars);
    } else if typ.as_array().is_some() {
        // For array we recursively call \`generate_serialize_to_fields(...)\` for each element
        let (element_type, array_len) = typ.as_array().unwrap();
        let array_len = array_len.as_constant().unwrap();
        for i in 0..array_len {
            let (element_fields, element_aux_vars) =
                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);
            fields = fields.append(element_fields);
            aux_vars = aux_vars.append(element_aux_vars);
        }
    } else if typ.as_str().is_some() {
        // For string we convert the value to bytes, we store the \`as_bytes\` in an auxiliary variables and
        // then we add each byte to fields as a Field
        let length_type = typ.as_str().unwrap();
        let str_len = length_type.as_constant().unwrap();
        let as_member = name.as_expr().unwrap().as_member_access();
        let var_name = if as_member.is_some() {
            as_member.unwrap().1
        } else {
            name
        };
        let as_bytes_name = f"{var_name}_as_bytes".quoted_contents();
        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };
        for i in 0..str_len {
            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });
        }
        aux_vars = aux_vars.push_back(as_bytes);
    } else {
        panic(
            f"Unsupported type for serialization of argument {name} and type {typ}",
        )
    }

    (fields, aux_vars)
}

/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all \`.\` with \`_\`.
/// E.g. "self.values[0]" -> "self_values_0_"
comptime fn collapse_to_one_token(q: Quoted) -> Quoted {
    let tokens = q.tokens();

    let mut single_token = quote {};
    for token in tokens {
        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {
            quote {_}
        } else {
            token
        };
        single_token = f"{single_token}{new_token}".quoted_contents();
    }
    single_token
}

pub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {
    let typ = s.as_type();
    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);
    let aux_vars_for_serialization = if aux_vars.len() > 0 {
        let joint = aux_vars.join(quote {;});
        quote { $joint; }
    } else {
        quote {}
    };

    let field_serializations = fields.join(quote {,});
    let serialized_len = fields.len();
    quote {
        impl Serialize<$serialized_len> for $typ {
            #[inline_always]
            fn serialize(self) -> [Field; $serialized_len] {
                $aux_vars_for_serialization
                [ $field_serializations ]
            }
        }
    }
}

pub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {
    let typ = s.as_type();
    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);
    let serialized_len = fields.len();
    let (deserialized, _) =
        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);
    quote {
        impl Deserialize<$serialized_len> for $typ {
            #[inline_always]
            fn deserialize(serialized: [Field; $serialized_len]) -> Self {
                $deserialized
            }
        }
    }
}

/// Generates \`Packable\` implementation for a given struct and returns the packed length.
///
/// Note: We are having this function separate from \`derive_packable\` because we use this in the note macros to get
/// the packed length of a note as well as the \`Packable\` implementation. We need the length to be able to register
/// the note in the global \`NOTES\` map. There the length is used to generate partial note helper functions.
pub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {
    let packing_enabled = true;

    let typ = s.as_type();
    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);
    let aux_vars_for_packing = if aux_vars.len() > 0 {
        let joint = aux_vars.join(quote {;});
        quote { $joint; }
    } else {
        quote {}
    };

    let (unpacked, _) =
        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);

    let field_packings = fields.join(quote {,});
    let packed_len = fields.len();
    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();
    (
        quote {
        impl $packable_trait for $typ {
            fn pack(self) -> [Field; $packed_len] {
                $aux_vars_for_packing
                [ $field_packings ]
            }

            fn unpack(packed: [Field; $packed_len]) -> Self {
                $unpacked
            }
        }
    },
        packed_len,
    )
}

pub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {
    let (packable_impl, _) = derive_packable_and_get_packed_len(s);
    packable_impl
}

#[derive(Packable, Serialize, Deserialize, Eq)]
pub struct Smol {
    a: Field,
    b: Field,
}

#[derive(Serialize, Deserialize, Eq)]
pub struct HasArray {
    a: [Field; 2],
    b: bool,
}

#[derive(Serialize, Deserialize, Eq)]
pub struct Fancier {
    a: Smol,
    b: [Field; 2],
    c: [u8; 3],
    d: str<16>,
}

fn main() {
    assert(false);
}

#[test]
fn smol_test() {
    let smol = Smol { a: 1, b: 2 };
    let serialized = smol.serialize();
    assert(serialized == [1, 2], serialized);
    let deserialized = Smol::deserialize(serialized);
    assert(deserialized == smol);

    // None of the struct members implements the \`Packable\` trait so the packed and serialized data should be the same
    let packed = smol.pack();
    assert_eq(packed, serialized, "Packed does not match serialized");
}

#[test]
fn has_array_test() {
    let has_array = HasArray { a: [1, 2], b: true };
    let serialized = has_array.serialize();
    assert(serialized == [1, 2, 1], serialized);
    let deserialized = HasArray::deserialize(serialized);
    assert(deserialized == has_array);
}

#[test]
fn fancier_test() {
    let fancier =
        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: "metaprogramming!" };
    let serialized = fancier.serialize();
    assert(
        serialized
            == [
                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,
            ],
        serialized,
    );
    let deserialized = Fancier::deserialize(serialized);
    assert(deserialized == fancier);
}
`},299:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",source:`pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;
use crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};

pub global POINT_LENGTH: u32 = 3;

impl Serialize<POINT_LENGTH> for Point {
    fn serialize(self: Self) -> [Field; POINT_LENGTH] {
        [self.x, self.y, self.is_infinite as Field]
    }
}

impl Hash for Point {
    fn hash(self) -> Field {
        poseidon2_hash(self.serialize())
    }
}

impl Empty for Point {
    /// Note: Does not return a valid point on curve - instead represents an empty/"unpopulated" point struct (e.g.
    /// empty/unpopulated value in an array of points).
    fn empty() -> Self {
        Point { x: 0, y: 0, is_infinite: false }
    }
}

impl Deserialize<POINT_LENGTH> for Point {
    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {
        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }
    }
}
// TODO(#11356): use compact representation here.
impl Packable<POINT_LENGTH> for Point {
    fn pack(self) -> [Field; POINT_LENGTH] {
        self.serialize()
    }

    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {
        Self::deserialize(packed)
    }
}
`},300:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",source:`use crate::constants::TWO_POW_64;

// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr
// It exists as we sometimes need to perform custom absorption, but the stdlib version
// has a private absorb() method (it's also designed to just be a hasher)
// Can be removed when standalone noir poseidon lib exists: See noir#6679

comptime global RATE: u32 = 3;

pub struct Poseidon2Sponge {
    pub cache: [Field; 3],
    pub state: [Field; 4],
    pub cache_size: u32,
    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze
}

impl Poseidon2Sponge {
    #[no_predicates]
    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {
        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)
    }

    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {
        let mut result =
            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };
        result.state[RATE] = iv;
        result
    }

    fn perform_duplex(&mut self) {
        // add the cache into sponge state
        for i in 0..RATE {
            // We effectively zero-pad the cache by only adding to the state
            // cache that is less than the specified \`cache_size\`
            if i < self.cache_size {
                self.state[i] += self.cache[i];
            }
        }
        self.state = std::hash::poseidon2_permutation(self.state, 4);
    }

    pub fn absorb(&mut self, input: Field) {
        assert(!self.squeeze_mode);
        if self.cache_size == RATE {
            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache
            self.perform_duplex();
            self.cache[0] = input;
            self.cache_size = 1;
        } else {
            // If we're absorbing, and the cache is not full, add the input into the cache
            self.cache[self.cache_size] = input;
            self.cache_size += 1;
        }
    }

    pub fn squeeze(&mut self) -> Field {
        assert(!self.squeeze_mode);
        // If we're in absorb mode, apply sponge permutation to compress the cache.
        self.perform_duplex();
        self.squeeze_mode = true;

        // Pop one item off the top of the permutation and return it.
        self.state[0]
    }

    fn hash_internal<let N: u32>(
        input: [Field; N],
        in_len: u32,
        is_variable_length: bool,
    ) -> Field {
        let iv: Field = (in_len as Field) * TWO_POW_64;
        let mut sponge = Poseidon2Sponge::new(iv);
        for i in 0..input.len() {
            if i < in_len {
                sponge.absorb(input[i]);
            }
        }

        // In the case where the hash preimage is variable-length, we append \`1\` to the end of the input, to distinguish
        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures
        // fixed-length and variable-length hashes do not collide)
        if is_variable_length {
            sponge.absorb(1);
        }
        sponge.squeeze()
    }
}
`},310:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",source:`use crate::{
    address::public_keys_hash::PublicKeysHash,
    constants::{
        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,
        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,
    },
    hash::poseidon2_hash_with_separator,
    point::POINT_LENGTH,
    traits::{Deserialize, Hash, Serialize},
};

use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;
use std::default::Default;

pub global PUBLIC_KEYS_LENGTH: u32 = 12;

pub struct PublicKeys {
    pub npk_m: NpkM,
    pub ivpk_m: IvpkM,
    pub ovpk_m: OvpkM,
    pub tpk_m: TpkM,
}

pub trait ToPoint {
    fn to_point(self) -> Point;
}

pub struct NpkM {
    pub inner: Point,
}

impl ToPoint for NpkM {
    fn to_point(self) -> Point {
        self.inner
    }
}

impl Serialize<POINT_LENGTH> for NpkM {
    fn serialize(self) -> [Field; POINT_LENGTH] {
        self.inner.serialize()
    }
}

// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091
impl Hash for NpkM {
    fn hash(self) -> Field {
        self.inner.hash()
    }
}

pub struct IvpkM {
    pub inner: Point,
}

impl ToPoint for IvpkM {
    fn to_point(self) -> Point {
        self.inner
    }
}

impl Serialize<POINT_LENGTH> for IvpkM {
    fn serialize(self) -> [Field; POINT_LENGTH] {
        self.inner.serialize()
    }
}

pub struct OvpkM {
    pub inner: Point,
}

impl Hash for OvpkM {
    fn hash(self) -> Field {
        self.inner.hash()
    }
}

impl ToPoint for OvpkM {
    fn to_point(self) -> Point {
        self.inner
    }
}

impl Serialize<POINT_LENGTH> for OvpkM {
    fn serialize(self) -> [Field; POINT_LENGTH] {
        self.inner.serialize()
    }
}

pub struct TpkM {
    pub inner: Point,
}

impl ToPoint for TpkM {
    fn to_point(self) -> Point {
        self.inner
    }
}

impl Serialize<POINT_LENGTH> for TpkM {
    fn serialize(self) -> [Field; POINT_LENGTH] {
        self.inner.serialize()
    }
}

impl Default for PublicKeys {
    fn default() -> Self {
        PublicKeys {
            npk_m: NpkM {
                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },
            },
            ivpk_m: IvpkM {
                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },
            },
            ovpk_m: OvpkM {
                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },
            },
            tpk_m: TpkM {
                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },
            },
        }
    }
}

impl Eq for PublicKeys {
    fn eq(self, other: PublicKeys) -> bool {
        (self.npk_m.inner == other.npk_m.inner)
            & (self.ivpk_m.inner == other.ivpk_m.inner)
            & (self.ovpk_m.inner == other.ovpk_m.inner)
            & (self.tpk_m.inner == other.tpk_m.inner)
    }
}

impl PublicKeys {
    pub fn hash(self) -> PublicKeysHash {
        PublicKeysHash::from_field(poseidon2_hash_with_separator(
            self.serialize(),
            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,
        ))
    }
}

impl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {
    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {
        [
            self.npk_m.inner.x,
            self.npk_m.inner.y,
            self.npk_m.inner.is_infinite as Field,
            self.ivpk_m.inner.x,
            self.ivpk_m.inner.y,
            self.ivpk_m.inner.is_infinite as Field,
            self.ovpk_m.inner.x,
            self.ovpk_m.inner.y,
            self.ovpk_m.inner.is_infinite as Field,
            self.tpk_m.inner.x,
            self.tpk_m.inner.y,
            self.tpk_m.inner.is_infinite as Field,
        ]
    }
}

impl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {
    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {
        PublicKeys {
            npk_m: NpkM {
                inner: Point {
                    x: serialized[0],
                    y: serialized[1],
                    is_infinite: serialized[2] as bool,
                },
            },
            ivpk_m: IvpkM {
                inner: Point {
                    x: serialized[3],
                    y: serialized[4],
                    is_infinite: serialized[5] as bool,
                },
            },
            ovpk_m: OvpkM {
                inner: Point {
                    x: serialized[6],
                    y: serialized[7],
                    is_infinite: serialized[8] as bool,
                },
            },
            tpk_m: TpkM {
                inner: Point {
                    x: serialized[9],
                    y: serialized[10],
                    is_infinite: serialized[11] as bool,
                },
            },
        }
    }
}

pub struct AddressPoint {
    pub inner: Point,
}

impl ToPoint for AddressPoint {
    fn to_point(self) -> Point {
        self.inner
    }
}

#[test]
unconstrained fn compute_public_keys_hash() {
    let keys = PublicKeys {
        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },
        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },
        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },
        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },
    };

    let actual = keys.hash();
    let expected_public_keys_hash =
        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;

    assert(actual.to_field() == expected_public_keys_hash);
}

#[test]
unconstrained fn compute_default_hash() {
    let keys = PublicKeys::default();

    let actual = keys.hash();
    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;

    assert(actual.to_field() == test_data_default_hash);
}

#[test]
unconstrained fn test_public_keys_serialization() {
    let keys = PublicKeys {
        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },
        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },
        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },
        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },
    };

    let serialized = keys.serialize();
    let deserialized = PublicKeys::deserialize(serialized);

    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);
    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);
    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);
    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);
    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);
    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);
    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);
    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);
}
`},321:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",source:`use crate::{hash::poseidon2_hash, traits::ToField};

pub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field
where
    K: ToField,
{
    poseidon2_hash([storage_slot, key.to_field()])
}

mod test {
    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};

    #[test]
    fn test_derive_storage_slot_in_map_matches_typescript() {
        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;
        let key = AztecAddress::from_field(
            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,
        );

        let slot = derive_storage_slot_in_map(map_slot, key);

        // The following value was generated by \`map_slot.test.ts\`
        let slot_from_typescript =
            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;

        assert_eq(slot, slot_from_typescript);
    }
}
`},339:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",source:`use crate::traits::Packable;

global BOOL_PACKED_LEN: u32 = 1;
global U8_PACKED_LEN: u32 = 1;
global U16_PACKED_LEN: u32 = 1;
global U32_PACKED_LEN: u32 = 1;
global U64_PACKED_LEN: u32 = 1;
global U128_PACKED_LEN: u32 = 1;
global FIELD_PACKED_LEN: u32 = 1;
global I8_PACKED_LEN: u32 = 1;
global I16_PACKED_LEN: u32 = 1;
global I32_PACKED_LEN: u32 = 1;
global I64_PACKED_LEN: u32 = 1;

impl Packable<BOOL_PACKED_LEN> for bool {
    fn pack(self) -> [Field; BOOL_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {
        fields[0] as bool
    }
}

impl Packable<U8_PACKED_LEN> for u8 {
    fn pack(self) -> [Field; U8_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {
        fields[0] as u8
    }
}

impl Packable<U16_PACKED_LEN> for u16 {
    fn pack(self) -> [Field; U16_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {
        fields[0] as u16
    }
}

impl Packable<U32_PACKED_LEN> for u32 {
    fn pack(self) -> [Field; U32_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {
        fields[0] as u32
    }
}

impl Packable<U64_PACKED_LEN> for u64 {
    fn pack(self) -> [Field; U64_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {
        fields[0] as u64
    }
}

impl Packable<U128_PACKED_LEN> for u128 {
    fn pack(self) -> [Field; U128_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {
        fields[0] as u128
    }
}

impl Packable<FIELD_PACKED_LEN> for Field {
    fn pack(self) -> [Field; FIELD_PACKED_LEN] {
        [self]
    }

    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {
        fields[0]
    }
}

impl Packable<I8_PACKED_LEN> for i8 {
    fn pack(self) -> [Field; I8_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {
        fields[0] as i8
    }
}

impl Packable<I16_PACKED_LEN> for i16 {
    fn pack(self) -> [Field; I16_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {
        fields[0] as i16
    }
}

impl Packable<I32_PACKED_LEN> for i32 {
    fn pack(self) -> [Field; I32_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {
        fields[0] as i32
    }
}

impl Packable<I64_PACKED_LEN> for i64 {
    fn pack(self) -> [Field; I64_PACKED_LEN] {
        [self as Field]
    }

    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {
        fields[0] as i64
    }
}

impl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]
where
    T: Packable<M>,
{
    fn pack(self) -> [Field; N * M] {
        let mut result: [Field; N * M] = std::mem::zeroed();
        let mut serialized: [Field; M] = std::mem::zeroed();
        for i in 0..N {
            serialized = self[i].pack();
            for j in 0..M {
                result[i * M + j] = serialized[j];
            }
        }
        result
    }

    fn unpack(fields: [Field; N * M]) -> Self {
        let mut reader = crate::utils::reader::Reader::new(fields);
        let mut result: [T; N] = std::mem::zeroed();
        reader.read_struct_array::<T, M, N>(Packable::unpack, result)
    }
}

#[test]
fn test_u16_packing() {
    let a: u16 = 10;
    assert_eq(a, u16::unpack(a.pack()));
}

#[test]
fn test_i8_packing() {
    let a: i8 = -10;
    assert_eq(a, i8::unpack(a.pack()));
}

#[test]
fn test_i16_packing() {
    let a: i16 = -10;
    assert_eq(a, i16::unpack(a.pack()));
}

#[test]
fn test_i32_packing() {
    let a: i32 = -10;
    assert_eq(a, i32::unpack(a.pack()));
}

#[test]
fn test_i64_packing() {
    let a: i64 = -10;
    assert_eq(a, i64::unpack(a.pack()));
}
`},340:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",source:`use crate::traits::{Deserialize, Serialize};

global BOOL_SERIALIZED_LEN: u32 = 1;
global U8_SERIALIZED_LEN: u32 = 1;
global U16_SERIALIZED_LEN: u32 = 1;
global U32_SERIALIZED_LEN: u32 = 1;
global U64_SERIALIZED_LEN: u32 = 1;
global U128_SERIALIZED_LEN: u32 = 1;
global FIELD_SERIALIZED_LEN: u32 = 1;
global I8_SERIALIZED_LEN: u32 = 1;
global I16_SERIALIZED_LEN: u32 = 1;
global I32_SERIALIZED_LEN: u32 = 1;
global I64_SERIALIZED_LEN: u32 = 1;

impl Serialize<BOOL_SERIALIZED_LEN> for bool {
    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<BOOL_SERIALIZED_LEN> for bool {
    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {
        fields[0] as bool
    }
}

impl Serialize<U8_SERIALIZED_LEN> for u8 {
    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<U8_SERIALIZED_LEN> for u8 {
    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {
        fields[0] as u8
    }
}

impl Serialize<U16_SERIALIZED_LEN> for u16 {
    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<U16_SERIALIZED_LEN> for u16 {
    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {
        fields[0] as u16
    }
}

impl Serialize<U32_SERIALIZED_LEN> for u32 {
    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<U32_SERIALIZED_LEN> for u32 {
    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {
        fields[0] as u32
    }
}

impl Serialize<U64_SERIALIZED_LEN> for u64 {
    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<U64_SERIALIZED_LEN> for u64 {
    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {
        fields[0] as u64
    }
}

impl Serialize<U128_SERIALIZED_LEN> for u128 {
    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<U128_SERIALIZED_LEN> for u128 {
    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {
        fields[0] as u128
    }
}

impl Serialize<FIELD_SERIALIZED_LEN> for Field {
    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {
        [self]
    }
}

impl Deserialize<FIELD_SERIALIZED_LEN> for Field {
    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {
        fields[0]
    }
}

impl Serialize<I8_SERIALIZED_LEN> for i8 {
    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<I8_SERIALIZED_LEN> for i8 {
    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {
        fields[0] as i8
    }
}

impl Serialize<I16_SERIALIZED_LEN> for i16 {
    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<I16_SERIALIZED_LEN> for i16 {
    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {
        fields[0] as i16
    }
}

impl Serialize<I32_SERIALIZED_LEN> for i32 {
    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<I32_SERIALIZED_LEN> for i32 {
    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {
        fields[0] as i32
    }
}

impl Serialize<I64_SERIALIZED_LEN> for i64 {
    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {
        [self as Field]
    }
}

impl Deserialize<I64_SERIALIZED_LEN> for i64 {
    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {
        fields[0] as i64
    }
}

impl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]
where
    T: Serialize<M>,
{
    fn serialize(self) -> [Field; N * M] {
        let mut result: [Field; N * M] = std::mem::zeroed();
        let mut serialized: [Field; M] = std::mem::zeroed();
        for i in 0..N {
            serialized = self[i].serialize();
            for j in 0..M {
                result[i * M + j] = serialized[j];
            }
        }
        result
    }
}

impl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]
where
    T: Deserialize<M>,
{
    fn deserialize(fields: [Field; N * M]) -> Self {
        let mut reader = crate::utils::reader::Reader::new(fields);
        let mut result: [T; N] = std::mem::zeroed();
        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)
    }
}

#[test]
fn test_u16_serialization() {
    let a: u16 = 10;
    assert_eq(a, u16::deserialize(a.serialize()));
}

#[test]
fn test_i8_serialization() {
    let a: i8 = -10;
    assert_eq(a, i8::deserialize(a.serialize()));
}

#[test]
fn test_i16_serialization() {
    let a: i16 = -10;
    assert_eq(a, i16::deserialize(a.serialize()));
}

#[test]
fn test_i32_serialization() {
    let a: i32 = -10;
    assert_eq(a, i32::deserialize(a.serialize()));
}

#[test]
fn test_i64_serialization() {
    let a: i64 = -10;
    assert_eq(a, i64::deserialize(a.serialize()));
}
`},356:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",source:`pub mod assert_array_appended;
pub mod assert_array_prepended;
pub mod assert_combined_array;
pub mod assert_combined_transformed_array;
pub mod assert_exposed_sorted_transformed_value_array;
pub mod assert_sorted_array;
pub mod assert_sorted_transformed_value_array;
pub mod assert_split_sorted_transformed_value_arrays;
pub mod assert_split_transformed_value_arrays;
pub mod get_sorted_result;
pub mod get_sorted_tuple;
pub mod sort_by;
pub mod sort_by_counter;

// Re-exports.
pub use assert_array_appended::{
    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,
    assert_array_appended_scoped,
};
pub use assert_array_prepended::assert_array_prepended;
pub use assert_combined_array::{assert_combined_array, combine_arrays};
pub use assert_combined_transformed_array::{
    assert_combined_transformed_array, combine_and_transform_arrays,
};
pub use assert_exposed_sorted_transformed_value_array::{
    assert_exposed_sorted_transformed_value_array,
    get_order_hints::{get_order_hints_asc, OrderHint},
};
pub use assert_sorted_array::assert_sorted_array;
pub use assert_sorted_transformed_value_array::{
    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,
};
pub use assert_split_sorted_transformed_value_arrays::{
    assert_split_sorted_transformed_value_arrays_asc,
    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},
};
pub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;
pub use get_sorted_result::{get_sorted_result, SortedResult};
pub use sort_by_counter::sort_by_counter_asc;

use crate::traits::{Empty, is_empty};

pub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(
    src: [Field; SRC_LEN],
    offset: u32,
) -> [Field; DST_LEN] {
    assert(offset + DST_LEN <= SRC_LEN, "offset too large");

    let mut dst: [Field; DST_LEN] = std::mem::zeroed();
    for i in 0..DST_LEN {
        dst[i] = src[i + offset];
    }

    dst
}

// Helper function to convert a validated array to BoundedVec.
// Important: Only use it for validated arrays: validate_array(array) should be true.
pub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>
where
    T: Empty + Eq,
{
    let len = array_length(array);
    BoundedVec::from_parts_unchecked(array, len)
}

// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element
// is not found, the function returns N as the index.
pub unconstrained fn find_index_hint<T, let N: u32, Env>(
    array: [T; N],
    find: fn[Env](T) -> bool,
) -> u32 {
    let mut index = N;
    for i in 0..N {
        // We check \`index == N\` to ensure that we only update the index if we haven't found a match yet.
        if (index == N) & find(array[i]) {
            index = i;
        }
    }
    index
}

// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,
// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is
// valid.
pub fn validate_array<T, let N: u32>(array: [T; N]) -> u32
where
    T: Empty + Eq,
{
    let mut seen_empty = false;
    let mut length = 0;
    for i in 0..N {
        if is_empty(array[i]) {
            seen_empty = true;
        } else {
            assert(seen_empty == false, "invalid array");
            length += 1;
        }
    }
    length
}

// Helper function to count the number of non-empty elements in a validated array.
// Important: Only use it for validated arrays where validate_array(array) returns true,
// which ensures that:
// 1. All elements before the first empty element are non-empty
// 2. All elements after and including the first empty element are empty
// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements
pub fn array_length<T, let N: u32>(array: [T; N]) -> u32
where
    T: Empty + Eq,
{
    // We get the length by checking the index of the first empty element.

    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness
    // of the element and non-emptiness of the previous element is checked below.
    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };
    if length != 0 {
        assert(!is_empty(array[length - 1]));
    }
    if length != N {
        assert(is_empty(array[length]));
    }
    length
}

// Returns the number of consecutive elements at the start of the array for which the predicate returns false.
// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.
pub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {
    let mut length = 0;
    let mut stop = false;
    for i in 0..N {
        if predicate(array[i]) {
            stop = true;
        } else {
            assert(
                stop == false,
                "matching element found after already encountering a non-matching element",
            );
            length += 1;
        }
    }
    length
}

pub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {
    let mut result = [array1[0]; N + M];
    for i in 1..N {
        result[i] = array1[i];
    }
    for i in 0..M {
        result[i + N] = array2[i];
    }
    result
}

/// This function assumes that \`array1\` and \`array2\` contain no more than N non-empty elements between them,
/// if this is not the case then elements from the end of \`array2\` will be dropped.
pub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]
where
    T: Empty + Eq,
{
    // Safety: we constrain this array below
    let result = unsafe { array_merge_helper(array1, array2) };
    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.
    let array1_len = array_length(array1);
    let mut add_from_left = true;
    for i in 0..N {
        add_from_left &= i != array1_len;
        if add_from_left {
            assert_eq(result[i], array1[i]);
        } else {
            assert_eq(result[i], array2[i - array1_len]);
        }
    }
    result
}

unconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]
where
    T: Empty + Eq,
{
    let mut result: [T; N] = [T::empty(); N];
    let mut i = 0;
    for elem in array1 {
        if !is_empty(elem) {
            result[i] = elem;
            i += 1;
        }
    }
    for elem in array2 {
        if !is_empty(elem) {
            result[i] = elem;
            i += 1;
        }
    }
    result
}

// Helper fn to create a subarray from a given array
pub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]
where
    T: Empty,
{
    assert(M + offset <= N, "Subarray length larger than array length");
    let mut result: [T; M] = [T::empty(); M];
    for i in 0..M {
        result[i] = array[offset + i];
    }
    result
}

pub fn check_permutation<T, let N: u32>(
    original_array: [T; N],
    permuted_array: [T; N],
    original_indexes: [u32; N],
)
where
    T: Eq + Empty,
{
    let mut seen_value = [false; N];
    for i in 0..N {
        let index = original_indexes[i];
        let original_value = original_array[index];
        assert(permuted_array[i].eq(original_value), "Invalid index");
        assert(!seen_value[index], "Duplicated index");
        seen_value[index] = true;
    }
}

// Helper function to find the index of the last element in an array, allowing empty elements.
// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]
// Nothing to do with validated arrays. Correctness constrained by padded_array_length.
pub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32
where
    T: Empty + Eq,
{
    let mut index = N;
    for i in 0..N {
        let j = N - i - 1;
        // We check \`index == N\` to ensure that we only update the index if we haven't found a match yet.
        if (index == N) & !is_empty(array[j]) {
            index = j;
        }
    }
    index
}

// Routine which returns the length of an array right padded by empty elements
// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).
// See smoke_validate_array_trailing for examples.
// Nothing to do with validated arrays. Correctness constrained by padded_array_length.
pub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32
where
    T: Empty + Eq,
{
    let index = find_last_value_index(array);
    if index == N {
        0
    } else {
        index + 1
    }
}

// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,
// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).
pub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32
where
    T: Empty + Eq,
{
    // Safety: this value is constrained in the below loop.
    let length = unsafe { unsafe_padded_array_length(array) };
    // Check the elt just before length is non-zero:
    if length != 0 {
        assert(!is_empty(array[length - 1]), "invalid right padded array");
    }
    // Check all beyond length are zero:
    let mut check_zero = false;
    for i in 0..N {
        check_zero |= i == length;
        if check_zero {
            assert(is_empty(array[i]), "invalid right padded array");
        }
    }
    length
}

// Helper function to check if an array is padded with a given value from a given index.
// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.
pub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool
where
    T: Eq,
{
    let mut is_valid = true;
    let mut should_check = false;
    for i in 0..N {
        should_check |= i == from_index;
        is_valid &= !should_check | (array[i] == padded_with);
    }
    is_valid
}

#[test]
fn smoke_validate_array() {
    let valid_array: [Field; 0] = [];
    assert(validate_array(valid_array) == 0);

    let valid_array = [0];
    assert(validate_array(valid_array) == 0);

    let valid_array = [3];
    assert(validate_array(valid_array) == 1);

    let valid_array = [1, 2, 3];
    assert(validate_array(valid_array) == 3);

    let valid_array = [1, 2, 3, 0];
    assert(validate_array(valid_array) == 3);

    let valid_array = [1, 2, 3, 0, 0];
    assert(validate_array(valid_array) == 3);
}

#[test]
fn smoke_validate_array_trailing() {
    let valid_array: [Field; 0] = [];
    assert(padded_array_length(valid_array) == 0);

    let valid_array = [0];
    assert(padded_array_length(valid_array) == 0);

    let valid_array = [3];
    assert(padded_array_length(valid_array) == 1);

    let valid_array = [1, 0, 3];
    assert(padded_array_length(valid_array) == 3);

    let valid_array = [1, 0, 3, 0];
    assert(padded_array_length(valid_array) == 3);

    let valid_array = [1, 2, 3, 0, 0];
    assert(padded_array_length(valid_array) == 3);

    let valid_array = [0, 0, 3, 0, 0];
    assert(padded_array_length(valid_array) == 3);
}

#[test(should_fail_with = "invalid array")]
fn smoke_validate_array_invalid_case0() {
    let invalid_array = [0, 1];
    let _ = validate_array(invalid_array);
}

#[test(should_fail_with = "invalid array")]
fn smoke_validate_array_invalid_case1() {
    let invalid_array = [1, 0, 0, 1, 0];
    let _ = validate_array(invalid_array);
}

#[test(should_fail_with = "invalid array")]
fn smoke_validate_array_invalid_case2() {
    let invalid_array = [0, 0, 0, 0, 1];
    let _ = validate_array(invalid_array);
}

#[test]
fn test_empty_array_length() {
    assert_eq(array_length([0]), 0);
    assert_eq(array_length([0, 0, 0]), 0);
}

#[test]
fn test_array_length() {
    assert_eq(array_length([123]), 1);
    assert_eq(array_length([123, 0, 0]), 1);
    assert_eq(array_length([123, 456]), 2);
    assert_eq(array_length([123, 456, 0]), 2);
}

#[test]
fn test_array_length_invalid_arrays() {
    // Result can be misleading (but correct) for invalid arrays.
    assert_eq(array_length([0, 0, 123]), 0);
    assert_eq(array_length([0, 123, 0]), 0);
    assert_eq(array_length([0, 123, 456]), 0);
    assert_eq(array_length([123, 0, 456]), 1);
}

#[test]
fn test_array_length_until() {
    let array = [11, 22, 33, 44, 55];
    assert_eq(array_length_until(array, |x| x == 55), 4);
    assert_eq(array_length_until(array, |x| x == 56), 5);
    assert_eq(array_length_until(array, |x| x > 40), 3);
    assert_eq(array_length_until(array, |x| x > 10), 0);
}

#[test(should_fail_with = "matching element found after already encountering a non-matching element")]
fn test_array_length_until_non_consecutive_fails() {
    let array = [1, 1, 0, 1, 0];
    let _ = array_length_until(array, |x| x == 0);
}

#[test(should_fail_with = "matching element found after already encountering a non-matching element")]
fn test_array_length_until_first_non_matching_fails() {
    let array = [1, 0, 0, 0, 0];
    let _ = array_length_until(array, |x| x == 1);
}

#[test]
unconstrained fn find_index_greater_than_min() {
    let values = [10, 20, 30, 40];
    let min = 22;
    let index = find_index_hint(values, |v: Field| min.lt(v));
    assert_eq(index, 2);
}

#[test]
unconstrained fn find_index_not_found() {
    let values = [10, 20, 30, 40];
    let min = 100;
    let index = find_index_hint(values, |v: Field| min.lt(v));
    assert_eq(index, 4);
}

#[test]
fn test_array_concat() {
    let array0 = [1, 2, 3];
    let array1 = [4, 5];
    let concatenated = array_concat(array0, array1);
    assert_eq(concatenated, [1, 2, 3, 4, 5]);
}

#[test]
fn check_permutation_basic_test() {
    let original_array = [1, 2, 3];
    let permuted_array = [3, 1, 2];
    let indexes = [2, 0, 1];
    check_permutation(original_array, permuted_array, indexes);
}

#[test(should_fail_with = "Duplicated index")]
fn check_permutation_duplicated_index() {
    let original_array = [0, 1, 0];
    let permuted_array = [1, 0, 0];
    let indexes = [1, 0, 0];
    check_permutation(original_array, permuted_array, indexes);
}

#[test(should_fail_with = "Invalid index")]
fn check_permutation_invalid_index() {
    let original_array = [0, 1, 2];
    let permuted_array = [1, 0, 0];
    let indexes = [1, 0, 2];
    check_permutation(original_array, permuted_array, indexes);
}

#[test]
fn test_array_padded_with() {
    let array = [11, 22, 33, 44, 44];
    assert_eq(array_padded_with(array, 0, 44), false);
    assert_eq(array_padded_with(array, 1, 44), false);
    assert_eq(array_padded_with(array, 2, 44), false);
    assert_eq(array_padded_with(array, 3, 44), true);
    assert_eq(array_padded_with(array, 4, 44), true);
    assert_eq(array_padded_with(array, 4, 33), false);
    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.
    assert_eq(array_padded_with(array, 0, 11), false);
}
`},359:{path:"/Users/gabrielantonyxaviour/nargo/github.com/AztecProtocol/aztec-packages/v0.87.9/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",source:`pub struct Reader<let N: u32> {
    data: [Field; N],
    offset: u32,
}

impl<let N: u32> Reader<N> {
    pub fn new(data: [Field; N]) -> Self {
        Self { data, offset: 0 }
    }

    pub fn read(&mut self) -> Field {
        let result = self.data[self.offset];
        self.offset += 1;
        result
    }

    pub fn read_u32(&mut self) -> u32 {
        self.read() as u32
    }

    pub fn read_bool(&mut self) -> bool {
        self.read() as bool
    }

    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {
        let mut result = [0; K];
        for i in 0..K {
            result[i] = self.data[self.offset + i];
        }
        self.offset += K;
        result
    }

    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {
        let result = deserialise(self.read_array());
        result
    }

    pub fn read_struct_array<T, let K: u32, let C: u32>(
        &mut self,
        deserialise: fn([Field; K]) -> T,
        mut result: [T; C],
    ) -> [T; C] {
        for i in 0..C {
            result[i] = self.read_struct(deserialise);
        }
        result
    }

    pub fn finish(self) {
        assert(self.offset == self.data.len(), "Reader did not read all data");
    }
}
`},369:{path:"/Users/gabrielantonyxaviour/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",source:`use std::hash::sha256_compression;
use std::runtime::is_unconstrained;

use constants::{
    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,
    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,
};

mod constants;
mod tests;

// Implementation of SHA-256 mapping a byte array of variable length to
// 32 bytes.

// Deprecated in favour of \`sha256_var\`
// docs:start:sha256
pub fn sha256<let N: u32>(input: [u8; N]) -> HASH
// docs:end:sha256
{
    digest(input)
}

// SHA-256 hash function
#[no_predicates]
pub fn digest<let N: u32>(msg: [u8; N]) -> HASH {
    sha256_var(msg, N as u64)
}

// Variable size SHA-256 hash
pub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {
    let message_size = message_size as u32;
    assert(message_size <= N);

    if std::runtime::is_unconstrained() {
        // Safety: SHA256 is running as an unconstrained function.
        unsafe {
            __sha256_var(msg, message_size)
        }
    } else {
        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];
        // Intermediate hash, starting with the canonical initial value
        let mut h: STATE = INITIAL_STATE;
        // Pointer into msg_block on a 64 byte scale
        let mut msg_byte_ptr = 0;
        let num_blocks = N / BLOCK_SIZE;
        for i in 0..num_blocks {
            let msg_start = BLOCK_SIZE * i;
            let (new_msg_block, new_msg_byte_ptr) =
                unsafe { build_msg_block(msg, message_size, msg_start) };

            if msg_start < message_size {
                msg_block = new_msg_block;
            }

            // Verify the block we are compressing was appropriately constructed
            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);
            if msg_start < message_size {
                msg_byte_ptr = new_msg_byte_ptr;
            }

            // If the block is filled, compress it.
            // An un-filled block is handled after this loop.
            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {
                h = sha256_compression(msg_block, h);
            }
        }

        let modulo = N % BLOCK_SIZE;
        // Handle setup of the final msg block.
        // This case is only hit if the msg is less than the block size,
        // or our message cannot be evenly split into blocks.
        if modulo != 0 {
            let msg_start = BLOCK_SIZE * num_blocks;
            let (new_msg_block, new_msg_byte_ptr) =
                unsafe { build_msg_block(msg, message_size, msg_start) };

            if msg_start < message_size {
                msg_block = new_msg_block;
            }

            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);
            if msg_start < message_size {
                msg_byte_ptr = new_msg_byte_ptr;
                verify_msg_block_padding(msg_block, msg_byte_ptr);
            }
        }

        // If we had modulo == 0 then it means the last block was full,
        // and we can reset the pointer to zero to overwrite it.
        if msg_byte_ptr == BLOCK_SIZE {
            msg_byte_ptr = 0;
        }

        // Pad the rest such that we have a [u32; 2] block at the end representing the length
        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).
        // Here we rely on the fact that everything beyond the available input is set to 0.
        let index = msg_byte_ptr / INT_SIZE;
        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);

        msg_byte_ptr = msg_byte_ptr + 1;
        let last_block = msg_block;

        // If we don't have room to write the size, compress the block and reset it.
        if msg_byte_ptr > MSG_SIZE_PTR {
            h = sha256_compression(msg_block, h);
            // \`attach_len_to_msg_block\` will zero out everything after the \`msg_byte_ptr\`.
            msg_byte_ptr = 0;
        }

        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };

        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);

        hash_final_block(msg_block, h)
    }
}

// Variable size SHA-256 hash
unconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {
    let num_full_blocks = message_size / BLOCK_SIZE;
    // Intermediate hash, starting with the canonical initial value
    let mut h: STATE = INITIAL_STATE;
    // Pointer into msg_block on a 64 byte scale
    for i in 0..num_full_blocks {
        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);
        h = sha256_compression(msg_block, h);
    }

    // Handle setup of the final msg block.
    // This case is only hit if the msg is less than the block size,
    // or our message cannot be evenly split into blocks.
    let modulo = message_size % BLOCK_SIZE;
    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {
        let msg_start = BLOCK_SIZE * num_full_blocks;
        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);

        (new_msg_block, new_msg_byte_ptr)
    } else {
        // If we had modulo == 0 then it means the last block was full,
        // and we can reset the pointer to zero to overwrite it.
        ([0; INT_BLOCK_SIZE], 0)
    };

    // Pad the rest such that we have a [u32; 2] block at the end representing the length
    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).
    // Here we rely on the fact that everything beyond the available input is set to 0.
    let index = msg_byte_ptr / INT_SIZE;
    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);

    // If we don't have room to write the size, compress the block and reset it.
    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {
        // \`attach_len_to_msg_block\` will zero out everything after the \`msg_byte_ptr\`.
        (sha256_compression(msg_block, h), 0)
    } else {
        (h, msg_byte_ptr + 1)
    };
    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);

    hash_final_block(msg_block, h)
}

// Take \`BLOCK_SIZE\` number of bytes from \`msg\` starting at \`msg_start\`.
// Returns the block and the length that has been copied rather than padded with zeros.
unconstrained fn build_msg_block<let N: u32>(
    msg: [u8; N],
    message_size: u32,
    msg_start: u32,
) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {
    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];

    // We insert \`BLOCK_SIZE\` bytes (or up to the end of the message)
    let block_input = if message_size < msg_start {
        // This function is sometimes called with \`msg_start\` past the end of the message.
        // In this case we return an empty block and zero pointer to signal that the result should be ignored.
        0
    } else if message_size < msg_start + BLOCK_SIZE {
        message_size - msg_start
    } else {
        BLOCK_SIZE
    };

    // Figure out the number of items in the int array that we have to pack.
    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]
    let mut int_input = block_input / INT_SIZE;
    if block_input % INT_SIZE != 0 {
        int_input = int_input + 1;
    };

    for i in 0..int_input {
        let mut msg_item: u32 = 0;
        // Always construct the integer as 4 bytes, even if it means going beyond the input.
        for j in 0..INT_SIZE {
            let k = i * INT_SIZE + j;
            let msg_byte = if k < block_input {
                msg[msg_start + k]
            } else {
                0
            };
            msg_item = lshift8(msg_item, 1) + msg_byte as u32;
        }
        msg_block[i] = msg_item;
    }

    // Returning the index as if it was a 64 byte array.
    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.
    (msg_block, block_input)
}

// Verify the block we are compressing was appropriately constructed by \`build_msg_block\`
// and matches the input data. Returns the index of the first unset item.
// If \`message_size\` is less than \`msg_start\` then this is called with the old non-empty block;
// in that case we can skip verification, ie. no need to check that everything is zero.
fn verify_msg_block<let N: u32>(
    msg: [u8; N],
    message_size: u32,
    msg_block: MSG_BLOCK,
    msg_start: u32,
) -> BLOCK_BYTE_PTR {
    let mut msg_byte_ptr = 0;
    let mut msg_end = msg_start + BLOCK_SIZE;
    if msg_end > N {
        msg_end = N;
    }
    // We might have to go beyond the input to pad the fields.
    if msg_end % INT_SIZE != 0 {
        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;
    }

    // Reconstructed packed item.
    let mut msg_item: u32 = 0;

    // Inclusive at the end so that we can compare the last item.
    let mut i: u32 = 0;
    for k in msg_start..=msg_end {
        if k % INT_SIZE == 0 {
            // If we consumed some input we can compare against the block.
            if (msg_start < message_size) & (k > msg_start) {
                assert_eq(msg_block[i], msg_item as u32);
                i = i + 1;
                msg_item = 0;
            }
        }
        // Shift the accumulator
        msg_item = lshift8(msg_item, 1);
        // If we have input to consume, add it at the rightmost position.
        if k < message_size & k < msg_end {
            msg_item = msg_item + msg[k] as u32;
            msg_byte_ptr = msg_byte_ptr + 1;
        }
    }

    msg_byte_ptr
}

// Verify the block we are compressing was appropriately padded with zeros by \`build_msg_block\`.
// This is only relevant for the last, potentially partially filled block.
fn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {
    // Check all the way to the end of the block.
    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);
}

// Verify that a region of ints in the message block are (partially) zeroed,
// up to an (exclusive) maximum which can either be the end of the block
// or just where the size is to be written.
fn verify_msg_block_zeros(
    msg_block: MSG_BLOCK,
    mut msg_byte_ptr: BLOCK_BYTE_PTR,
    max_int_byte_ptr: u32,
) {
    // This variable is used to get around the compiler under-constrained check giving a warning.
    // We want to check against a constant zero, but if it does not come from the circuit inputs
    // or return values the compiler check will issue a warning.
    let zero = msg_block[0] - msg_block[0];

    // First integer which is supposed to be (partially) zero.
    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;

    // Check partial zeros.
    let modulo = msg_byte_ptr % INT_SIZE;
    if modulo != 0 {
        let zeros = INT_SIZE - modulo;
        let mask = if zeros == 3 {
            TWO_POW_24
        } else if zeros == 2 {
            TWO_POW_16
        } else {
            TWO_POW_8
        };
        assert_eq(msg_block[int_byte_ptr] % mask, zero);
        int_byte_ptr = int_byte_ptr + 1;
    }

    // Check the rest of the items.
    for i in 0..max_int_byte_ptr {
        if i >= int_byte_ptr {
            assert_eq(msg_block[i], zero);
        }
    }
}

// Verify that up to the byte pointer the two blocks are equal.
// At the byte pointer the new block can be partially zeroed.
fn verify_msg_block_equals_last(
    msg_block: MSG_BLOCK,
    last_block: MSG_BLOCK,
    mut msg_byte_ptr: BLOCK_BYTE_PTR,
) {
    // msg_byte_ptr is the position at which they are no longer have to be the same.
    // First integer which is supposed to be (partially) zero contains that pointer.
    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;

    // Check partial zeros.
    let modulo = msg_byte_ptr % INT_SIZE;
    if modulo != 0 {
        // Reconstruct the partially zero item from the last block.
        let last_field = last_block[int_byte_ptr];
        let mut msg_item: u32 = 0;
        // Reset to where they are still equal.
        msg_byte_ptr = msg_byte_ptr - modulo;
        for i in 0..INT_SIZE {
            msg_item = lshift8(msg_item, 1);
            if i < modulo {
                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;
                msg_byte_ptr = msg_byte_ptr + 1;
            }
        }
        assert_eq(msg_block[int_byte_ptr], msg_item);
    }

    for i in 0..INT_SIZE_PTR {
        if i < int_byte_ptr {
            assert_eq(msg_block[i], last_block[i]);
        }
    }
}

// Set the rightmost \`zeros\` number of bytes to 0.
#[inline_always]
fn set_item_zeros(item: u32, zeros: u8) -> u32 {
    lshift8(rshift8(item, zeros), zeros)
}

// Replace one byte in the item with a value, and set everything after it to zero.
fn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {
    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;
    let zeroed_item = set_item_zeros(msg_item, zeros as u8);
    let new_item = byte_into_item(msg_byte, msg_byte_ptr);
    zeroed_item + new_item
}

// Get a byte of a message item according to its overall position in the \`BLOCK_SIZE\` space.
fn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {
    // How many times do we have to shift to the right to get to the position we want?
    let max_shifts = INT_SIZE - 1;
    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;
    msg_item = rshift8(msg_item, shifts as u8);
    // At this point the byte we want is in the rightmost position.
    msg_item as u8
}

// Project a byte into a position in a field based on the overall block pointer.
// For example putting 1 into pointer 5 would be 100, because overall we would
// have [____, 0100] with indexes [0123,4567].
#[inline_always]
fn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {
    let mut msg_item = msg_byte as u32;
    // How many times do we have to shift to the left to get to the position we want?
    let max_shifts = INT_SIZE - 1;
    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;
    lshift8(msg_item, shifts as u8)
}

// Construct a field out of 4 bytes.
#[inline_always]
fn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {
    let mut item = b0 as u32;
    item = lshift8(item, 1) + b1 as u32;
    item = lshift8(item, 1) + b2 as u32;
    item = lshift8(item, 1) + b3 as u32;
    item
}

// Shift by 8 bits to the left between 0 and 4 times.
// Checks \`is_unconstrained()\` to just use a bitshift if we're running in an unconstrained context,
// otherwise multiplies by 256.
#[inline_always]
fn lshift8(item: u32, shifts: u8) -> u32 {
    if is_unconstrained() {
        // Brillig wouldn't shift 0<<4 without overflow.
        if shifts >= 4 {
            0
        } else {
            item << (8 * shifts)
        }
    } else {
        // We can do a for loop up to INT_SIZE or an if-else.
        if shifts == 0 {
            item
        } else if shifts == 1 {
            item * TWO_POW_8
        } else if shifts == 2 {
            item * TWO_POW_16
        } else if shifts == 3 {
            item * TWO_POW_24
        } else {
            // Doesn't make sense, but it's most likely called on 0 anyway.
            0
        }
    }
}

// Shift by 8 bits to the right between 0 and 4 times.
// Checks \`is_unconstrained()\` to just use a bitshift if we're running in an unconstrained context,
// otherwise divides by 256.
fn rshift8(item: u32, shifts: u8) -> u32 {
    if is_unconstrained() {
        item >> (8 * shifts)
    } else {
        // Division wouldn't work on \`Field\`.
        if shifts == 0 {
            item
        } else if shifts == 1 {
            item / TWO_POW_8
        } else if shifts == 2 {
            item / TWO_POW_16
        } else if shifts == 3 {
            item / TWO_POW_24
        } else {
            0
        }
    }
}

// Zero out all bytes between the end of the message and where the length is appended,
// then write the length into the last 8 bytes of the block.
unconstrained fn attach_len_to_msg_block(
    mut msg_block: MSG_BLOCK,
    mut msg_byte_ptr: BLOCK_BYTE_PTR,
    message_size: u32,
) -> MSG_BLOCK {
    // We assume that \`msg_byte_ptr\` is less than 57 because if not then it is reset to zero before calling this function.
    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).
    // There can be one item which has to be partially zeroed.
    let modulo = msg_byte_ptr % INT_SIZE;
    if modulo != 0 {
        // Index of the block in which we find the item we need to partially zero.
        let i = msg_byte_ptr / INT_SIZE;
        let zeros = INT_SIZE - modulo;
        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);
        msg_byte_ptr = msg_byte_ptr + zeros;
    }

    // The rest can be zeroed without bit shifting anything.
    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {
        msg_block[i] = 0;
    }

    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.
    let len = 8 * message_size;
    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();
    for i in 0..=1 {
        let shift = i * 4;
        msg_block[INT_SIZE_PTR + i] = make_item(
            len_bytes[shift],
            len_bytes[shift + 1],
            len_bytes[shift + 2],
            len_bytes[shift + 3],
        );
    }
    msg_block
}

// Verify that the message length was correctly written by \`attach_len_to_msg_block\`,
// and that everything between the byte pointer and the size pointer was zeroed,
// and that everything before the byte pointer was untouched.
fn verify_msg_len(
    msg_block: MSG_BLOCK,
    last_block: MSG_BLOCK,
    msg_byte_ptr: BLOCK_BYTE_PTR,
    message_size: u32,
) {
    // Check zeros up to the size pointer.
    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);

    // Check that up to the pointer we match the last block.
    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);

    // We verify the message length was inserted correctly by reversing the byte decomposition.
    let mut reconstructed_len: u64 = 0;
    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {
        reconstructed_len = reconstructed_len * TWO_POW_32;
        reconstructed_len = reconstructed_len + msg_block[i] as u64;
    }
    let len = 8 * message_size as u64;
    assert_eq(reconstructed_len, len);
}

// Perform the final compression, then transform the \`STATE\` into \`HASH\`.
fn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {
    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes
    // Hash final padded block
    state = sha256_compression(msg_block, state);

    // Return final hash as byte array
    for j in 0..8 {
        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();
        for k in 0..4 {
            out_h[4 * j + k] = h_bytes[k];
        }
    }

    out_h
}

mod equivalence_test {

    #[test]
    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {
        let message_size = message_size % 100;
        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };
        let sha = super::sha256_var(msg, message_size);
        assert_eq(sha, unconstrained_sha);
    }
}
`}},r={transpiled:g,noir_version:f,name:_,functions:p,outputs:h,file_map:m},s=o(r);class a extends l{constructor(e,t){super(e,s,t)}static async at(e,t){return d.at(e,a.artifact,t)}static deploy(e,t){return new A(i.default(),e,s,a.at,Array.from(arguments).slice(1))}static deployWithPublicKeys(e,t,y){return new A(e,t,s,a.at,Array.from(arguments).slice(2))}static deployWithOpts(e,...t){return new A(e.publicKeys??i.default(),e.wallet,s,a.at,Array.from(arguments).slice(1),e.method??"constructor")}static get artifact(){return s}static get artifactForPublic(){return c(r)}static get storage(){return{admin:{slot:new n(BigInt(1))},agents:{slot:new n(BigInt(2))},disaster_titles:{slot:new n(BigInt(3))},disaster_metadata:{slot:new n(BigInt(4))},disaster_amounts:{slot:new n(BigInt(5))},disaster_creators:{slot:new n(BigInt(6))},disaster_active:{slot:new n(BigInt(7))},donation_count:{slot:new n(BigInt(8))},vote_count:{slot:new n(BigInt(9))},unlocked_funds:{slot:new n(BigInt(10))}}}static get notes(){return{ValueNote:{id:new u(0)}}}}export{a as GodsHandContract,s as GodsHandContractArtifact};
